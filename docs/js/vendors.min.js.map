{"version":3,"sources":["node_modules/three/build/three.js","node_modules/three/examples/js/loaders/MTLLoader.js","node_modules/three/examples/js/loaders/OBJLoader.js"],"names":["global","factory","exports","module","define","amd","globalThis","self","THREE","this","undefined","Number","EPSILON","Math","pow","isInteger","value","isFinite","floor","sign","x","Function","prototype","Object","defineProperty","get","toString","match","assign","target","TypeError","output","index","arguments","length","source","nextKey","hasOwnProperty","call","runtime","undefined$1","Op","hasOwn","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","obj","key","enumerable","configurable","writable","err","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","NormalAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","asyncGeneratorStep","gen","_next","_throw","_defineProperties","props","descriptor","_createClass","Constructor","protoProps","staticProps","_inheritsLoose","subClass","superClass","_assertThisInitialized","ReferenceError","_arrayLikeToArray","arr","len","arr2","Array","_createForOfIteratorHelperLoose","o","allowArrayLike","it","isArray","minLen","n","from","test","_unsupportedIterableToArray","bind","EventDispatcher","addEventListener","listener","_listeners","listeners","indexOf","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","l","_lut","_canvas","_seed","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","toUpperCase","clamp","min","max","euclideanModulo","m","mapLinear","a1","a2","b1","b2","lerp","y","t","damp","lambda","dt","exp","pingpong","abs","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","seededRandom","s","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","Vector2","_proto","setScalar","scalar","setX","setY","setComponent","getComponent","clone","copy","v","add","w","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","elements","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","f","g","h","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","rotate","theta","translate","matrix","ImageUtils","getDataURL","image","src","HTMLCanvasElement","canvas","document","createElementNS","width","height","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","DEFAULT_IMAGE","DEFAULT_MAPPING","uuid","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","serializeImage","HTMLImageElement","ImageBitmap","data","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","images","url","isDataTexture","dispose","transformUv","uv","Vector4","z","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","WebGLRenderTarget","_EventDispatcher","options","_this","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","setSize","WebGLMultisampleRenderTarget","_WebGLRenderTarget","samples","Quaternion","_x","_y","_z","_w","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","update","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","_s","_s2","_s3","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","Vector3","multiplyVectors","applyEuler","applyQuaternion","_quaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","Box3","Infinity","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","count","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$1","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","_box","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0","_v1","_v2","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","getBoundingSphere","intersect","_points","v0","extents","j","_testAxis","p0","p1","p2","_box$1","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","lookAt","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","setFromMatrix3","makeBasis","extractRotation","scaleX","_v1$1","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","_ce","_cf","_de","_df","_ae","_af","_be","_bf","ac","ad","bc","bd","_ac","_ad","_bc","_bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","isVector3","t14","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","_m1","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","Euler","DefaultOrder","asin","setFromQuaternion","_matrix","setFromVector3","reorder","newOrder","_quaternion$1","toVector3","optionalResult","RotationOrders","Layers","mask","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$2","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","DefaultUp","defineProperties","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","remove","clear","attach","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","serialize","library","element","JSON","stringify","isInstancedMesh","instanceMatrix","isMesh","isLine","isPoints","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","_i","_l","_i2","_i3","animation","extractFromCache","_shapes","cache","recursive","parse","child","_vector1","_vector2","_normalMatrix","Plane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","isColor","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","color","components","parseInt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","normalized","NAMES","Face3","materialIndex","vertexNormals","vertexColors","_il","materialId","Material","fog","blending","side","flatShading","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","customProgramCacheKey","newValue","currentValue","isRoot","_data","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","_vector2$1","BufferAttribute","itemSize","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float16BufferAttribute","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","isFloat16BufferAttribute","TYPED_ARRAYS","getTypedArray","buffer","_id","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","groups","boundingSphere","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","hasAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","morphAttributesPosition","isGLBufferAttribute","morphAttribute","_il2","_morphAttribute","jl","computeFaceNormals","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","group","handleTriangle","tmp2","n2","_i4","_il3","_group","_start","_j","_jl","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","cb","ab","_i5","_il4","_i6","_il5","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","_name","morphArray","_newAttribute","_i7","_key","attributeData","hasMorphAttributes","_key2","attributeArray","_attribute2","_attributeData","_name2","_i8","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkBufferGeometryIntersection","raycaster","morphPosition","morphInfluences","morphTargetInfluences","influence","boneTransform","intersection","checkIntersection","face","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","_a","_b","_c","_groupMaterial","isGeometry","BoxGeometry","_BufferGeometry","depth","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","_iy","_ix","cloneUniforms","property","isMatrix3","isMatrix4","isVector2","isVector4","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","skew","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderer","scene","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","render","CubeTexture","_needsFlipEnvMap","isCubeTexture","WebGLCubeRenderTarget","dummy","fromEquirectangularTexture","shader","tEquirect","mesh","currentMinFilter","stencil","DataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","time","frame","requestAnimationFrame","cancelAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","bufferData","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmissionmap_fragment","transmissionmap_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","cubemaps","objects","planeMesh","boxMesh","clearColor","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","isScene","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","resetDefaultState","setup","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","isInstancedBufferAttribute","_attribute","_buffer","_type","instanceColor","_buffer2","_type2","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","onTextureDispose","cubemap","has","currentRenderList","getRenderList","setRenderList","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","memory","updateWireframeAttribute","geometryIndex","geometryPosition","_array","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","sort","MAX_SAFE_INTEGER","morphInfluencesSum","_influence","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","DataTexture2DArray","wrapR","DataTexture3D","physical","transmission","transmissionMap","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","unit","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","idIsIndex","subscript","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","split","join","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","versionString","isRawShaderMaterial","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexUvs","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","cachedUniforms","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","deleteShader","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","isWebGLRenderTarget","getParameters","shadows","environment","isMeshStandardMaterial","bones","nVertexUniforms","nVertexMatrices","getMaxBones","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","list","cameras","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","_uniforms","penumbra","_shadow","_shadowUniforms","isRectAreaLight","_uniforms2","isPointLight","_uniforms3","_shadow2","_shadowUniforms2","isHemisphereLight","_uniforms4","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","_uniforms5","_uniforms6","_uniforms7","_uniforms8","WebGLRenderState","lightsArray","shadowsArray","setupLights","setupLightsView","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderCallDepth","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_renderer","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","k","kl","depthMaterial","_depthMaterial","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","_pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","_equationToGL","_factorToGL","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","activeTexture","webglSlot","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","WebGLTextures","_gl","utils","_wrappingToGL","_filterToGL","_videoTextures","useOffscreenCanvas","OffscreenCanvas","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","_mipmap","mipmapImage","_j2","_mipmap2","uploadCubeTexture","wrappingToGL","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","_samples","_glInternalFormat","_samples2","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","isWebGLMultisampleRenderTarget","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","createFramebuffer","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","Group","WebXRController","_targetRay","_grip","_hand","WebXRManager","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","onSessionEnd","disconnect","setFramebuffer","isPresenting","onInputSourcesChange","inputSources","removed","added","_inputSource","_controller","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","_ref","_callee","layerInit","baseLayer","_context","getContextAttributes","xrCompatible","makeXRCompatible","antialias","XRWebGLLayer","updateRenderState","requestReferenceSpace","args","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","transform","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","pixelRatio","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","WebGLRenderer","display","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderState","renderStateStack","domElement","sortObjects","toneMappingExposure","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","message","initGLContext","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","material2","initMaterial","projectObject","isGroup","isLOD","isImmediateRenderObject","_geometry","_material","renderObjects","isArrayCamera","camera2","renderObjectImmediate","lightsStateVersion","programCacheKey","programChange","needsLights","materialNeedsLights","progUniforms","uniformsList","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","window","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","halfFloatSupportedByExt","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","WebGL1Renderer","joints","inputState","pinching","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","_step","_iterator","inputjoint","jointPose","getJointPose","jointName","_joint","joint","jointRadius","indexTip","thumbTip","distanceToPinch","handedness","getPose","targetRaySpace","gripSpace","FogExp2","Fog","Scene","_Object3D","InterleavedBuffer","isInterleavedBuffer","arrayBuffers","_uuid","ib","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$7","_matrix$1","SkinnedMesh","bindMatrixInverse","Bone","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","weight","boneIndex","boneInverses","isBone","_offsetMatrix","_identityMatrix","Skeleton","inverse","bone","_bone","getBoneByName","fromJSON","json","boneInverse","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","lineDistances","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","_distance","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","requestVideoFrameCallback","updateVideo","CompressedTexture","CanvasTexture","DepthTexture","readyState","HAVE_CURRENT_DATA","isCanvasTexture","CircleGeometry","segments","thetaStart","thetaLength","vertex","segment","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateCap","centerIndexStart","centerIndexEnd","_x2","cosTheta","sinTheta","_x3","slope","indexRow","generateTorso","ConeGeometry","_CylinderGeometry","PolyhedronGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","azi","correctUVs","correctSeam","generateUVs","DodecahedronGeometry","_PolyhedronGeometry","_v0$2","_v1$5","_normal$1","_triangle","EdgesGeometry","thresholdAngle","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","_edgeData$key","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","faces","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","hl","ahole","_h","_hl","_ahole","concat","scalePt2","pt","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","_h2","_hl2","_ahole2","_k","_bs","vert","_h3","_hl3","_ahole3","_vert","bs","_vert2","binormals","_vert3","_t","_bs2","_vert4","_h4","_hl4","_ahole4","_vert5","sidewalls","layeroffset","_k2","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","layer","_i9","_i10","_face","_i11","_face2","_i12","_face3","buildLidFaces","_h5","_hl5","_ahole5","buildSideFaces","_toJSON","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","LatheGeometry","phiStart","phiLength","inverseSegments","base","n1","_base","OctahedronGeometry","ParametricGeometry","func","slices","stacks","pu","pv","sliceCount","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","_segment","ShapeGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","_shapeHole","_l2","_l3","_toJSON$1","SphereGeometry","thetaEnd","grid","verticesRow","uOffset","TetrahedronGeometry","TextGeometry","_ExtrudeGeometry","text","font","isFont","generateShapes","TorusGeometry","tube","tubularSegments","arc","TorusKnotGeometry","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","TubeGeometry","closed","frames","P","generateSegment","getPointAt","generateIndices","generateBufferData","WireframeGeometry","edge","edges","ol","edge1","edge2","Geometries","freeze","BoxBufferGeometry","CircleBufferGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronBufferGeometry","ExtrudeBufferGeometry","IcosahedronBufferGeometry","LatheBufferGeometry","OctahedronBufferGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingBufferGeometry","ShapeBufferGeometry","SphereBufferGeometry","TetrahedronBufferGeometry","TextBufferGeometry","TorusBufferGeometry","TorusKnotBufferGeometry","TubeBufferGeometry","RawShaderMaterial","STANDARD","PHYSICAL","ior","TOON","MATCAP","Materials","AnimationUtils","arraySlice","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","_loop","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex","endIndex","_startIndex","_endIndex","interpolant","_startIndex2","_endIndex2","evaluate","resultBuffer","numTimes","valueStart","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","parseKeyframeTrack","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","_giveUpAt","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","_readOffset","_writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","morphTarget","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","_m","animationKey","boneName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","Loader","manager","crossOrigin","withCredentials","resourcePath","requestHeader","load","loadAsync","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","FileLoader","AnimationLoader","CompressedTextureLoader","ImageLoader","CubeTextureLoader","DataTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","setTimeout","request","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","header","XMLHttpRequest","open","callbacks","_callback","overrideMimeType","send","setResponseType","setMimeType","loaded","loadTexture","texDatas","mipmapCount","isCubemap","onImageLoad","onImageError","substr","urls","texData","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","_theta","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","diff","segmentLength","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","SphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","LightProbe","MaterialLoader","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","arrayBuffer","getArrayBuffer","typedArray","bufferAttribute","_typedArray","_bufferAttribute","drawcalls","offsets","ObjectLoader","_Loader","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","geometryShapes","bufferGeometryLoader","details","_shape","deserializeImage","loadImage","deserializedImage","_deserializedImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","objectAnimations","setTexturePath","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","isImageBitmapLoader","setOptions","fetchOptions","credentials","res","blob","imageBitmap","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","_tmpPath","_tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","tmpPath","tmpShape","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","_sIdx","_sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","Font","paths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","createPaths","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","substring","AudioContext","webkitAudioContext","AudioLoader","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","Clock","autoStart","oldTime","elapsedTime","running","now","getElapsedTime","getDelta","newTime","performance","Date","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","Audio","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","_Audio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","mix","accumulateAdditive","weightAdditive","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","firstValidIndex","bindings","unbind","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","subTreeNode","searchNodeSubtree","childNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","_lastIndex","_lastObject","_m2","_bindingsForPath","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","Raycaster","PointCloud","ascSort","_intersectObject","setType","setItemSize","setCount","setFromCamera","coords","intersectObject","intersectObjects","Spherical","other","makeSafe","setFromCartesianCoords","Cylindrical","_vector$8","Box2","_startP","_startEnd","Line3","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","ImmediateRenderObject","_vector$9","SpotLightHelper","cone","coneLength","coneWidth","_vector$a","_boneMatrix","_matrixWorldInv","SkeletonHelper","_LineSegments","getBoneList","boneList","isSkeletonHelper","PointLightHelper","_Mesh","sphereSize","_vector$b","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_color","_v","_v1$6","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$c","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_lineGeometry","_coneGeometry","_ENCODINGS","_box$3","BoxHelper","Box3Helper","PlaneHelper","_Line","_axis","ArrowHelper","headLength","headWidth","setDirection","setColor","AxesHelper","_floatView","_int32View","DataUtils","toHalfFloat","val","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","MAX_SAMPLES","ENCODINGS","backgroundMaterial","backgroundBox","_flatCamera","_createPlanes2","_createPlanes","_lodPlanes","_sizeLods","_sigmas","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","convertLinearToRGBE","maxComponent","fExp","log2","PMREMGenerator","weights","poleAxis","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","useSolidColor","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","outputSize","lod","sizeLod","texelSize","positionSize","uvSize","faceIndexSize","coordinates","fill","ClosedSplineCurve3","SplineCurve3","Spline","construct","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","maxInstancedCount","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","transparency","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","GeometryUtils","geometry1","materialIndexOffset","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","__THREE__","AdditiveAnimationBlendMode","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","GLSL1","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","isMultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","MTLLoader","setMaterialOptions","materialOptions","delimiter_pattern","materialsInfo","pos","ss","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","materialsArray","nameLookup","converted","mn","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","materialName","getAsArray","createMaterial_","setMapForType","mapType","texParams","getTextureParams","invertTrProperty","matParams","items","OBJLoader","object_pattern","material_library_pattern","material_use_pattern","map_use_pattern","ParserState","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","hasUVIndices","smooth","startMaterial","libraries","previous","inherited","mtllib","groupEnd","cloned","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertexPoint","addVertexLine","addNormal","addFaceNormal","addColor","addDefaultUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ia","ic","nLen","uvLen","addPointGeometry","vi","addLineGeometry","uvi","lineFirstChar","trimLeft","vertexData","faceVertices","vertexParts","lineParts","lineVertices","lineUVs","li","llen","pointData","hasVertexColors","createdMaterials","miLen","materialHash","sourceMaterial","materialPoints","materialLine"],"mappings":"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","file":"docs\\js\\vendors.min.js","sourcesContent":["// threejs.org/license\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\tif (Number.EPSILON === undefined) {\n\t\tNumber.EPSILON = Math.pow(2, -52);\n\t}\n\n\tif (Number.isInteger === undefined) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\t\tNumber.isInteger = function (value) {\n\t\t\treturn typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n\t\t};\n\t} //\n\n\n\tif (Math.sign === undefined) {\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\t\tMath.sign = function (x) {\n\t\t\treturn x < 0 ? -1 : x > 0 ? 1 : +x;\n\t\t};\n\t}\n\n\tif ('name' in Function.prototype === false) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\t\tObject.defineProperty(Function.prototype, 'name', {\n\t\t\tget: function get() {\n\t\t\t\treturn this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1];\n\t\t\t}\n\t\t});\n\t}\n\n\tif (Object.assign === undefined) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\tObject.assign = function (target) {\n\n\t\t\tif (target === undefined || target === null) {\n\t\t\t\tthrow new TypeError('Cannot convert undefined or null to object');\n\t\t\t}\n\n\t\t\tvar output = Object(target);\n\n\t\t\tfor (var index = 1; index < arguments.length; index++) {\n\t\t\t\tvar source = arguments[index];\n\n\t\t\t\tif (source !== undefined && source !== null) {\n\t\t\t\t\tfor (var nextKey in source) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n\t\t\t\t\t\t\toutput[nextKey] = source[nextKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn output;\n\t\t};\n\t}\n\n\t/**\n\t * Copyright (c) 2014-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\tvar runtime = function (exports) {\n\n\t\tvar Op = Object.prototype;\n\t\tvar hasOwn = Op.hasOwnProperty;\n\t\tvar undefined$1; // More compressible than void 0.\n\n\t\tvar $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n\t\tvar iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n\t\tvar asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n\t\tvar toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n\t\tfunction define(obj, key, value) {\n\t\t\tObject.defineProperty(obj, key, {\n\t\t\t\tvalue: value,\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true\n\t\t\t});\n\t\t\treturn obj[key];\n\t\t}\n\n\t\ttry {\n\t\t\t// IE 8 has a broken Object.defineProperty that only works on DOM objects.\n\t\t\tdefine({}, \"\");\n\t\t} catch (err) {\n\t\t\tdefine = function define(obj, key, value) {\n\t\t\t\treturn obj[key] = value;\n\t\t\t};\n\t\t}\n\n\t\tfunction wrap(innerFn, outerFn, self, tryLocsList) {\n\t\t\t// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n\t\t\tvar protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n\t\t\tvar generator = Object.create(protoGenerator.prototype);\n\t\t\tvar context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n\t\t\t// .throw, and .return methods.\n\n\t\t\tgenerator._invoke = makeInvokeMethod(innerFn, self, context);\n\t\t\treturn generator;\n\t\t}\n\n\t\texports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n\t\t// record like context.tryEntries[i].completion. This interface could\n\t\t// have been (and was previously) designed to take a closure to be\n\t\t// invoked without arguments, but in all the cases we care about we\n\t\t// already have an existing method we want to call, so there's no need\n\t\t// to create a new function object. We can even get away with assuming\n\t\t// the method takes exactly one argument, since that happens to be true\n\t\t// in every case, so we don't have to touch the arguments object. The\n\t\t// only additional allocation required is the completion record, which\n\t\t// has a stable shape and so hopefully should be cheap to allocate.\n\n\t\tfunction tryCatch(fn, obj, arg) {\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"normal\",\n\t\t\t\t\targ: fn.call(obj, arg)\n\t\t\t\t};\n\t\t\t} catch (err) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"throw\",\n\t\t\t\t\targ: err\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tvar GenStateSuspendedStart = \"suspendedStart\";\n\t\tvar GenStateSuspendedYield = \"suspendedYield\";\n\t\tvar GenStateExecuting = \"executing\";\n\t\tvar GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n\t\t// breaking out of the dispatch switch statement.\n\n\t\tvar ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n\t\t// .constructor.prototype properties for functions that return Generator\n\t\t// objects. For full spec compliance, you may wish to configure your\n\t\t// minifier not to mangle the names of these two functions.\n\n\t\tfunction Generator() {}\n\n\t\tfunction GeneratorFunction() {}\n\n\t\tfunction GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n\t\t// don't natively support it.\n\n\n\t\tvar IteratorPrototype = {};\n\n\t\tIteratorPrototype[iteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\tvar getProto = Object.getPrototypeOf;\n\t\tvar NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n\t\tif (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n\t\t\t// This environment has a native %IteratorPrototype%; use it instead\n\t\t\t// of the polyfill.\n\t\t\tIteratorPrototype = NativeIteratorPrototype;\n\t\t}\n\n\t\tvar Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\t\tGeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n\t\tGeneratorFunctionPrototype.constructor = GeneratorFunction;\n\t\tGeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n\t\t// Iterator interface in terms of a single ._invoke method.\n\n\t\tfunction defineIteratorMethods(prototype) {\n\t\t\t[\"next\", \"throw\", \"return\"].forEach(function (method) {\n\t\t\t\tdefine(prototype, method, function (arg) {\n\t\t\t\t\treturn this._invoke(method, arg);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\texports.isGeneratorFunction = function (genFun) {\n\t\t\tvar ctor = typeof genFun === \"function\" && genFun.constructor;\n\t\t\treturn ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n\t\t\t// do is to check its .name property.\n\t\t\t(ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n\t\t};\n\n\t\texports.mark = function (genFun) {\n\t\t\tif (Object.setPrototypeOf) {\n\t\t\t\tObject.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n\t\t\t} else {\n\t\t\t\tgenFun.__proto__ = GeneratorFunctionPrototype;\n\t\t\t\tdefine(genFun, toStringTagSymbol, \"GeneratorFunction\");\n\t\t\t}\n\n\t\t\tgenFun.prototype = Object.create(Gp);\n\t\t\treturn genFun;\n\t\t}; // Within the body of any async function, `await x` is transformed to\n\t\t// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n\t\t// `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n\t\t// meant to be awaited.\n\n\n\t\texports.awrap = function (arg) {\n\t\t\treturn {\n\t\t\t\t__await: arg\n\t\t\t};\n\t\t};\n\n\t\tfunction AsyncIterator(generator, PromiseImpl) {\n\t\t\tfunction invoke(method, arg, resolve, reject) {\n\t\t\t\tvar record = tryCatch(generator[method], generator, arg);\n\n\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\treject(record.arg);\n\t\t\t\t} else {\n\t\t\t\t\tvar result = record.arg;\n\t\t\t\t\tvar value = result.value;\n\n\t\t\t\t\tif (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n\t\t\t\t\t\treturn PromiseImpl.resolve(value.__await).then(function (value) {\n\t\t\t\t\t\t\tinvoke(\"next\", value, resolve, reject);\n\t\t\t\t\t\t}, function (err) {\n\t\t\t\t\t\t\tinvoke(\"throw\", err, resolve, reject);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn PromiseImpl.resolve(value).then(function (unwrapped) {\n\t\t\t\t\t\t// When a yielded Promise is resolved, its final value becomes\n\t\t\t\t\t\t// the .value of the Promise<{value,done}> result for the\n\t\t\t\t\t\t// current iteration.\n\t\t\t\t\t\tresult.value = unwrapped;\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}, function (error) {\n\t\t\t\t\t\t// If a rejected Promise was yielded, throw the rejection back\n\t\t\t\t\t\t// into the async generator function so it can be handled there.\n\t\t\t\t\t\treturn invoke(\"throw\", error, resolve, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar previousPromise;\n\n\t\t\tfunction enqueue(method, arg) {\n\t\t\t\tfunction callInvokeWithMethodAndArg() {\n\t\t\t\t\treturn new PromiseImpl(function (resolve, reject) {\n\t\t\t\t\t\tinvoke(method, arg, resolve, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn previousPromise = // If enqueue has been called before, then we want to wait until\n\t\t\t\t// all previous Promises have been resolved before calling invoke,\n\t\t\t\t// so that results are always delivered in the correct order. If\n\t\t\t\t// enqueue has not been called before, then it is important to\n\t\t\t\t// call invoke immediately, without waiting on a callback to fire,\n\t\t\t\t// so that the async generator function has the opportunity to do\n\t\t\t\t// any necessary setup in a predictable way. This predictability\n\t\t\t\t// is why the Promise constructor synchronously invokes its\n\t\t\t\t// executor callback, and why async functions synchronously\n\t\t\t\t// execute code before the first await. Since we implement simple\n\t\t\t\t// async functions in terms of async generators, it is especially\n\t\t\t\t// important to get this right, even though it requires care.\n\t\t\t\tpreviousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n\t\t\t\t// invocations of the iterator.\n\t\t\t\tcallInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n\t\t\t} // Define the unified helper method that is used to implement .next,\n\t\t\t// .throw, and .return (see defineIteratorMethods).\n\n\n\t\t\tthis._invoke = enqueue;\n\t\t}\n\n\t\tdefineIteratorMethods(AsyncIterator.prototype);\n\n\t\tAsyncIterator.prototype[asyncIteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\texports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n\t\t// AsyncIterator objects; they just return a Promise for the value of\n\t\t// the final result produced by the iterator.\n\n\t\texports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n\t\t\tif (PromiseImpl === void 0) PromiseImpl = Promise;\n\t\t\tvar iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n\t\t\treturn exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n\t\t\t: iter.next().then(function (result) {\n\t\t\t\treturn result.done ? result.value : iter.next();\n\t\t\t});\n\t\t};\n\n\t\tfunction makeInvokeMethod(innerFn, self, context) {\n\t\t\tvar state = GenStateSuspendedStart;\n\t\t\treturn function invoke(method, arg) {\n\t\t\t\tif (state === GenStateExecuting) {\n\t\t\t\t\tthrow new Error(\"Generator is already running\");\n\t\t\t\t}\n\n\t\t\t\tif (state === GenStateCompleted) {\n\t\t\t\t\tif (method === \"throw\") {\n\t\t\t\t\t\tthrow arg;\n\t\t\t\t\t} // Be forgiving, per 25.3.3.3.3 of the spec:\n\t\t\t\t\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n\t\t\t\t\treturn doneResult();\n\t\t\t\t}\n\n\t\t\t\tcontext.method = method;\n\t\t\t\tcontext.arg = arg;\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tvar delegate = context.delegate;\n\n\t\t\t\t\tif (delegate) {\n\t\t\t\t\t\tvar delegateResult = maybeInvokeDelegate(delegate, context);\n\n\t\t\t\t\t\tif (delegateResult) {\n\t\t\t\t\t\t\tif (delegateResult === ContinueSentinel) continue;\n\t\t\t\t\t\t\treturn delegateResult;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.method === \"next\") {\n\t\t\t\t\t\t// Setting context._sent for legacy support of Babel's\n\t\t\t\t\t\t// function.sent implementation.\n\t\t\t\t\t\tcontext.sent = context._sent = context.arg;\n\t\t\t\t\t} else if (context.method === \"throw\") {\n\t\t\t\t\t\tif (state === GenStateSuspendedStart) {\n\t\t\t\t\t\t\tstate = GenStateCompleted;\n\t\t\t\t\t\t\tthrow context.arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontext.dispatchException(context.arg);\n\t\t\t\t\t} else if (context.method === \"return\") {\n\t\t\t\t\t\tcontext.abrupt(\"return\", context.arg);\n\t\t\t\t\t}\n\n\t\t\t\t\tstate = GenStateExecuting;\n\t\t\t\t\tvar record = tryCatch(innerFn, self, context);\n\n\t\t\t\t\tif (record.type === \"normal\") {\n\t\t\t\t\t\t// If an exception is thrown from innerFn, we leave state ===\n\t\t\t\t\t\t// GenStateExecuting and loop back for another invocation.\n\t\t\t\t\t\tstate = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n\t\t\t\t\t\tif (record.arg === ContinueSentinel) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tvalue: record.arg,\n\t\t\t\t\t\t\tdone: context.done\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (record.type === \"throw\") {\n\t\t\t\t\t\tstate = GenStateCompleted; // Dispatch the exception by looping back around to the\n\t\t\t\t\t\t// context.dispatchException(context.arg) call above.\n\n\t\t\t\t\t\tcontext.method = \"throw\";\n\t\t\t\t\t\tcontext.arg = record.arg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t} // Call delegate.iterator[context.method](context.arg) and handle the\n\t\t// result, either by returning a { value, done } result from the\n\t\t// delegate iterator, or by modifying context.method and context.arg,\n\t\t// setting context.delegate to null, and returning the ContinueSentinel.\n\n\n\t\tfunction maybeInvokeDelegate(delegate, context) {\n\t\t\tvar method = delegate.iterator[context.method];\n\n\t\t\tif (method === undefined$1) {\n\t\t\t\t// A .throw or .return when the delegate iterator has no .throw\n\t\t\t\t// method always terminates the yield* loop.\n\t\t\t\tcontext.delegate = null;\n\n\t\t\t\tif (context.method === \"throw\") {\n\t\t\t\t\t// Note: [\"return\"] must be used for ES3 parsing compatibility.\n\t\t\t\t\tif (delegate.iterator[\"return\"]) {\n\t\t\t\t\t\t// If the delegate iterator has a return method, give it a\n\t\t\t\t\t\t// chance to clean up.\n\t\t\t\t\t\tcontext.method = \"return\";\n\t\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t\t\tmaybeInvokeDelegate(delegate, context);\n\n\t\t\t\t\t\tif (context.method === \"throw\") {\n\t\t\t\t\t\t\t// If maybeInvokeDelegate(context) changed context.method from\n\t\t\t\t\t\t\t// \"return\" to \"throw\", let that override the TypeError below.\n\t\t\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.method = \"throw\";\n\t\t\t\t\tcontext.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tvar record = tryCatch(method, delegate.iterator, context.arg);\n\n\t\t\tif (record.type === \"throw\") {\n\t\t\t\tcontext.method = \"throw\";\n\t\t\t\tcontext.arg = record.arg;\n\t\t\t\tcontext.delegate = null;\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tvar info = record.arg;\n\n\t\t\tif (!info) {\n\t\t\t\tcontext.method = \"throw\";\n\t\t\t\tcontext.arg = new TypeError(\"iterator result is not an object\");\n\t\t\t\tcontext.delegate = null;\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tif (info.done) {\n\t\t\t\t// Assign the result of the finished delegate to the temporary\n\t\t\t\t// variable specified by delegate.resultName (see delegateYield).\n\t\t\t\tcontext[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n\t\t\t\tcontext.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n\t\t\t\t// exception, let the outer generator proceed normally. If\n\t\t\t\t// context.method was \"next\", forget context.arg since it has been\n\t\t\t\t// \"consumed\" by the delegate iterator. If context.method was\n\t\t\t\t// \"return\", allow the original .return call to continue in the\n\t\t\t\t// outer generator.\n\n\t\t\t\tif (context.method !== \"return\") {\n\t\t\t\t\tcontext.method = \"next\";\n\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Re-yield the result returned by the delegate method.\n\t\t\t\treturn info;\n\t\t\t} // The delegate iterator is finished, so forget it and continue with\n\t\t\t// the outer generator.\n\n\n\t\t\tcontext.delegate = null;\n\t\t\treturn ContinueSentinel;\n\t\t} // Define Generator.prototype.{next,throw,return} in terms of the\n\t\t// unified ._invoke helper method.\n\n\n\t\tdefineIteratorMethods(Gp);\n\t\tdefine(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n\t\t// @@iterator function is called on it. Some browsers' implementations of the\n\t\t// iterator prototype chain incorrectly implement this, causing the Generator\n\t\t// object to not be returned from this call. This ensures that doesn't happen.\n\t\t// See https://github.com/facebook/regenerator/issues/274 for more details.\n\n\t\tGp[iteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\tGp.toString = function () {\n\t\t\treturn \"[object Generator]\";\n\t\t};\n\n\t\tfunction pushTryEntry(locs) {\n\t\t\tvar entry = {\n\t\t\t\ttryLoc: locs[0]\n\t\t\t};\n\n\t\t\tif (1 in locs) {\n\t\t\t\tentry.catchLoc = locs[1];\n\t\t\t}\n\n\t\t\tif (2 in locs) {\n\t\t\t\tentry.finallyLoc = locs[2];\n\t\t\t\tentry.afterLoc = locs[3];\n\t\t\t}\n\n\t\t\tthis.tryEntries.push(entry);\n\t\t}\n\n\t\tfunction resetTryEntry(entry) {\n\t\t\tvar record = entry.completion || {};\n\t\t\trecord.type = \"normal\";\n\t\t\tdelete record.arg;\n\t\t\tentry.completion = record;\n\t\t}\n\n\t\tfunction Context(tryLocsList) {\n\t\t\t// The root entry object (effectively a try statement without a catch\n\t\t\t// or a finally block) gives us a place to store values thrown from\n\t\t\t// locations where there is no enclosing try statement.\n\t\t\tthis.tryEntries = [{\n\t\t\t\ttryLoc: \"root\"\n\t\t\t}];\n\t\t\ttryLocsList.forEach(pushTryEntry, this);\n\t\t\tthis.reset(true);\n\t\t}\n\n\t\texports.keys = function (object) {\n\t\t\tvar keys = [];\n\n\t\t\tfor (var key in object) {\n\t\t\t\tkeys.push(key);\n\t\t\t}\n\n\t\t\tkeys.reverse(); // Rather than returning an object with a next method, we keep\n\t\t\t// things simple and return the next function itself.\n\n\t\t\treturn function next() {\n\t\t\t\twhile (keys.length) {\n\t\t\t\t\tvar key = keys.pop();\n\n\t\t\t\t\tif (key in object) {\n\t\t\t\t\t\tnext.value = key;\n\t\t\t\t\t\tnext.done = false;\n\t\t\t\t\t\treturn next;\n\t\t\t\t\t}\n\t\t\t\t} // To avoid creating an additional object, we just hang the .value\n\t\t\t\t// and .done properties off the next function object itself. This\n\t\t\t\t// also ensures that the minifier will not anonymize the function.\n\n\n\t\t\t\tnext.done = true;\n\t\t\t\treturn next;\n\t\t\t};\n\t\t};\n\n\t\tfunction values(iterable) {\n\t\t\tif (iterable) {\n\t\t\t\tvar iteratorMethod = iterable[iteratorSymbol];\n\n\t\t\t\tif (iteratorMethod) {\n\t\t\t\t\treturn iteratorMethod.call(iterable);\n\t\t\t\t}\n\n\t\t\t\tif (typeof iterable.next === \"function\") {\n\t\t\t\t\treturn iterable;\n\t\t\t\t}\n\n\t\t\t\tif (!isNaN(iterable.length)) {\n\t\t\t\t\tvar i = -1,\n\t\t\t\t\t\t\tnext = function next() {\n\t\t\t\t\t\twhile (++i < iterable.length) {\n\t\t\t\t\t\t\tif (hasOwn.call(iterable, i)) {\n\t\t\t\t\t\t\t\tnext.value = iterable[i];\n\t\t\t\t\t\t\t\tnext.done = false;\n\t\t\t\t\t\t\t\treturn next;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnext.value = undefined$1;\n\t\t\t\t\t\tnext.done = true;\n\t\t\t\t\t\treturn next;\n\t\t\t\t\t};\n\n\t\t\t\t\treturn next.next = next;\n\t\t\t\t}\n\t\t\t} // Return an iterator with no values.\n\n\n\t\t\treturn {\n\t\t\t\tnext: doneResult\n\t\t\t};\n\t\t}\n\n\t\texports.values = values;\n\n\t\tfunction doneResult() {\n\t\t\treturn {\n\t\t\t\tvalue: undefined$1,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tContext.prototype = {\n\t\t\tconstructor: Context,\n\t\t\treset: function reset(skipTempReset) {\n\t\t\t\tthis.prev = 0;\n\t\t\t\tthis.next = 0; // Resetting context._sent for legacy support of Babel's\n\t\t\t\t// function.sent implementation.\n\n\t\t\t\tthis.sent = this._sent = undefined$1;\n\t\t\t\tthis.done = false;\n\t\t\t\tthis.delegate = null;\n\t\t\t\tthis.method = \"next\";\n\t\t\t\tthis.arg = undefined$1;\n\t\t\t\tthis.tryEntries.forEach(resetTryEntry);\n\n\t\t\t\tif (!skipTempReset) {\n\t\t\t\t\tfor (var name in this) {\n\t\t\t\t\t\t// Not sure about the optimal order of these conditions:\n\t\t\t\t\t\tif (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n\t\t\t\t\t\t\tthis[name] = undefined$1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tthis.done = true;\n\t\t\t\tvar rootEntry = this.tryEntries[0];\n\t\t\t\tvar rootRecord = rootEntry.completion;\n\n\t\t\t\tif (rootRecord.type === \"throw\") {\n\t\t\t\t\tthrow rootRecord.arg;\n\t\t\t\t}\n\n\t\t\t\treturn this.rval;\n\t\t\t},\n\t\t\tdispatchException: function dispatchException(exception) {\n\t\t\t\tif (this.done) {\n\t\t\t\t\tthrow exception;\n\t\t\t\t}\n\n\t\t\t\tvar context = this;\n\n\t\t\t\tfunction handle(loc, caught) {\n\t\t\t\t\trecord.type = \"throw\";\n\t\t\t\t\trecord.arg = exception;\n\t\t\t\t\tcontext.next = loc;\n\n\t\t\t\t\tif (caught) {\n\t\t\t\t\t\t// If the dispatched exception was caught by a catch block,\n\t\t\t\t\t\t// then let that catch block handle the exception normally.\n\t\t\t\t\t\tcontext.method = \"next\";\n\t\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !!caught;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\t\t\t\t\tvar record = entry.completion;\n\n\t\t\t\t\tif (entry.tryLoc === \"root\") {\n\t\t\t\t\t\t// Exception thrown outside of any try block that could handle\n\t\t\t\t\t\t// it, so set the completion value of the entire function to\n\t\t\t\t\t\t// throw the exception.\n\t\t\t\t\t\treturn handle(\"end\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.tryLoc <= this.prev) {\n\t\t\t\t\t\tvar hasCatch = hasOwn.call(entry, \"catchLoc\");\n\t\t\t\t\t\tvar hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n\t\t\t\t\t\tif (hasCatch && hasFinally) {\n\t\t\t\t\t\t\tif (this.prev < entry.catchLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.catchLoc, true);\n\t\t\t\t\t\t\t} else if (this.prev < entry.finallyLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.finallyLoc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hasCatch) {\n\t\t\t\t\t\t\tif (this.prev < entry.catchLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.catchLoc, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hasFinally) {\n\t\t\t\t\t\t\tif (this.prev < entry.finallyLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.finallyLoc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(\"try statement without catch or finally\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tabrupt: function abrupt(type, arg) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n\t\t\t\t\t\tvar finallyEntry = entry;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n\t\t\t\t\t// Ignore the finally entry if control is not jumping to a\n\t\t\t\t\t// location outside the try/catch block.\n\t\t\t\t\tfinallyEntry = null;\n\t\t\t\t}\n\n\t\t\t\tvar record = finallyEntry ? finallyEntry.completion : {};\n\t\t\t\trecord.type = type;\n\t\t\t\trecord.arg = arg;\n\n\t\t\t\tif (finallyEntry) {\n\t\t\t\t\tthis.method = \"next\";\n\t\t\t\t\tthis.next = finallyEntry.finallyLoc;\n\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t}\n\n\t\t\t\treturn this.complete(record);\n\t\t\t},\n\t\t\tcomplete: function complete(record, afterLoc) {\n\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\tthrow record.arg;\n\t\t\t\t}\n\n\t\t\t\tif (record.type === \"break\" || record.type === \"continue\") {\n\t\t\t\t\tthis.next = record.arg;\n\t\t\t\t} else if (record.type === \"return\") {\n\t\t\t\t\tthis.rval = this.arg = record.arg;\n\t\t\t\t\tthis.method = \"return\";\n\t\t\t\t\tthis.next = \"end\";\n\t\t\t\t} else if (record.type === \"normal\" && afterLoc) {\n\t\t\t\t\tthis.next = afterLoc;\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t},\n\t\t\tfinish: function finish(finallyLoc) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.finallyLoc === finallyLoc) {\n\t\t\t\t\t\tthis.complete(entry.completion, entry.afterLoc);\n\t\t\t\t\t\tresetTryEntry(entry);\n\t\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"catch\": function _catch(tryLoc) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.tryLoc === tryLoc) {\n\t\t\t\t\t\tvar record = entry.completion;\n\n\t\t\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\t\t\tvar thrown = record.arg;\n\t\t\t\t\t\t\tresetTryEntry(entry);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn thrown;\n\t\t\t\t\t}\n\t\t\t\t} // The context.catch method must only be called with a location\n\t\t\t\t// argument that corresponds to a known catch block.\n\n\n\t\t\t\tthrow new Error(\"illegal catch attempt\");\n\t\t\t},\n\t\t\tdelegateYield: function delegateYield(iterable, resultName, nextLoc) {\n\t\t\t\tthis.delegate = {\n\t\t\t\t\titerator: values(iterable),\n\t\t\t\t\tresultName: resultName,\n\t\t\t\t\tnextLoc: nextLoc\n\t\t\t\t};\n\n\t\t\t\tif (this.method === \"next\") {\n\t\t\t\t\t// Deliberately forget the last sent value so that we don't\n\t\t\t\t\t// accidentally pass it on to the delegate.\n\t\t\t\t\tthis.arg = undefined$1;\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\t\t}; // Regardless of whether this script is executing as a CommonJS module\n\t\t// or not, return the runtime object so that we can declare the variable\n\t\t// regeneratorRuntime in the outer scope, which allows this module to be\n\t\t// injected easily by `bin/regenerator --include-runtime script.js`.\n\n\t\treturn exports;\n\t}( // If this script is executing as a CommonJS module, use module.exports\n\t// as the regeneratorRuntime namespace. Otherwise create a new empty\n\t// object. Either way, the resulting object will be used to initialize\n\t// the regeneratorRuntime variable at the top of this file.\n\ttypeof module === \"object\" ? module.exports : {});\n\n\ttry {\n\t\tregeneratorRuntime = runtime;\n\t} catch (accidentalStrictMode) {\n\t\t// This module should not be running in strict mode, so the above\n\t\t// assignment should always work unless something is misconfigured. Just\n\t\t// in case runtime.js accidentally runs in strict mode, we can escape\n\t\t// strict mode using a global Function call. This could conceivably fail\n\t\t// if a Content Security Policy forbids using Function, but in that case\n\t\t// the proper solution is to fix the accidental strict mode problem. If\n\t\t// you've misconfigured your bundler to force strict mode and applied a\n\t\t// CSP to forbid Function, and you're not willing to fix either of those\n\t\t// problems, please detail your unique predicament in a GitHub issue.\n\t\tFunction(\"r\", \"regeneratorRuntime = r\")(runtime);\n\t}\n\n\tvar REVISION = '125dev';\n\tvar MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tvar TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar CineonToneMapping = 3;\n\tvar ACESFilmicToneMapping = 4;\n\tvar CustomToneMapping = 5;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar NormalAnimationBlendMode = 2500;\n\tvar AdditiveAnimationBlendMode = 2501;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\tvar GLSL1 = '100';\n\tvar GLSL3 = '300 es';\n\n\tfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n\t\ttry {\n\t\t\tvar info = gen[key](arg);\n\t\t\tvar value = info.value;\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t\treturn;\n\t\t}\n\n\t\tif (info.done) {\n\t\t\tresolve(value);\n\t\t} else {\n\t\t\tPromise.resolve(value).then(_next, _throw);\n\t\t}\n\t}\n\n\tfunction _asyncToGenerator(fn) {\n\t\treturn function () {\n\t\t\tvar self = this,\n\t\t\t\t\targs = arguments;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tvar gen = fn.apply(self, args);\n\n\t\t\t\tfunction _next(value) {\n\t\t\t\t\tasyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n\t\t\t\t}\n\n\t\t\t\tfunction _throw(err) {\n\t\t\t\t\tasyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n\t\t\t\t}\n\n\t\t\t\t_next(undefined);\n\t\t\t});\n\t\t};\n\t}\n\n\tfunction _defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];\n\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\tdescriptor.configurable = true;\n\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}\n\n\tfunction _createClass(Constructor, protoProps, staticProps) {\n\t\tif (protoProps) _defineProperties(Constructor.prototype, protoProps);\n\t\tif (staticProps) _defineProperties(Constructor, staticProps);\n\t\treturn Constructor;\n\t}\n\n\tfunction _inheritsLoose(subClass, superClass) {\n\t\tsubClass.prototype = Object.create(superClass.prototype);\n\t\tsubClass.prototype.constructor = subClass;\n\t\tsubClass.__proto__ = superClass;\n\t}\n\n\tfunction _assertThisInitialized(self) {\n\t\tif (self === void 0) {\n\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t}\n\n\t\treturn self;\n\t}\n\n\tfunction _unsupportedIterableToArray(o, minLen) {\n\t\tif (!o) return;\n\t\tif (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\t\tvar n = Object.prototype.toString.call(o).slice(8, -1);\n\t\tif (n === \"Object\" && o.constructor) n = o.constructor.name;\n\t\tif (n === \"Map\" || n === \"Set\") return Array.from(o);\n\t\tif (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n\t}\n\n\tfunction _arrayLikeToArray(arr, len) {\n\t\tif (len == null || len > arr.length) len = arr.length;\n\n\t\tfor (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n\t\treturn arr2;\n\t}\n\n\tfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n\t\tvar it;\n\n\t\tif (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n\t\t\tif (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n\t\t\t\tif (it) o = it;\n\t\t\t\tvar i = 0;\n\t\t\t\treturn function () {\n\t\t\t\t\tif (i >= o.length) return {\n\t\t\t\t\t\tdone: true\n\t\t\t\t\t};\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: o[i++]\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n\t\t}\n\n\t\tit = o[Symbol.iterator]();\n\t\treturn it.next.bind(it);\n\t}\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tfunction EventDispatcher() {}\n\n\tObject.assign(EventDispatcher.prototype, {\n\t\taddEventListener: function addEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t},\n\t\thasEventListener: function hasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tvar listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t},\n\t\tremoveEventListener: function removeEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tvar index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tvar array = listenerArray.slice(0);\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _lut = [];\n\n\tfor (var i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tvar _seed = 1234567;\n\tvar MathUtils = {\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\t\tgenerateUUID: function generateUUID() {\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\t\treturn uuid.toUpperCase();\n\t\t},\n\t\tclamp: function clamp(value, min, max) {\n\t\t\treturn Math.max(min, Math.min(max, value));\n\t\t},\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\teuclideanModulo: function euclideanModulo(n, m) {\n\t\t\treturn (n % m + m) % m;\n\t\t},\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\tmapLinear: function mapLinear(x, a1, a2, b1, b2) {\n\t\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t\t},\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\t\tlerp: function lerp(x, y, t) {\n\t\t\treturn (1 - t) * x + t * y;\n\t\t},\n\t\t// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\t\tdamp: function damp(x, y, lambda, dt) {\n\t\t\treturn MathUtils.lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t\t},\n\t\t// https://www.desmos.com/calculator/vcsjnyz7x4\n\t\tpingpong: function pingpong(x, length) {\n\t\t\tif (length === void 0) {\n\t\t\t\tlength = 1;\n\t\t\t}\n\n\t\t\treturn length - Math.abs(MathUtils.euclideanModulo(x, length * 2) - length);\n\t\t},\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\t\tsmoothstep: function smoothstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * (3 - 2 * x);\n\t\t},\n\t\tsmootherstep: function smootherstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t\t},\n\t\t// Random integer from <low, high> interval\n\t\trandInt: function randInt(low, high) {\n\t\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t\t},\n\t\t// Random float from <low, high> interval\n\t\trandFloat: function randFloat(low, high) {\n\t\t\treturn low + Math.random() * (high - low);\n\t\t},\n\t\t// Random float from <-range/2, range/2> interval\n\t\trandFloatSpread: function randFloatSpread(range) {\n\t\t\treturn range * (0.5 - Math.random());\n\t\t},\n\t\t// Deterministic pseudo-random float in the interval [ 0, 1 ]\n\t\tseededRandom: function seededRandom(s) {\n\t\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t\t_seed = _seed * 16807 % 2147483647;\n\t\t\treturn (_seed - 1) / 2147483646;\n\t\t},\n\t\tdegToRad: function degToRad(degrees) {\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\t\t},\n\t\tradToDeg: function radToDeg(radians) {\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\t\t},\n\t\tisPowerOfTwo: function isPowerOfTwo(value) {\n\t\t\treturn (value & value - 1) === 0 && value !== 0;\n\t\t},\n\t\tceilPowerOfTwo: function ceilPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t\t},\n\t\tfloorPowerOfTwo: function floorPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t\t},\n\t\tsetQuaternionFromProperEuler: function setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c2 = cos(b / 2);\n\t\t\tvar s2 = sin(b / 2);\n\t\t\tvar c13 = cos((a + c) / 2);\n\t\t\tvar s13 = sin((a + c) / 2);\n\t\t\tvar c1_3 = cos((a - c) / 2);\n\t\t\tvar s1_3 = sin((a - c) / 2);\n\t\t\tvar c3_1 = cos((c - a) / 2);\n\t\t\tvar s3_1 = sin((c - a) / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYX':\n\t\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZY':\n\t\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXZ':\n\t\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZX':\n\t\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXY':\n\t\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYZ':\n\t\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar Vector2 = /*#__PURE__*/function () {\n\t\tfunction Vector2(x, y) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tvar _proto = Vector2.prototype;\n\n\t\t_proto.set = function set(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t};\n\n\t\t_proto.cross = function cross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.angle = function angle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tvar angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotateAround = function rotateAround(center, angle) {\n\t\t\tvar c = Math.cos(angle),\n\t\t\t\t\ts = Math.sin(angle);\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector2, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.x = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.y = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector2;\n\t}();\n\n\tvar Matrix3 = /*#__PURE__*/function () {\n\t\tfunction Matrix3() {\n\t\t\tObject.defineProperty(this, 'isMatrix3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix3.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrix4 = function setFromMatrix4(m) {\n\t\t\tvar me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\ta13 = ae[6];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\ta23 = ae[7];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\ta33 = ae[8];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[3],\n\t\t\t\t\tb13 = be[6];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[4],\n\t\t\t\t\tb23 = be[7];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[5],\n\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar a = te[0],\n\t\t\t\t\tb = te[1],\n\t\t\t\t\tc = te[2],\n\t\t\t\t\td = te[3],\n\t\t\t\t\te = te[4],\n\t\t\t\t\tf = te[5],\n\t\t\t\t\tg = te[6],\n\t\t\t\t\th = te[7],\n\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tn11 = te[0],\n\t\t\t\t\tn21 = te[1],\n\t\t\t\t\tn31 = te[2],\n\t\t\t\t\tn12 = te[3],\n\t\t\t\t\tn22 = te[4],\n\t\t\t\t\tn32 = te[5],\n\t\t\t\t\tn13 = te[6],\n\t\t\t\t\tn23 = te[7],\n\t\t\t\t\tn33 = te[8],\n\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar tmp;\n\t\t\tvar m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getNormalMatrix = function getNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).copy(this).invert().transpose();\n\t\t};\n\n\t\t_proto.transposeIntoArray = function transposeIntoArray(r) {\n\t\t\tvar m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setUvTransform = function setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tvar c = Math.cos(rotation);\n\t\t\tvar s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(sx, sy) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotate = function rotate(theta) {\n\t\t\tvar c = Math.cos(theta);\n\t\t\tvar s = Math.sin(theta);\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = te[0],\n\t\t\t\t\ta12 = te[3],\n\t\t\t\t\ta13 = te[6];\n\t\t\tvar a21 = te[1],\n\t\t\t\t\ta22 = te[4],\n\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(tx, ty) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t};\n\n\t\treturn Matrix3;\n\t}();\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\t\tgetDataURL: function getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tvar canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\t};\n\n\tvar textureId = 0;\n\n\tfunction Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\tif (image === void 0) {\n\t\t\timage = Texture.DEFAULT_IMAGE;\n\t\t}\n\n\t\tif (mapping === void 0) {\n\t\t\tmapping = Texture.DEFAULT_MAPPING;\n\t\t}\n\n\t\tif (wrapS === void 0) {\n\t\t\twrapS = ClampToEdgeWrapping;\n\t\t}\n\n\t\tif (wrapT === void 0) {\n\t\t\twrapT = ClampToEdgeWrapping;\n\t\t}\n\n\t\tif (magFilter === void 0) {\n\t\t\tmagFilter = LinearFilter;\n\t\t}\n\n\t\tif (minFilter === void 0) {\n\t\t\tminFilter = LinearMipmapLinearFilter;\n\t\t}\n\n\t\tif (format === void 0) {\n\t\t\tformat = RGBAFormat;\n\t\t}\n\n\t\tif (type === void 0) {\n\t\t\ttype = UnsignedByteType;\n\t\t}\n\n\t\tif (anisotropy === void 0) {\n\t\t\tanisotropy = 1;\n\t\t}\n\n\t\tif (encoding === void 0) {\n\t\t\tencoding = LinearEncoding;\n\t\t}\n\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: textureId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.image = image;\n\t\tthis.mipmaps = [];\n\t\tthis.mapping = mapping;\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\t\tthis.anisotropy = anisotropy;\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\t\tthis.offset = new Vector2(0, 0);\n\t\tthis.repeat = new Vector2(1, 1);\n\t\tthis.center = new Vector2(0, 0);\n\t\tthis.rotation = 0;\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\tthis.encoding = encoding;\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Texture,\n\t\tisTexture: true,\n\t\tupdateMatrix: function updateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (var i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t},\n\t\ttransformUv: function transformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\t});\n\tObject.defineProperty(Texture.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tvar Vector4 = /*#__PURE__*/function () {\n\t\tfunction Vector4(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector4', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tvar _proto = Vector4.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setW = function setW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z,\n\t\t\t\t\tw = this.w;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.setAxisAngleFromQuaternion = function setAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tvar s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setAxisAngleFromRotationMatrix = function setAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar angle, x, y, z; // variables for result\n\n\t\t\tvar epsilon = 0.01,\n\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tvar xx = (m11 + 1) / 2;\n\t\t\t\tvar yy = (m22 + 1) / 2;\n\t\t\t\tvar zz = (m33 + 1) / 2;\n\t\t\t\tvar xy = (m12 + m21) / 4;\n\t\t\t\tvar xz = (m13 + m31) / 4;\n\t\t\t\tvar yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tvar s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector4, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.z = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.w = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector4;\n\t}();\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tvar WebGLRenderTarget = /*#__PURE__*/function (_EventDispatcher) {\n\t\t_inheritsLoose(WebGLRenderTarget, _EventDispatcher);\n\n\t\tfunction WebGLRenderTarget(width, height, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _EventDispatcher.call(this) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'isWebGLRenderTarget', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\t_this.width = width;\n\t\t\t_this.height = height;\n\t\t\t_this.scissor = new Vector4(0, 0, width, height);\n\t\t\t_this.scissorTest = false;\n\t\t\t_this.viewport = new Vector4(0, 0, width, height);\n\t\t\toptions = options || {};\n\t\t\t_this.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\t_this.texture.image = {};\n\t\t\t_this.texture.image.width = width;\n\t\t\t_this.texture.image.height = height;\n\t\t\t_this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\t_this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\t_this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\t_this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\t_this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLRenderTarget.prototype;\n\n\t\t_proto.setSize = function setSize(width, height) {\n\t\t\tif (this.width !== width || this.height !== height) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t};\n\n\t\treturn WebGLRenderTarget;\n\t}(EventDispatcher);\n\n\tvar WebGLMultisampleRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget) {\n\t\t_inheritsLoose(WebGLMultisampleRenderTarget, _WebGLRenderTarget);\n\n\t\tfunction WebGLMultisampleRenderTarget(width, height, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _WebGLRenderTarget.call(this, width, height, options) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'isWebGLMultisampleRenderTarget', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\t_this.samples = 4;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLMultisampleRenderTarget.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_WebGLRenderTarget.prototype.copy.call(this, source);\n\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn WebGLMultisampleRenderTarget;\n\t}(WebGLRenderTarget);\n\n\tvar Quaternion = /*#__PURE__*/function () {\n\t\tfunction Quaternion(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isQuaternion', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tQuaternion.slerp = function slerp(qa, qb, qm, t) {\n\t\t\treturn qm.copy(qa).slerp(qb, t);\n\t\t};\n\n\t\tQuaternion.slerpFlat = function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tvar x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1 + 0],\n\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tvar cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tvar sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tvar f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t};\n\n\t\tQuaternion.multiplyQuaternionsFlat = function multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tvar x0 = src0[srcOffset0];\n\t\t\tvar y0 = src0[srcOffset0 + 1];\n\t\t\tvar z0 = src0[srcOffset0 + 2];\n\t\t\tvar w0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1];\n\t\t\tvar y1 = src1[srcOffset1 + 1];\n\t\t\tvar z1 = src1[srcOffset1 + 2];\n\t\t\tvar w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t};\n\n\t\tvar _proto = Quaternion.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t};\n\n\t\t_proto.copy = function copy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromEuler = function setFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar x = euler._x,\n\t\t\t\t\ty = euler._y,\n\t\t\t\t\tz = euler._z,\n\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c1 = cos(x / 2);\n\t\t\tvar c2 = cos(y / 2);\n\t\t\tvar c3 = cos(z / 2);\n\t\t\tvar s1 = sin(x / 2);\n\t\t\tvar s2 = sin(y / 2);\n\t\t\tvar s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromAxisAngle = function setFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tvar halfAngle = angle / 2,\n\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar te = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10],\n\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tvar s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tvar _s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n\t\t\t\tthis._w = (m32 - m23) / _s;\n\t\t\t\tthis._x = 0.25 * _s;\n\t\t\t\tthis._y = (m12 + m21) / _s;\n\t\t\t\tthis._z = (m13 + m31) / _s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tvar _s2 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n\t\t\t\tthis._w = (m13 - m31) / _s2;\n\t\t\t\tthis._x = (m12 + m21) / _s2;\n\t\t\t\tthis._y = 0.25 * _s2;\n\t\t\t\tthis._z = (m23 + m32) / _s2;\n\t\t\t} else {\n\t\t\t\tvar _s3 = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n\t\t\t\tthis._w = (m21 - m12) / _s3;\n\t\t\t\tthis._x = (m13 + m31) / _s3;\n\t\t\t\tthis._y = (m23 + m32) / _s3;\n\t\t\t\tthis._z = 0.25 * _s3;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromUnitVectors = function setFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tvar EPS = 0.000001;\n\t\t\tvar r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < EPS) {\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n\t\t};\n\n\t\t_proto.rotateTowards = function rotateTowards(q, step) {\n\t\t\tvar angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tvar t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t};\n\n\t\t_proto.conjugate = function conjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\tvar l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t};\n\n\t\t_proto.multiplyQuaternions = function multiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tvar qax = a._x,\n\t\t\t\t\tqay = a._y,\n\t\t\t\t\tqaz = a._z,\n\t\t\t\t\tqaw = a._w;\n\t\t\tvar qbx = b._x,\n\t\t\t\t\tqby = b._y,\n\t\t\t\t\tqbz = b._z,\n\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.slerp = function slerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tvar x = this._x,\n\t\t\t\t\ty = this._y,\n\t\t\t\t\tz = this._z,\n\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tvar halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tvar ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Quaternion, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"w\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._w = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Quaternion;\n\t}();\n\n\tvar Vector3 = /*#__PURE__*/function () {\n\t\tfunction Vector3(x, y, z) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tvar _proto = Vector3.prototype;\n\n\t\t_proto.set = function set(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyVectors = function multiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyEuler = function applyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion.setFromEuler(euler));\n\t\t};\n\n\t\t_proto.applyAxisAngle = function applyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyNormalMatrix = function applyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tvar w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyQuaternion = function applyQuaternion(q) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar qx = q.x,\n\t\t\t\t\tqy = q.y,\n\t\t\t\t\tqz = q.z,\n\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.project = function project(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t};\n\n\t\t_proto.unproject = function unproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t};\n\n\t\t_proto.transformDirection = function transformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\t\t;\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.cross = function cross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t};\n\n\t\t_proto.crossVectors = function crossVectors(a, b) {\n\t\t\tvar ax = a.x,\n\t\t\t\t\tay = a.y,\n\t\t\t\t\taz = a.z;\n\t\t\tvar bx = b.x,\n\t\t\t\t\tby = b.y,\n\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.projectOnVector = function projectOnVector(v) {\n\t\t\tvar denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tvar scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t};\n\n\t\t_proto.projectOnPlane = function projectOnPlane(planeNormal) {\n\t\t\t_vector.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector);\n\t\t};\n\n\t\t_proto.reflect = function reflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(v) {\n\t\t\tvar denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tvar theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(MathUtils.clamp(theta, -1, 1));\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t};\n\n\t\t_proto.setFromSpherical = function setFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t};\n\n\t\t_proto.setFromSphericalCoords = function setFromSphericalCoords(radius, phi, theta) {\n\t\t\tvar sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCylindrical = function setFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t};\n\n\t\t_proto.setFromCylindricalCoords = function setFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixPosition = function setFromMatrixPosition(m) {\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixScale = function setFromMatrixScale(m) {\n\t\t\tvar sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tvar sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tvar sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixColumn = function setFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t};\n\n\t\t_proto.setFromMatrix3Column = function setFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Vector3;\n\t}();\n\n\tvar _vector = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion = /*@__PURE__*/new Quaternion();\n\n\tvar Box3 = /*#__PURE__*/function () {\n\t\tfunction Box3(min, max) {\n\t\t\tObject.defineProperty(this, 'isBox3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.min = min !== undefined ? min : new Vector3(+Infinity, +Infinity, +Infinity);\n\t\t\tthis.max = max !== undefined ? max : new Vector3(-Infinity, -Infinity, -Infinity);\n\t\t}\n\n\t\tvar _proto = Box3.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromArray = function setFromArray(array) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tvar x = array[i];\n\t\t\t\tvar y = array[i + 1];\n\t\t\t\tvar z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromBufferAttribute = function setFromBufferAttribute(attribute) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tvar x = attribute.getX(i);\n\t\t\t\tvar y = attribute.getY(i);\n\t\t\t\tvar z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$1.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByObject = function expandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box.copy(geometry.boundingBox);\n\n\t\t\t\t_box.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box);\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$1); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tvar min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t};\n\n\t\t_proto.intersectsTriangle = function intersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0.subVectors(triangle.a, _center);\n\n\t\t\t_v1.subVectors(triangle.b, _center);\n\n\t\t\t_v2.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1, _v0);\n\n\t\t\t_f1.subVectors(_v2, _v1);\n\n\t\t\t_f2.subVectors(_v0, _v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tvar axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0, _v1, _v2, _extents);\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$1.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.getBoundingSphere = function getBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$1).length() * 0.5;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box3;\n\t}();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (var i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tvar r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tvar p0 = v0.dot(_testAxis);\n\t\t\tvar p1 = v1.dot(_testAxis);\n\t\t\tvar p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tvar _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tvar _vector$1 = /*@__PURE__*/new Vector3();\n\n\tvar _box = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tvar _v0 = /*@__PURE__*/new Vector3();\n\n\tvar _v1 = /*@__PURE__*/new Vector3();\n\n\tvar _v2 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tvar _f0 = /*@__PURE__*/new Vector3();\n\n\tvar _f1 = /*@__PURE__*/new Vector3();\n\n\tvar _f2 = /*@__PURE__*/new Vector3();\n\n\tvar _center = /*@__PURE__*/new Vector3();\n\n\tvar _extents = /*@__PURE__*/new Vector3();\n\n\tvar _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tvar _testAxis = /*@__PURE__*/new Vector3();\n\n\tvar _box$1 = /*@__PURE__*/new Box3();\n\n\tvar Sphere = /*#__PURE__*/function () {\n\t\tfunction Sphere(center, radius) {\n\t\t\tthis.center = center !== undefined ? center : new Vector3();\n\t\t\tthis.radius = radius !== undefined ? radius : -1;\n\t\t}\n\n\t\tvar _proto = Sphere.prototype;\n\n\t\t_proto.set = function set(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points, optionalCenter) {\n\t\t\tvar center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$1.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getBoundingBox = function getBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t};\n\n\t\treturn Sphere;\n\t}();\n\n\tvar _vector$2 = /*@__PURE__*/new Vector3();\n\n\tvar _segCenter = /*@__PURE__*/new Vector3();\n\n\tvar _segDir = /*@__PURE__*/new Vector3();\n\n\tvar _diff = /*@__PURE__*/new Vector3();\n\n\tvar _edge1 = /*@__PURE__*/new Vector3();\n\n\tvar _edge2 = /*@__PURE__*/new Vector3();\n\n\tvar _normal = /*@__PURE__*/new Vector3();\n\n\tvar Ray = /*#__PURE__*/function () {\n\t\tfunction Ray(origin, direction) {\n\t\t\tthis.origin = origin !== undefined ? origin : new Vector3();\n\t\t\tthis.direction = direction !== undefined ? direction : new Vector3(0, 0, -1);\n\t\t}\n\n\t\tvar _proto = Ray.prototype;\n\n\t\t_proto.set = function set(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.recast = function recast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$2));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tvar directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t};\n\n\t\t_proto.distanceSqToPoint = function distanceSqToPoint(point) {\n\t\t\tvar directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$2.distanceToSquared(point);\n\t\t};\n\n\t\t_proto.distanceSqToSegment = function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tvar segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tvar a01 = -this.direction.dot(_segDir);\n\n\t\t\tvar b0 = _diff.dot(this.direction);\n\n\t\t\tvar b1 = -_diff.dot(_segDir);\n\n\t\t\tvar c = _diff.lengthSq();\n\n\t\t\tvar det = Math.abs(1 - a01 * a01);\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t};\n\n\t\t_proto.intersectSphere = function intersectSphere(sphere, target) {\n\t\t\t_vector$2.subVectors(sphere.center, this.origin);\n\n\t\t\tvar tca = _vector$2.dot(this.direction);\n\n\t\t\tvar d2 = _vector$2.dot(_vector$2) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tvar thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tvar t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tvar t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.distanceToPlane = function distanceToPlane(plane) {\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t};\n\n\t\t_proto.intersectPlane = function intersectPlane(plane, target) {\n\t\t\tvar t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tvar distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t};\n\n\t\t_proto.intersectBox = function intersectBox(box, target) {\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tvar origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$2) !== null;\n\t\t};\n\n\t\t_proto.intersectTriangle = function intersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tvar DdN = this.direction.dot(_normal);\n\t\t\tvar sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tvar DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tvar QdN = -sign * _diff.dot(_normal); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t};\n\n\t\treturn Ray;\n\t}();\n\n\tvar Matrix4 = /*#__PURE__*/function () {\n\t\tfunction Matrix4() {\n\t\t\tObject.defineProperty(this, 'isMatrix4', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix4.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyPosition = function copyPosition(m) {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrix3 = function setFromMatrix3(m) {\n\t\t\tvar me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeBasis = function makeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractRotation = function extractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1$1.setFromMatrixColumn(m, 0).length();\n\n\t\t\tvar scaleY = 1 / _v1$1.setFromMatrixColumn(m, 1).length();\n\n\t\t\tvar scaleZ = 1 / _v1$1.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromEuler = function makeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = euler.x,\n\t\t\t\t\ty = euler.y,\n\t\t\t\t\tz = euler.z;\n\t\t\tvar a = Math.cos(x),\n\t\t\t\t\tb = Math.sin(x);\n\t\t\tvar c = Math.cos(y),\n\t\t\t\t\td = Math.sin(y);\n\t\t\tvar e = Math.cos(z),\n\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tvar ae = a * e,\n\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tvar ce = c * e,\n\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tvar _ce = c * e,\n\t\t\t\t\t\t_cf = c * f,\n\t\t\t\t\t\t_de = d * e,\n\t\t\t\t\t\t_df = d * f;\n\n\t\t\t\tte[0] = _ce - _df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = _de + _cf * b;\n\t\t\t\tte[1] = _cf + _de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _df - _ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tvar _ae = a * e,\n\t\t\t\t\t\t_af = a * f,\n\t\t\t\t\t\t_be = b * e,\n\t\t\t\t\t\t_bf = b * f;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = _be * d - _af;\n\t\t\t\tte[8] = _ae * d + _bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = _bf * d + _ae;\n\t\t\t\tte[9] = _af * d - _be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tvar ac = a * c,\n\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tvar _ac = a * c,\n\t\t\t\t\t\t_ad = a * d,\n\t\t\t\t\t\t_bc = b * c,\n\t\t\t\t\t\t_bd = b * d;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = _ac * f + _bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _ad * f - _bc;\n\t\t\t\tte[2] = _bc * f - _ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = _bd * f + _ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromQuaternion = function makeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(eye, target, up) {\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\ta14 = ae[12];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\ta24 = ae[13];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\ta34 = ae[14];\n\t\t\tvar a41 = ae[3],\n\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\ta44 = ae[15];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[4],\n\t\t\t\t\tb13 = be[8],\n\t\t\t\t\tb14 = be[12];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[5],\n\t\t\t\t\tb23 = be[9],\n\t\t\t\t\tb24 = be[13];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[6],\n\t\t\t\t\tb33 = be[10],\n\t\t\t\t\tb34 = be[14];\n\t\t\tvar b41 = be[3],\n\t\t\t\t\tb42 = be[7],\n\t\t\t\t\tb43 = be[11],\n\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar n11 = te[0],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn14 = te[12];\n\t\t\tvar n21 = te[1],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn24 = te[13];\n\t\t\tvar n31 = te[2],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn34 = te[14];\n\t\t\tvar n41 = te[3],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setPosition = function setPosition(x, y, z) {\n\t\t\tvar te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\t\tn11 = te[0],\n\t\t\t\t\tn21 = te[1],\n\t\t\t\t\tn31 = te[2],\n\t\t\t\t\tn41 = te[3],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn14 = te[12],\n\t\t\t\t\tn24 = te[13],\n\t\t\t\t\tn34 = te[14],\n\t\t\t\t\tn44 = te[15],\n\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(v) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x,\n\t\t\t\t\ty = v.y,\n\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxScaleOnAxis = function getMaxScaleOnAxis() {\n\t\t\tvar te = this.elements;\n\t\t\tvar scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tvar scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tvar scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t};\n\n\t\t_proto.makeTranslation = function makeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationX = function makeRotationX(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationY = function makeRotationY(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationZ = function makeRotationZ(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationAxis = function makeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tvar c = Math.cos(angle);\n\t\t\tvar s = Math.sin(angle);\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x,\n\t\t\t\t\ty = axis.y,\n\t\t\t\t\tz = axis.z;\n\t\t\tvar tx = t * x,\n\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeScale = function makeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeShear = function makeShear(x, y, z) {\n\t\t\tthis.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.compose = function compose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = quaternion._x,\n\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\tw = quaternion._w;\n\t\t\tvar x2 = x + x,\n\t\t\t\t\ty2 = y + y,\n\t\t\t\t\tz2 = z + z;\n\t\t\tvar xx = x * x2,\n\t\t\t\t\txy = x * y2,\n\t\t\t\t\txz = x * z2;\n\t\t\tvar yy = y * y2,\n\t\t\t\t\tyz = y * z2,\n\t\t\t\t\tzz = z * z2;\n\t\t\tvar wx = w * x2,\n\t\t\t\t\twy = w * y2,\n\t\t\t\t\twz = w * z2;\n\t\t\tvar sx = scale.x,\n\t\t\t\t\tsy = scale.y,\n\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.decompose = function decompose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1$1.set(te[0], te[1], te[2]).length();\n\n\t\t\tvar sy = _v1$1.set(te[4], te[5], te[6]).length();\n\n\t\t\tvar sz = _v1$1.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tvar det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1.copy(this);\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\t\t\t_m1.elements[0] *= invSX;\n\t\t\t_m1.elements[1] *= invSX;\n\t\t\t_m1.elements[2] *= invSX;\n\t\t\t_m1.elements[4] *= invSY;\n\t\t\t_m1.elements[5] *= invSY;\n\t\t\t_m1.elements[6] *= invSY;\n\t\t\t_m1.elements[8] *= invSZ;\n\t\t\t_m1.elements[9] *= invSZ;\n\t\t\t_m1.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makePerspective = function makePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / (right - left);\n\t\t\tvar y = 2 * near / (top - bottom);\n\t\t\tvar a = (right + left) / (right - left);\n\t\t\tvar b = (top + bottom) / (top - bottom);\n\t\t\tvar c = -(far + near) / (far - near);\n\t\t\tvar d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeOrthographic = function makeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / (right - left);\n\t\t\tvar h = 1.0 / (top - bottom);\n\t\t\tvar p = 1.0 / (far - near);\n\t\t\tvar x = (right + left) * w;\n\t\t\tvar y = (top + bottom) * h;\n\t\t\tvar z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t};\n\n\t\treturn Matrix4;\n\t}();\n\n\tvar _v1$1 = /*@__PURE__*/new Vector3();\n\n\tvar _m1 = /*@__PURE__*/new Matrix4();\n\n\tvar _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tvar _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tvar _x = /*@__PURE__*/new Vector3();\n\n\tvar _y = /*@__PURE__*/new Vector3();\n\n\tvar _z = /*@__PURE__*/new Vector3();\n\n\tvar Euler = /*#__PURE__*/function () {\n\t\tfunction Euler(x, y, z, order) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (order === void 0) {\n\t\t\t\torder = Euler.DefaultOrder;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isEuler', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tvar _proto = Euler.prototype;\n\n\t\t_proto.set = function set(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t};\n\n\t\t_proto.copy = function copy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m, order, update) {\n\t\t\tvar clamp = MathUtils.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8];\n\t\t\tvar m21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9];\n\t\t\tvar m31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromQuaternion = function setFromQuaternion(q, order, update) {\n\t\t\t_matrix.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix, order, update);\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t};\n\n\t\t_proto.reorder = function reorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$1.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$1, newOrder);\n\t\t};\n\n\t\t_proto.equals = function equals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.toVector3 = function toVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Euler, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"order\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._order = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Euler;\n\t}();\n\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tvar _matrix = /*@__PURE__*/new Matrix4();\n\n\tvar _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tvar Layers = /*#__PURE__*/function () {\n\t\tfunction Layers() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tvar _proto = Layers.prototype;\n\n\t\t_proto.set = function set(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enable = function enable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enableAll = function enableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t};\n\n\t\t_proto.toggle = function toggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.disable = function disable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t};\n\n\t\t_proto.disableAll = function disableAll() {\n\t\t\tthis.mask = 0;\n\t\t};\n\n\t\t_proto.test = function test(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t};\n\n\t\treturn Layers;\n\t}();\n\n\tvar _object3DId = 0;\n\n\tvar _v1$2 = new Vector3();\n\n\tvar _q1 = new Quaternion();\n\n\tvar _m1$1 = new Matrix4();\n\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\n\tvar _scale = new Vector3();\n\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3(1, 0, 0);\n\n\tvar _yAxis = new Vector3(0, 1, 0);\n\n\tvar _zAxis = new Vector3(0, 0, 1);\n\n\tvar _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tvar _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tfunction Object3D() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _object3DId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\tthis.up = Object3D.DefaultUp.clone();\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3(1, 1, 1);\n\n\t\tfunction onRotationChange() {\n\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t}\n\n\t\trotation._onChange(onRotationChange);\n\n\t\tquaternion._onChange(onQuaternionChange);\n\n\t\tObject.defineProperties(this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t});\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\t\tthis.animations = [];\n\t\tthis.userData = {};\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Object3D,\n\t\tisObject3D: true,\n\t\tonBeforeRender: function onBeforeRender() {},\n\t\tonAfterRender: function onAfterRender() {},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t},\n\t\tapplyQuaternion: function applyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t},\n\t\tsetRotationFromAxisAngle: function setRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t},\n\t\tsetRotationFromEuler: function setRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t},\n\t\tsetRotationFromMatrix: function setRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t},\n\t\tsetRotationFromQuaternion: function setRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t},\n\t\trotateOnAxis: function rotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateOnWorldAxis: function rotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t},\n\t\ttranslateOnAxis: function translateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$2.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$2.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t},\n\t\ttranslateX: function translateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t},\n\t\ttranslateY: function translateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t},\n\t\ttranslateZ: function translateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t},\n\t\tlocalToWorld: function localToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t},\n\t\tworldToLocal: function worldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t},\n\t\tlookAt: function lookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t},\n\t\tadd: function add(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tremove: function remove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclear: function clear() {\n\t\t\tfor (var i = 0; i < this.children.length; i++) {\n\t\t\t\tvar object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t},\n\t\tattach: function attach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t},\n\t\tgetObjectById: function getObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t},\n\t\tgetObjectByName: function getObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t},\n\t\tgetObjectByProperty: function getObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (var i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tvar child = this.children[i];\n\t\t\t\tvar object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tgetWorldPosition: function getWorldPosition(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t},\n\t\tgetWorldQuaternion: function getWorldQuaternion(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, target, _scale);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldScale: function getWorldScale(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion$2, target);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t},\n\t\traycast: function raycast() {},\n\t\ttraverse: function traverse(callback) {\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseVisible: function traverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseAncestors: function traverseAncestors(callback) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t},\n\t\tupdateMatrix: function updateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tvar output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tvar object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tvar shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor (var _i = 0, _l = this.material.length; _i < _l; _i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[_i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (var _i2 = 0; _i2 < this.children.length; _i2++) {\n\t\t\t\t\tobject.children.push(this.children[_i2].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (var _i3 = 0; _i3 < this.animations.length; _i3++) {\n\t\t\t\t\tvar animation = this.animations[_i3];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tvar geometries = extractFromCache(meta.geometries);\n\t\t\t\tvar materials = extractFromCache(meta.materials);\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\n\t\t\t\tvar _shapes = extractFromCache(meta.shapes);\n\n\t\t\t\tvar skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tvar animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (_shapes.length > 0) output.shapes = _shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t},\n\t\tclone: function clone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t},\n\t\tcopy: function copy(source, recursive) {\n\t\t\tif (recursive === void 0) {\n\t\t\t\trecursive = true;\n\t\t\t}\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (var i = 0; i < source.children.length; i++) {\n\t\t\t\t\tvar child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar _vector1 = /*@__PURE__*/new Vector3();\n\n\tvar _vector2 = /*@__PURE__*/new Vector3();\n\n\tvar _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tvar Plane = /*#__PURE__*/function () {\n\t\tfunction Plane(normal, constant) {\n\t\t\tObject.defineProperty(this, 'isPlane', {\n\t\t\t\tvalue: true\n\t\t\t}); // normal is assumed to be normalized\n\n\t\t\tthis.normal = normal !== undefined ? normal : new Vector3(1, 0, 0);\n\t\t\tthis.constant = constant !== undefined ? constant : 0;\n\t\t}\n\n\t\tvar _proto = Plane.prototype;\n\n\t\t_proto.set = function set(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponents = function setComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromNormalAndCoplanarPoint = function setFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCoplanarPoints = function setFromCoplanarPoints(a, b, c) {\n\t\t\tvar normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t};\n\n\t\t_proto.distanceToSphere = function distanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t};\n\n\t\t_proto.projectPoint = function projectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t};\n\n\t\t_proto.intersectLine = function intersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar direction = line.delta(_vector1);\n\t\t\tvar denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tvar t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t};\n\n\t\t_proto.intersectsLine = function intersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tvar startSign = this.distanceToPoint(line.start);\n\t\t\tvar endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.coplanarPoint = function coplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tvar referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tvar normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t};\n\n\t\treturn Plane;\n\t}();\n\n\tvar _v0$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v1$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v3 = /*@__PURE__*/new Vector3();\n\n\tvar _vab = /*@__PURE__*/new Vector3();\n\n\tvar _vac = /*@__PURE__*/new Vector3();\n\n\tvar _vbc = /*@__PURE__*/new Vector3();\n\n\tvar _vap = /*@__PURE__*/new Vector3();\n\n\tvar _vbp = /*@__PURE__*/new Vector3();\n\n\tvar _vcp = /*@__PURE__*/new Vector3();\n\n\tvar Triangle = /*#__PURE__*/function () {\n\t\tfunction Triangle(a, b, c) {\n\t\t\tthis.a = a !== undefined ? a : new Vector3();\n\t\t\tthis.b = b !== undefined ? b : new Vector3();\n\t\t\tthis.c = c !== undefined ? c : new Vector3();\n\t\t}\n\n\t\tTriangle.getNormal = function getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tvar targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\t;\n\n\t\tTriangle.getBarycoord = function getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$1.subVectors(point, a);\n\n\t\t\tvar dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tvar dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tvar dot02 = _v0$1.dot(_v2$1);\n\n\t\t\tvar dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tvar dot12 = _v1$3.dot(_v2$1);\n\n\t\t\tvar denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tvar v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t};\n\n\t\tTriangle.containsPoint = function containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3);\n\t\t\treturn _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;\n\t\t};\n\n\t\tTriangle.getUV = function getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3.x);\n\t\t\ttarget.addScaledVector(uv2, _v3.y);\n\t\t\ttarget.addScaledVector(uv3, _v3.z);\n\t\t\treturn target;\n\t\t};\n\n\t\tTriangle.isFrontFacing = function isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t};\n\n\t\tvar _proto = Triangle.prototype;\n\n\t\t_proto.set = function set(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPointsAndIndices = function setFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getArea = function getArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t};\n\n\t\t_proto.getMidpoint = function getMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t};\n\n\t\t_proto.getNormal = function getNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getPlane = function getPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.getBarycoord = function getBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getUV = function getUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.isFrontFacing = function isFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar a = this.a,\n\t\t\t\t\tb = this.b,\n\t\t\t\t\tc = this.c;\n\t\t\tvar v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tvar d1 = _vab.dot(_vap);\n\n\t\t\tvar d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tvar d3 = _vab.dot(_vbp);\n\n\t\t\tvar d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tvar d5 = _vab.dot(_vcp);\n\n\t\t\tvar d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tvar denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t};\n\n\t\t_proto.equals = function equals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t};\n\n\t\treturn Triangle;\n\t}();\n\n\tvar _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tvar _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tvar _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tvar Color = /*#__PURE__*/function () {\n\t\tfunction Color(r, g, b) {\n\t\t\tObject.defineProperty(this, 'isColor', {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tvar _proto = Color.prototype;\n\n\t\t_proto.set = function set(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHex = function setHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setRGB = function setRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHSL = function setHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo(h, 1);\n\t\t\ts = MathUtils.clamp(s, 0, 1);\n\t\t\tl = MathUtils.clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tvar p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tvar q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setStyle = function setStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[1];\n\t\t\t\tvar components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tvar s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tvar l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tvar hex = m[1];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setColorName = function setColorName(style) {\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[style];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t};\n\n\t\t_proto.copy = function copy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyGammaToLinear = function copyGammaToLinear(color, gammaFactor) {\n\t\t\tif (gammaFactor === void 0) {\n\t\t\t\tgammaFactor = 2.0;\n\t\t\t}\n\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToGamma = function copyLinearToGamma(color, gammaFactor) {\n\t\t\tif (gammaFactor === void 0) {\n\t\t\t\tgammaFactor = 2.0;\n\t\t\t}\n\n\t\t\tvar safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertGammaToLinear = function convertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToGamma = function convertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copySRGBToLinear = function copySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToSRGB = function copyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertSRGBToLinear = function convertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToSRGB = function convertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getHex = function getHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t};\n\n\t\t_proto.getHexString = function getHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t};\n\n\t\t_proto.getHSL = function getHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar r = this.r,\n\t\t\t\t\tg = this.g,\n\t\t\t\t\tb = this.b;\n\t\t\tvar max = Math.max(r, g, b);\n\t\t\tvar min = Math.min(r, g, b);\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tvar delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getStyle = function getStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t};\n\n\t\t_proto.offsetHSL = function offsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addColors = function addColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpColors = function lerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpHSL = function lerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tvar h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tvar s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tvar l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\treturn this.getHex();\n\t\t};\n\n\t\treturn Color;\n\t}();\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\tvar Face3 = /*#__PURE__*/function () {\n\t\tfunction Face3(a, b, c, normal, color, materialIndex) {\n\t\t\tif (materialIndex === void 0) {\n\t\t\t\tmaterialIndex = 0;\n\t\t\t}\n\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t\tthis.normal = normal && normal.isVector3 ? normal : new Vector3();\n\t\t\tthis.vertexNormals = Array.isArray(normal) ? normal : [];\n\t\t\tthis.color = color && color.isColor ? color : new Color();\n\t\t\tthis.vertexColors = Array.isArray(color) ? color : [];\n\t\t\tthis.materialIndex = materialIndex;\n\t\t}\n\n\t\tvar _proto = Face3.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\t\t\tthis.normal.copy(source.normal);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor (var i = 0, il = source.vertexNormals.length; i < il; i++) {\n\t\t\t\tthis.vertexNormals[i] = source.vertexNormals[i].clone();\n\t\t\t}\n\n\t\t\tfor (var _i = 0, _il = source.vertexColors.length; _i < _il; _i++) {\n\t\t\t\tthis.vertexColors[_i] = source.vertexColors[_i].clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Face3;\n\t}();\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: materialId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\t\tthis.fog = true;\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = false;\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\t\tthis.shadowSide = null;\n\t\tthis.colorWrite = true;\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\t\tthis.dithering = false;\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\t\tthis.visible = true;\n\t\tthis.toneMapped = true;\n\t\tthis.userData = {};\n\t\tthis.version = 0;\n\t}\n\n\tMaterial.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Material,\n\t\tisMaterial: true,\n\t\tonBeforeCompile: function onBeforeCompile()\n\t\t/* shaderobject, renderer */\n\t\t{},\n\t\tcustomProgramCacheKey: function customProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t},\n\t\tsetValues: function setValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (var key in values) {\n\t\t\t\tvar newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\t\t\tif (this.lightMap && this.lightMap.isTexture) data.lightMap = this.lightMap.toJSON(meta).uuid;\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.skinning === true) data.skinning = true;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar _data = cache[key];\n\t\t\t\t\tdelete _data.metadata;\n\t\t\t\t\tvalues.push(_data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tvar srcPlanes = source.clippingPlanes;\n\t\t\tvar dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\tObject.defineProperty(Material.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshBasicMaterial';\n\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create(Material.prototype);\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _vector$3 = new Vector3();\n\n\tvar _vector2$1 = new Vector2();\n\n\tfunction BufferAttribute(array, itemSize, normalized) {\n\t\tif (Array.isArray(array)) {\n\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t}\n\n\t\tthis.name = '';\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(BufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tisBufferAttribute: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (var i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyArray: function copyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t},\n\t\tcopyColorsArray: function copyColorsArray(colors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tvar color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector2sArray: function copyVector2sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector3sArray: function copyVector3sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector4sArray: function copyVector4sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix3: function applyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2$1.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2$1.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2$1.x, _vector2$1.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (var _i = 0, _l = this.count; _i < _l; _i++) {\n\t\t\t\t\t_vector$3.fromBufferAttribute(this, _i);\n\n\t\t\t\t\t_vector$3.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(_i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyNormalMatrix: function applyNormalMatrix(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttransformDirection: function transformDirection(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t}\n\t}); //\n\n\tfunction Int8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int8Array(array), itemSize, normalized);\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\tfunction Uint8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\tfunction Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\tfunction Int16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int16Array(array), itemSize, normalized);\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\tfunction Uint16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\tfunction Int32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int32Array(array), itemSize, normalized);\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\tfunction Uint32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\tfunction Float16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tFloat16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat16BufferAttribute.prototype.constructor = Float16BufferAttribute;\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tfunction Float32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float32Array(array), itemSize, normalized);\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\tfunction Float64BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float64Array(array), itemSize, normalized);\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute; //\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tvar max = array[0];\n\n\t\tfor (var i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tvar _id = 0;\n\n\tvar _m1$2 = new Matrix4();\n\n\tvar _obj = new Object3D();\n\n\tvar _offset = new Vector3();\n\n\tvar _box$2 = new Box3();\n\n\tvar _boxMorphTargets = new Box3();\n\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _id++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\t\tthis.drawRange = {\n\t\t\tstart: 0,\n\t\t\tcount: Infinity\n\t\t};\n\t\tthis.userData = {};\n\t}\n\n\tBufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: BufferGeometry,\n\t\tisBufferGeometry: true,\n\t\tgetIndex: function getIndex() {\n\t\t\treturn this.index;\n\t\t},\n\t\tsetIndex: function setIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tgetAttribute: function getAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t},\n\t\tsetAttribute: function setAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t},\n\t\tdeleteAttribute: function deleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t},\n\t\thasAttribute: function hasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t},\n\t\taddGroup: function addGroup(start, count, materialIndex) {\n\t\t\tif (materialIndex === void 0) {\n\t\t\t\tmaterialIndex = 0;\n\t\t\t}\n\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t},\n\t\tclearGroups: function clearGroups() {\n\t\t\tthis.groups = [];\n\t\t},\n\t\tsetDrawRange: function setDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1$2.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1$2.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1$2.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\ttranslate: function translate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1$2.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tscale: function scale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1$2.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tlookAt: function lookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t},\n\t\tcenter: function center() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t},\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tvar position = [];\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tvar point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t},\n\t\tcomputeBoundingBox: function computeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$2.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.min, _box$2.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.max, _box$2.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t},\n\t\tcomputeBoundingSphere: function computeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor (var _i = 0, _il = position.count; _i < _il; _i++) {\n\t\t\t\t\t_vector$4.fromBufferAttribute(position, _i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = morphAttributesPosition.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tvar _morphAttribute = morphAttributesPosition[_i2];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (var j = 0, jl = _morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute(_morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$4.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeFaceNormals: function computeFaceNormals() {// backwards compatibility\n\t\t},\n\t\tcomputeTangents: function computeTangents() {\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar indices = index.array;\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal.array;\n\t\t\tvar uvs = attributes.uv.array;\n\t\t\tvar nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tvar tangents = attributes.tangent.array;\n\t\t\tvar tan1 = [],\n\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (var i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tvar vA = new Vector3(),\n\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tvar r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (var _i3 = 0, il = groups.length; _i3 < il; ++_i3) {\n\t\t\t\tvar group = groups[_i3];\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor (var j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmp = new Vector3(),\n\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tvar n = new Vector3(),\n\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tvar t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tvar test = tmp2.dot(tan2[v]);\n\t\t\t\tvar w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (var _i4 = 0, _il3 = groups.length; _i4 < _il3; ++_i4) {\n\t\t\t\tvar _group = groups[_i4];\n\t\t\t\tvar _start = _group.start;\n\t\t\t\tvar _count = _group.count;\n\n\t\t\t\tfor (var _j = _start, _jl = _start + _count; _j < _jl; _j += 3) {\n\t\t\t\t\thandleVertex(indices[_j + 0]);\n\t\t\t\t\thandleVertex(indices[_j + 1]);\n\t\t\t\t\thandleVertex(indices[_j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeVertexNormals: function computeVertexNormals() {\n\t\t\tvar index = this.index;\n\t\t\tvar positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tvar normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (var i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar pA = new Vector3(),\n\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tvar nA = new Vector3(),\n\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tvar cb = new Vector3(),\n\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (var _i5 = 0, _il4 = index.count; _i5 < _il4; _i5 += 3) {\n\t\t\t\t\t\tvar vA = index.getX(_i5 + 0);\n\t\t\t\t\t\tvar vB = index.getX(_i5 + 1);\n\t\t\t\t\t\tvar vC = index.getX(_i5 + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (var _i6 = 0, _il5 = positionAttribute.count; _i6 < _il5; _i6 += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, _i6 + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, _i6 + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, _i6 + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tmerge: function merge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tvar attribute1 = attributes[key];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\t\t\t\tvar attribute2 = geometry.attributes[key];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (var i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tnormalizeNormals: function normalizeNormals() {\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor (var i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$4.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$4.x, _vector$4.y, _vector$4.z);\n\t\t\t}\n\t\t},\n\t\ttoNonIndexed: function toNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\tvar normalized = attribute.normalized;\n\t\t\t\tvar array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tvar index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (var i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (var j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes; // attributes\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tvar newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tvar _attribute = morphAttribute[i];\n\n\t\t\t\t\tvar _newAttribute = convertBufferAttribute(_attribute, indices);\n\n\t\t\t\t\tmorphArray.push(_newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[_name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor (var _i7 = 0, l = groups.length; _i7 < l; _i7++) {\n\t\t\t\tvar group = groups[_i7];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor (var key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tvar index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var _key in attributes) {\n\t\t\t\tvar attribute = attributes[_key];\n\t\t\t\tvar attributeData = attribute.toJSON(data.data);\n\t\t\t\tif (attribute.name !== '') attributeData.name = attribute.name;\n\t\t\t\tdata.data.attributes[_key] = attributeData;\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor (var _key2 in this.morphAttributes) {\n\t\t\t\tvar attributeArray = this.morphAttributes[_key2];\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tvar _attribute2 = attributeArray[i];\n\n\t\t\t\t\tvar _attributeData = _attribute2.toJSON(data.data);\n\n\t\t\t\t\tif (_attribute2.name !== '') _attributeData.name = _attribute2.name;\n\t\t\t\t\tarray.push(_attributeData);\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[_key2] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tvar data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor (var _name2 in morphAttributes) {\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name2]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[_name2] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor (var _i8 = 0, _l = groups.length; _i8 < _l; _i8++) {\n\t\t\t\tvar group = groups[_i8];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tvar _inverseMatrix = new Matrix4();\n\n\tvar _ray = new Ray();\n\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\n\tvar _vB = new Vector3();\n\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\n\tvar _tempB = new Vector3();\n\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\n\tvar _morphB = new Vector3();\n\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\n\tvar _uvB = new Vector2();\n\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new MeshBasicMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Mesh';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tMesh.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Mesh,\n\t\tisMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tvar start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tvar end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tvar a = index.getX(j);\n\t\t\t\t\t\t\t\tvar b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tvar c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i = _start, _il = _end; _i < _il; _i += 3) {\n\t\t\t\t\t\t\tvar _a = index.getX(_i);\n\n\t\t\t\t\t\t\tvar _b = index.getX(_i + 1);\n\n\t\t\t\t\t\t\tvar _c = index.getX(_i + 2);\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a, _b, _c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var _i2 = 0, _il2 = groups.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\t\tvar _group = groups[_i2];\n\t\t\t\t\t\t\tvar _groupMaterial = material[_group.materialIndex];\n\n\t\t\t\t\t\t\tvar _start2 = Math.max(_group.start, drawRange.start);\n\n\t\t\t\t\t\t\tvar _end2 = Math.min(_group.start + _group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var _j = _start2, _jl = _end2; _j < _jl; _j += 3) {\n\t\t\t\t\t\t\t\tvar _a2 = _j;\n\n\t\t\t\t\t\t\t\tvar _b2 = _j + 1;\n\n\t\t\t\t\t\t\t\tvar _c2 = _j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, _groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a2, _b2, _c2);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = _group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start3 = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end3 = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i3 = _start3, _il3 = _end3; _i3 < _il3; _i3 += 3) {\n\t\t\t\t\t\t\tvar _a3 = _i3;\n\n\t\t\t\t\t\t\tvar _b3 = _i3 + 1;\n\n\t\t\t\t\t\t\tvar _c3 = _i3 + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a3, _b3, _c3);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i3 / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tvar intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA.fromBufferAttribute(position, a);\n\n\t\t_vB.fromBufferAttribute(position, b);\n\n\t\t_vC.fromBufferAttribute(position, c);\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (var i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tvar influence = morphInfluences[i];\n\t\t\t\tvar morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA.add(_morphA);\n\n\t\t\t_vB.add(_morphB);\n\n\t\t\t_vC.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh) {\n\t\t\tobject.boneTransform(a, _vA);\n\t\t\tobject.boneTransform(b, _vB);\n\t\t\tobject.boneTransform(c, _vC);\n\t\t}\n\n\t\tvar intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tvar face = new Face3(a, b, c);\n\t\t\tTriangle.getNormal(_vA, _vB, _vC, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tvar BoxGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(BoxGeometry, _BufferGeometry);\n\n\t\tfunction BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (depthSegments === void 0) {\n\t\t\t\tdepthSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'BoxGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this); // segments\n\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\t\tvar a = numberOfVertices + _ix + gridX1 * _iy;\n\t\t\t\t\t\tvar b = numberOfVertices + _ix + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar c = numberOfVertices + (_ix + 1) + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar d = numberOfVertices + (_ix + 1) + gridX1 * _iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn BoxGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tvar dst = {};\n\n\t\tfor (var u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (var p in src[u]) {\n\t\t\t\tvar property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tvar merged = {};\n\n\t\tfor (var u = 0; u < uniforms.length; u++) {\n\t\t\tvar tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (var p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tvar UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShaderMaterial';\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\t\tthis.linewidth = 1;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false; // set to use scene fog\n\n\t\tthis.lights = false; // set to use scene lights\n\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\n\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false,\n\t\t\t// set to use derivatives\n\t\t\tfragDepth: false,\n\t\t\t// set to use fragment depth values\n\t\t\tdrawBuffers: false,\n\t\t\t// set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [1, 1, 1],\n\t\t\t'uv': [0, 0],\n\t\t\t'uv2': [0, 0]\n\t\t};\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\t\tthis.glslVersion = null;\n\n\t\tif (parameters !== undefined) {\n\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\tthis.setValues(parameters);\n\t\t}\n\t}\n\n\tShaderMaterial.prototype = Object.create(Material.prototype);\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\tthis.defines = Object.assign({}, source.defines);\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\tthis.glslVersion = source.glslVersion;\n\t\treturn this;\n\t};\n\n\tShaderMaterial.prototype.toJSON = function (meta) {\n\t\tvar data = Material.prototype.toJSON.call(this, meta);\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor (var name in this.uniforms) {\n\t\t\tvar uniform = this.uniforms[name];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif (value && value.isTexture) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t};\n\t\t\t} else if (value && value.isColor) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector2) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\t\tvar extensions = {};\n\n\t\tfor (var key in this.extensions) {\n\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t}\n\n\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\treturn data;\n\t};\n\n\tfunction Camera() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Camera';\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\t}\n\n\tCamera.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Camera,\n\t\tisCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tObject3D.prototype.copy.call(this, source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tObject3D.prototype.updateMatrixWorld.call(this, force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tObject3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\t});\n\n\tfunction PerspectiveCamera(fov, aspect, near, far) {\n\t\tif (fov === void 0) {\n\t\t\tfov = 50;\n\t\t}\n\n\t\tif (aspect === void 0) {\n\t\t\taspect = 1;\n\t\t}\n\n\t\tif (near === void 0) {\n\t\t\tnear = 0.1;\n\t\t}\n\n\t\tif (far === void 0) {\n\t\t\tfar = 2000;\n\t\t}\n\n\t\tCamera.call(this);\n\t\tthis.type = 'PerspectiveCamera';\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: PerspectiveCamera,\n\t\tisPerspectiveCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function setFocalLength(focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function getFocalLength() {\n\t\t\tvar vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t},\n\t\tgetEffectiveFOV: function getEffectiveFOV() {\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t},\n\t\tgetFilmWidth: function getFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t},\n\t\tgetFilmHeight: function getFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function updateProjectionMatrix() {\n\t\t\tvar near = this.near;\n\t\t\tvar top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tvar height = 2 * top;\n\t\t\tvar width = this.aspect * height;\n\t\t\tvar left = -0.5 * width;\n\t\t\tvar view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar fov = 90,\n\t\t\taspect = 1;\n\n\tfunction CubeCamera(near, far, renderTarget) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'CubeCamera';\n\n\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\t\tvar cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set(0, -1, 0);\n\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\tthis.add(cameraPX);\n\t\tvar cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set(0, -1, 0);\n\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\tthis.add(cameraNX);\n\t\tvar cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set(0, 0, 1);\n\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\tthis.add(cameraPY);\n\t\tvar cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set(0, 0, -1);\n\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\tthis.add(cameraNY);\n\t\tvar cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set(0, -1, 0);\n\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\tthis.add(cameraPZ);\n\t\tvar cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set(0, -1, 0);\n\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\tthis.add(cameraNZ);\n\n\t\tthis.update = function (renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t};\n\t}\n\n\tCubeCamera.prototype = Object.create(Object3D.prototype);\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\tfunction CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\t\tTexture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.flipY = false; // Why CubeTexture._needsFlipEnvMap is necessary:\n\t\t//\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\n\t\t// when using WebGLCubeRenderTarget.texture as a cube texture.\n\n\t\tthis._needsFlipEnvMap = true;\n\t}\n\n\tCubeTexture.prototype = Object.create(Texture.prototype);\n\tCubeTexture.prototype.constructor = CubeTexture;\n\tCubeTexture.prototype.isCubeTexture = true;\n\tObject.defineProperty(CubeTexture.prototype, 'images', {\n\t\tget: function get() {\n\t\t\treturn this.image;\n\t\t},\n\t\tset: function set(value) {\n\t\t\tthis.image = value;\n\t\t}\n\t});\n\n\tvar WebGLCubeRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget) {\n\t\t_inheritsLoose(WebGLCubeRenderTarget, _WebGLRenderTarget);\n\n\t\tfunction WebGLCubeRenderTarget(size, options, dummy) {\n\t\t\tvar _this;\n\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\t_this = _WebGLRenderTarget.call(this, size, size, options) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'isWebGLCubeRenderTarget', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\toptions = options || {};\n\t\t\t_this.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\t_this.texture._needsFlipEnvMap = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLCubeRenderTarget.prototype;\n\n\t\t_proto.fromEquirectangularTexture = function fromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tvar shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t\"\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\t\\t\\t\\t\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\n\\t\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t\\t#include <project_vertex>\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\",\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t\"\\n\\n\\t\\t\\t\\tuniform sampler2D tEquirect;\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\t#include <common>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec3 direction = normalize( vWorldDirection );\\n\\n\\t\\t\\t\\t\\tvec2 sampleUV = equirectUv( direction );\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"\n\t\t\t};\n\t\t\tvar geometry = new BoxGeometry(5, 5, 5);\n\t\t\tvar material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tvar mesh = new Mesh(geometry, material);\n\t\t\tvar currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tvar camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clear = function clear(renderer, color, depth, stencil) {\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t};\n\n\t\treturn WebGLCubeRenderTarget;\n\t}(WebGLRenderTarget);\n\n\tfunction DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.image = {\n\t\t\tdata: data || null,\n\t\t\twidth: width || 1,\n\t\t\theight: height || 1\n\t\t};\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture.prototype = Object.create(Texture.prototype);\n\tDataTexture.prototype.constructor = DataTexture;\n\tDataTexture.prototype.isDataTexture = true;\n\n\tvar _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tvar _vector$5 = /*@__PURE__*/new Vector3();\n\n\tvar Frustum = /*#__PURE__*/function () {\n\t\tfunction Frustum(p0, p1, p2, p3, p4, p5) {\n\t\t\tthis.planes = [p0 !== undefined ? p0 : new Plane(), p1 !== undefined ? p1 : new Plane(), p2 !== undefined ? p2 : new Plane(), p3 !== undefined ? p3 : new Plane(), p4 !== undefined ? p4 : new Plane(), p5 !== undefined ? p5 : new Plane()];\n\t\t}\n\n\t\tvar _proto = Frustum.prototype;\n\n\t\t_proto.set = function set(p0, p1, p2, p3, p4, p5) {\n\t\t\tvar planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(frustum) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromProjectionMatrix = function setFromProjectionMatrix(m) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[0],\n\t\t\t\t\tme1 = me[1],\n\t\t\t\t\tme2 = me[2],\n\t\t\t\t\tme3 = me[3];\n\t\t\tvar me4 = me[4],\n\t\t\t\t\tme5 = me[5],\n\t\t\t\t\tme6 = me[6],\n\t\t\t\t\tme7 = me[7];\n\t\t\tvar me8 = me[8],\n\t\t\t\t\tme9 = me[9],\n\t\t\t\t\tme10 = me[10],\n\t\t\t\t\tme11 = me[11];\n\t\t\tvar me12 = me[12],\n\t\t\t\t\tme13 = me[13],\n\t\t\t\t\tme14 = me[14],\n\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.intersectsObject = function intersectsObject(object) {\n\t\t\tvar geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSprite = function intersectsSprite(sprite) {\n\t\t\t_sphere$1.center.set(0, 0, 0);\n\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\n\t\t\t_sphere$1.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = -sphere.radius;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$5) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\treturn Frustum;\n\t}();\n\n\tfunction WebGLAnimation() {\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\t\tvar requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function start() {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function setAnimationLoop(callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function setContext(value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\t\t\tvar buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tvar type = 5126;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = 5126;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = 5131;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = 5123;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = 5122;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = 5125;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = 5124;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = 5120;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = 5121;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tvar cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tvar PlaneGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PlaneGeometry, _BufferGeometry);\n\n\t\tfunction PlaneGeometry(width, height, widthSegments, heightSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PlaneGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tvar width_half = width / 2;\n\t\t\tvar height_half = height / 2;\n\t\t\tvar gridX = Math.floor(widthSegments);\n\t\t\tvar gridY = Math.floor(heightSegments);\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\t\t\tvar segment_width = width / gridX;\n\t\t\tvar segment_height = height / gridY; //\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tvar x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\tvar a = _ix + gridX1 * _iy;\n\t\t\t\t\tvar b = _ix + gridX1 * (_iy + 1);\n\t\t\t\t\tvar c = _ix + 1 + gridX1 * (_iy + 1);\n\t\t\t\t\tvar d = _ix + 1 + gridX1 * _iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PlaneGeometry;\n\t}(BufferGeometry);\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor.xyz *= color.xyz;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmissionmap_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n#endif\";\n\n\tvar transmissionmap_pars_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\tuniform sampler2D transmissionMap;\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSMISSION\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSMISSION\\n\\tuniform float transmission;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <transmissionmap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <transmissionmap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSMISSION\\n\\t\\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmissionmap_fragment: transmissionmap_fragment,\n\t\ttransmissionmap_pars_fragment: transmissionmap_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tvar ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tvar clearColor = new Color(0x000000);\n\t\tvar clearAlpha = 0;\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render(renderList, scene, camera, forceClear) {\n\t\t\tvar background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tif (background.isWebGLCubeRenderTarget) {\n\t\t\t\t\t// TODO Deprecate\n\t\t\t\t\tbackground = background.texture;\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function getClearColor() {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function setClearColor(color, alpha) {\n\t\t\t\tif (alpha === void 0) {\n\t\t\t\t\talpha = 1;\n\t\t\t\t}\n\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function getClearAlpha() {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function setClearAlpha(alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tvar maxVertexAttributes = gl.getParameter(34921);\n\t\tvar extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tvar vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tvar bindingStates = {};\n\t\tvar defaultState = createBindingState(null);\n\t\tvar currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tvar state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tvar wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, 34963);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(34963, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tvar wireframe = material.wireframe === true;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tvar state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tvar newAttributes = [];\n\t\t\tvar enabledAttributes = [];\n\t\t\tvar attributeDivisors = [];\n\n\t\t\tfor (var i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tvar cachedAttributes = currentState.attributes;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar attributesNum = 0;\n\n\t\t\tfor (var key in geometryAttributes) {\n\t\t\t\tvar cachedAttribute = cachedAttributes[key];\n\t\t\t\tvar geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tvar cache = {};\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar attributesNum = 0;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\n\t\t\tfor (var i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\t\t\tvar attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tvar _extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\n\t\t\t\t_extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (var i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar programAttributes = program.getAttributes();\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (var name in programAttributes) {\n\t\t\t\tvar programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\t\tvar attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tvar _attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute === undefined) continue;\n\t\t\t\t\t\tvar _buffer = _attribute.buffer;\n\t\t\t\t\t\tvar _type = _attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, _type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, _type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, _type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, _type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tvar _attribute2 = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute2 === undefined) continue;\n\t\t\t\t\t\tvar _buffer2 = _attribute2.buffer;\n\t\t\t\t\t\tvar _type2 = _attribute2.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer2);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, _type2, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (var programId in programMap) {\n\t\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tfor (var programId in programMap) {\n\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tvar maxTextures = gl.getParameter(34930);\n\t\tvar maxVertexTextures = gl.getParameter(35660);\n\t\tvar maxTextureSize = gl.getParameter(3379);\n\t\tvar maxCubemapSize = gl.getParameter(34076);\n\t\tvar maxAttributes = gl.getParameter(34921);\n\t\tvar maxVertexUniforms = gl.getParameter(36347);\n\t\tvar maxVaryings = gl.getParameter(36348);\n\t\tvar maxFragmentUniforms = gl.getParameter(36349);\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !!extensions.get('OES_texture_float');\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tvar scope = this;\n\t\tvar globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tvar plane = new Plane(),\n\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tvar enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tvar planes = material.clippingPlanes,\n\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tvar dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (var i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0;\n\t\t\tvar dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tvar cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tvar mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tvar cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tvar currentRenderList = renderer.getRenderList();\n\t\t\t\t\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tvar renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\trenderer.setRenderList(currentRenderList);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tvar cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tvar extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tvar extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function has(name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function init(capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function get(name) {\n\t\t\t\tvar extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tvar geometries = {};\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tvar geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (var name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tvar attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tvar geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (var name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], 34962);\n\t\t\t} // morph targets\n\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar array = morphAttributes[_name];\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], 34962);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tvar indices = [];\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tvar a = array[i + 0];\n\t\t\t\t\tvar b = array[i + 1];\n\t\t\t\t\tvar c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (var _i = 0, _l = _array.length / 3 - 1; _i < _l; _i += 3) {\n\t\t\t\t\tvar _a = _i + 0;\n\n\t\t\t\t\tvar _b = _i + 1;\n\n\t\t\t\t\tvar _c = _i + 2;\n\n\t\t\t\t\tindices.push(_a, _b, _b, _c, _c, _a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tvar currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array(8);\n\t\tvar workInfluences = [];\n\n\t\tfor (var i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tvar objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tvar influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (var _i = 0; _i < length; _i++) {\n\t\t\t\t\tinfluences[_i] = [_i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (var _i2 = 0; _i2 < length; _i2++) {\n\t\t\t\tvar influence = influences[_i2];\n\t\t\t\tinfluence[0] = _i2;\n\t\t\t\tinfluence[1] = objectInfluences[_i2];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (var _i3 = 0; _i3 < 8; _i3++) {\n\t\t\t\tif (_i3 < length && influences[_i3][1]) {\n\t\t\t\t\tworkInfluences[_i3][0] = influences[_i3][0];\n\t\t\t\t\tworkInfluences[_i3][1] = influences[_i3][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[_i3][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[_i3][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor (var _i4 = 0; _i4 < 8; _i4++) {\n\t\t\t\tvar _influence = workInfluences[_i4];\n\t\t\t\tvar index = _influence[0];\n\t\t\t\tvar value = _influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + _i4) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + _i4, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + _i4) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + _i4, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + _i4) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + _i4) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tvar frame = info.render.frame;\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, 34962);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, 34962);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tvar instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction DataTexture2DArray(data, width, height, depth) {\n\t\tif (data === void 0) {\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (width === void 0) {\n\t\t\twidth = 1;\n\t\t}\n\n\t\tif (height === void 0) {\n\t\t\theight = 1;\n\t\t}\n\n\t\tif (depth === void 0) {\n\t\t\tdepth = 1;\n\t\t}\n\n\t\tTexture.call(this, null);\n\t\tthis.image = {\n\t\t\tdata: data,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth\n\t\t};\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture2DArray.prototype = Object.create(Texture.prototype);\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tfunction DataTexture3D(data, width, height, depth) {\n\t\tif (data === void 0) {\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (width === void 0) {\n\t\t\twidth = 1;\n\t\t}\n\n\t\tif (height === void 0) {\n\t\t\theight = 1;\n\t\t}\n\n\t\tif (depth === void 0) {\n\t\t\tdepth = 1;\n\t\t}\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\t\tTexture.call(this, null);\n\t\tthis.image = {\n\t\t\tdata: data,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth\n\t\t};\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture3D.prototype = Object.create(Texture.prototype);\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array(16);\n\tvar mat3array = new Float32Array(9);\n\tvar mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tvar firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize;\n\t\tvar r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (var i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (var i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (var i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tvar r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t}\n\n\tfunction setValueV2i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // uint\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t}\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of vectors (flat or from THREE classes)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (flat or from THREE clases)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tvar cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tvar seq = this.seq;\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tvar RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tvar match = RePathPart.exec(path),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tvar id = match[1];\n\t\t\tvar idIsIndex = match[2] === ']',\n\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tvar map = container.map;\n\t\t\t\tvar next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tvar n = gl.getProgramParameter(program, 35718);\n\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\tvar info = gl.getActiveUniform(program, i),\n\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tvar u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tvar v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i],\n\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tvar r = [];\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tvar shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tvar lines = string.split('\\n');\n\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tvar status = gl.getShaderParameter(shader, 35713);\n\t\tvar log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tvar toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tvar chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tvar chunks = [];\n\n\t\tfor (var name in defines) {\n\t\t\tvar value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tvar attributes = {};\n\t\tvar n = gl.getProgramParameter(program, 35721);\n\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tvar info = gl.getActiveAttrib(program, i);\n\t\t\tvar name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tvar string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tvar string = '';\n\n\t\tfor (var i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tvar precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tvar gl = renderer.getContext();\n\t\tvar defines = parameters.defines;\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tvar envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tvar gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tvar customDefines = generateDefines(defines);\n\t\tvar program = gl.createProgram();\n\t\tvar prefixVertex, prefixFragment;\n\t\tvar versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#ifdef USE_COLOR', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tvar vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader(gl, 35633, vertexGlsl);\n\t\tvar glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tvar programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, 35714) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tvar vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tvar fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter(program, 35715), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tvar programs = [];\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tvar parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'maxMorphTargets', 'maxMorphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmissionMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tvar maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tvar encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tvar array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (var name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (var i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tvar shaderID = shaderIDs[material.type];\n\t\t\tvar uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tvar program; // Check if code has been already compiled\n\n\t\t\tfor (var p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tvar preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tvar map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\t\tvar defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = renderItems[renderItemsIndex];\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).push(renderItem);\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).unshift(renderItem);\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (var i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tvar renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tvar lists = new WeakMap();\n\n\t\tfunction get(scene, camera) {\n\t\t\tvar cameras = lists.get(scene);\n\t\t\tvar list;\n\n\t\t\tif (cameras === undefined) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, new WeakMap());\n\t\t\t\tlists.get(scene).set(camera, list);\n\t\t\t} else {\n\t\t\t\tlist = cameras.get(camera);\n\n\t\t\t\tif (list === undefined) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tcameras.set(camera, list);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tvar cache = new UniformsCache();\n\t\tvar shadowCache = ShadowUniformsCache();\n\t\tvar state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (var i = 0; i < 9; i++) {\n\t\t\tstate.probe.push(new Vector3());\n\t\t}\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup(lights) {\n\t\t\tvar r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (var _i = 0; _i < 9; _i++) {\n\t\t\t\tstate.probe[_i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (var _i2 = 0, l = lights.length; _i2 < l; _i2++) {\n\t\t\t\tvar light = lights[_i2];\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\t\t\t\tvar shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (var j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar shadow = light.shadow;\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms = cache.get(light);\n\n\t\t\t\t\t_uniforms.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms.distance = distance;\n\t\t\t\t\t_uniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\t_uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\t_uniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms.shadowBias = _shadow.bias;\n\t\t\t\t\t\t_shadowUniforms.shadowNormalBias = _shadow.normalBias;\n\t\t\t\t\t\t_shadowUniforms.shadowRadius = _shadow.radius;\n\t\t\t\t\t\t_shadowUniforms.shadowMapSize = _shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = _shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = _uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms2 = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\n\t\t\t\t\t_uniforms2.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms2.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms2.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\tstate.rectArea[rectAreaLength] = _uniforms2;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms3 = cache.get(light);\n\n\t\t\t\t\t_uniforms3.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\t_uniforms3.distance = light.distance;\n\t\t\t\t\t_uniforms3.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow2 = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms2 = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms2.shadowBias = _shadow2.bias;\n\t\t\t\t\t\t_shadowUniforms2.shadowNormalBias = _shadow2.normalBias;\n\t\t\t\t\t\t_shadowUniforms2.shadowRadius = _shadow2.radius;\n\t\t\t\t\t\t_shadowUniforms2.shadowMapSize = _shadow2.mapSize;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraNear = _shadow2.camera.near;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraFar = _shadow2.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = _shadowUniforms2;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = _uniforms3;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms4 = cache.get(light);\n\n\t\t\t\t\t_uniforms4.skyColor.copy(light.color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\n\t\t\t\t\tstate.hemi[hemiLength] = _uniforms4;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tvar hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (var _i3 = 0, l = lights.length; _i3 < l; _i3++) {\n\t\t\t\tvar light = lights[_i3];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms5 = state.spot[spotLength];\n\n\t\t\t\t\t_uniforms5.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms5.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\t_uniforms5.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\t\t\t_uniforms5.direction.sub(vector3);\n\n\t\t\t\t\t_uniforms5.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms6 = state.rectArea[rectAreaLength];\n\n\t\t\t\t\t_uniforms6.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms6.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\n\t\t\t\t\t_uniforms6.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms6.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\t_uniforms6.halfWidth.applyMatrix4(matrix42);\n\n\t\t\t\t\t_uniforms6.halfHeight.applyMatrix4(matrix42);\n\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms7 = state.point[pointLength];\n\n\t\t\t\t\t_uniforms7.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms7.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms8 = state.hemi[hemiLength];\n\n\t\t\t\t\t_uniforms8.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms8.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\t_uniforms8.direction.normalize();\n\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tvar lights = new WebGLLights(extensions, capabilities);\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights() {\n\t\t\tlights.setup(lightsArray);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tif (renderCallDepth === void 0) {\n\t\t\t\trenderCallDepth = 0;\n\t\t\t}\n\n\t\t\tvar renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, []);\n\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshDepthMaterial';\n\t\tthis.depthPacking = BasicDepthPacking;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create(Material.prototype);\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.depthPacking = source.depthPacking;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshDistanceMaterial';\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.fog = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create(Material.prototype);\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.referencePosition.copy(source.referencePosition);\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\treturn this;\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, maxTextureSize) {\n\t\tvar _frustum = new Frustum();\n\n\t\tvar _shadowMapSize = new Vector2(),\n\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t_depthMaterials = [],\n\t\t\t\t_distanceMaterials = [],\n\t\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tvar shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tvar shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tvar fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tvar scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (var i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tvar light = lights[i];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tvar pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tvar _pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, _pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (var vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tvar viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tvar geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tvar result = null;\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif (object.isSkinnedMesh === true) {\n\t\t\t\t\tif (material.skinning === true) {\n\t\t\t\t\t\tuseSkinning = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\t\t\t\tresult = getMaterialVariant(useMorphing, useSkinning, useInstancing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tvar keyA = result.uuid,\n\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tvar materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tvar geometry = _objects.update(object);\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor (var k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tvar group = groups[k];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tvar _depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, _depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tvar _equationToGL, _factorToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function setMask(colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(2929);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(2929);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(512);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(519);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(513);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(514);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(518);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(516);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(517);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(2960);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(2960);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function setOp(stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\t\tvar enabledCapabilities = {};\n\t\tvar currentProgram = null;\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\t\tvar currentLineWidth = null;\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\t\tvar maxTextures = gl.getParameter(35661);\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter(7938);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tvar data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tvar texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, 10241, 9728);\n\t\t\tgl.texParameteri(type, 10240, 9728);\n\n\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[3553] = createTexture(3553, 3553, 1);\n\t\temptyTextures[34067] = createTexture(34067, 34069, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(2929);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(2884);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tvar equationToGL = (_equationToGL = {}, _equationToGL[AddEquation] = 32774, _equationToGL[SubtractEquation] = 32778, _equationToGL[ReverseSubtractEquation] = 32779, _equationToGL);\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = 32775;\n\t\t\tequationToGL[MaxEquation] = 32776;\n\t\t} else {\n\t\t\tvar extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tvar factorToGL = (_factorToGL = {}, _factorToGL[ZeroFactor] = 0, _factorToGL[OneFactor] = 1, _factorToGL[SrcColorFactor] = 768, _factorToGL[SrcAlphaFactor] = 770, _factorToGL[SrcAlphaSaturateFactor] = 776, _factorToGL[DstColorFactor] = 774, _factorToGL[DstAlphaFactor] = 772, _factorToGL[OneMinusSrcColorFactor] = 769, _factorToGL[OneMinusSrcAlphaFactor] = 771, _factorToGL[OneMinusDstColorFactor] = 775, _factorToGL[OneMinusDstAlphaFactor] = 773, _factorToGL);\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled) {\n\t\t\t\t\tdisable(3042);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!currentBlendingEnabled) {\n\t\t\t\tenable(3042);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(32774);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(1, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(1, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 0, 769, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 768, 0, 770);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(770, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(770, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 769);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 768);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(2884) : enable(2884);\n\t\t\tvar flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(2304);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(2305);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(2884);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(1029);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(1028);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(1032);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(2884);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(32823);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(32823);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(3089);\n\t\t\t} else {\n\t\t\t\tdisable(3089);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = null;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tvar _wrappingToGL, _filterToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\n\t\tvar _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tvar scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\t\t\t\t\tvar width = floor(scale * image.width);\n\t\t\t\t\tvar height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tvar context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo(image) {\n\t\t\treturn MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tvar textureProperties = properties.get(texture); // Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\n\t\t\ttextureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif (glFormat === 6403) {\n\t\t\t\tif (glType === 5126) internalFormat = 33326;\n\t\t\t\tif (glType === 5131) internalFormat = 33325;\n\t\t\t\tif (glType === 5121) internalFormat = 33321;\n\t\t\t}\n\n\t\t\tif (glFormat === 6407) {\n\t\t\t\tif (glType === 5126) internalFormat = 34837;\n\t\t\t\tif (glType === 5131) internalFormat = 34843;\n\t\t\t\tif (glType === 5121) internalFormat = 32849;\n\t\t\t}\n\n\t\t\tif (glFormat === 6408) {\n\t\t\t\tif (glType === 5126) internalFormat = 34836;\n\t\t\t\tif (glType === 5131) internalFormat = 34842;\n\t\t\t\tif (glType === 5121) internalFormat = 32856;\n\t\t\t}\n\n\t\t\tif (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn 9728;\n\t\t\t}\n\n\t\t\treturn 9729;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tvar renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t\tinfo.memory.textures--;\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tproperties.remove(renderTarget.texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(3553, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(35866, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(32879, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t}\n\n\t\tvar wrappingToGL = (_wrappingToGL = {}, _wrappingToGL[RepeatWrapping] = 10497, _wrappingToGL[ClampToEdgeWrapping] = 33071, _wrappingToGL[MirroredRepeatWrapping] = 33648, _wrappingToGL);\n\t\tvar filterToGL = (_filterToGL = {}, _filterToGL[NearestFilter] = 9728, _filterToGL[NearestMipmapNearestFilter] = 9984, _filterToGL[NearestMipmapLinearFilter] = 9986, _filterToGL[LinearFilter] = 9729, _filterToGL[LinearMipmapNearestFilter] = 9985, _filterToGL[LinearMipmapLinearFilter] = 9987, _filterToGL);\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, 10242, 33071);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, 33071);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, 33071);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\n\t\t\tif (extension) {\n\t\t\t\tif (texture.type === FloatType && extensions.get('OES_texture_float_linear') === null) return;\n\t\t\t\tif (texture.type === HalfFloatType && (isWebGL2 || extensions.get('OES_texture_half_float_linear')) === null) return;\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tvar textureType = 3553;\n\t\t\tif (texture.isDataTexture2DArray) textureType = 35866;\n\t\t\tif (texture.isDataTexture3D) textureType = 32879;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, texture.unpackAlignment);\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n\t\t\tvar image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tvar supportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tvar glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tvar mipmap;\n\t\t\tvar mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = 35056;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (var _i = 0, _il = mipmaps.length; _i < _il; _i++) {\n\t\t\t\t\tmipmap = mipmaps[_i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = mipmaps.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tmipmap = mipmaps[_i2];\n\t\t\t\t\t\tstate.texImage2D(3553, _i2, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, texture.unpackAlignment);\n\n\t\t\tvar isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tvar isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tvar cubeImage = [];\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar image = cubeImage[0],\n\t\t\t\t\tsupportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(34067, texture, supportsMips);\n\t\t\tvar mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (var _i3 = 0; _i3 < 6; _i3++) {\n\t\t\t\t\tmipmaps = cubeImage[_i3].mipmaps;\n\n\t\t\t\t\tfor (var j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tvar mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (var _i4 = 0; _i4 < 6; _i4++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, cubeImage[_i4].width, cubeImage[_i4].height, 0, glFormat, glType, cubeImage[_i4].data);\n\n\t\t\t\t\t\tfor (var _j = 0; _j < mipmaps.length; _j++) {\n\t\t\t\t\t\t\tvar _mipmap = mipmaps[_j];\n\t\t\t\t\t\t\tvar mipmapImage = _mipmap.image[_i4].image;\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, glFormat, glType, cubeImage[_i4]);\n\n\t\t\t\t\t\tfor (var _j2 = 0; _j2 < mipmaps.length; _j2++) {\n\t\t\t\t\t\t\tvar _mipmap2 = mipmaps[_j2];\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j2 + 1, glInternalFormat, glFormat, glType, _mipmap2.image[_i4]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(34067, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\t\t\tvar glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(36161, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples, 35056, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);\n\t\t\t} else {\n\t\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\n\t\t\t\tvar _glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples2 = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples2, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(36161, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tvar isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tvar webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\tinfo.memory.textures++;\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tvar isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && renderTarget.texture.format === RGBFormat && (renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType)) {\n\t\t\t\trenderTarget.texture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\t\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(34067, renderTarget.texture, supportsMips);\n\n\t\t\t\tfor (var _i5 = 0; _i5 < 6; _i5++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i5], renderTarget, 36064, 34069 + _i5);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(34067, renderTarget.texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(34067, null);\n\t\t\t} else {\n\t\t\t\tstate.bindTexture(3553, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(3553, renderTarget.texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(3553, renderTarget.texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(3553, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\n\t\t\t\tvar webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\tstate.bindTexture(target, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\n\t\t\t\t\t_gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t_gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= 256;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= 1024;\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);\n\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer); // see #18905\n\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tvar frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tvar extension;\n\t\t\tif (p === UnsignedByteType) return 5121;\n\t\t\tif (p === UnsignedShort4444Type) return 32819;\n\t\t\tif (p === UnsignedShort5551Type) return 32820;\n\t\t\tif (p === UnsignedShort565Type) return 33635;\n\t\t\tif (p === ByteType) return 5120;\n\t\t\tif (p === ShortType) return 5122;\n\t\t\tif (p === UnsignedShortType) return 5123;\n\t\t\tif (p === IntType) return 5124;\n\t\t\tif (p === UnsignedIntType) return 5125;\n\t\t\tif (p === FloatType) return 5126;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return 5131;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return 6406;\n\t\t\tif (p === RGBFormat) return 6407;\n\t\t\tif (p === RGBAFormat) return 6408;\n\t\t\tif (p === LuminanceFormat) return 6409;\n\t\t\tif (p === LuminanceAlphaFormat) return 6410;\n\t\t\tif (p === DepthFormat) return 6402;\n\t\t\tif (p === DepthStencilFormat) return 34041;\n\t\t\tif (p === RedFormat) return 6403; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return 36244;\n\t\t\tif (p === RGFormat) return 33319;\n\t\t\tif (p === RGIntegerFormat) return 33320;\n\t\t\tif (p === RGBIntegerFormat) return 36248;\n\t\t\tif (p === RGBAIntegerFormat) return 36249;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return 34042;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tfunction ArrayCamera(array) {\n\t\tif (array === void 0) {\n\t\t\tarray = [];\n\t\t}\n\n\t\tPerspectiveCamera.call(this);\n\t\tthis.cameras = array;\n\t}\n\n\tArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {\n\t\tconstructor: ArrayCamera,\n\t\tisArrayCamera: true\n\t});\n\n\tfunction Group() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Group';\n\t}\n\n\tGroup.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Group,\n\t\tisGroup: true\n\t});\n\n\tfunction WebXRController() {\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\t}\n\n\tObject.assign(WebXRController.prototype, {\n\t\tconstructor: WebXRController,\n\t\tgetHandSpace: function getHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t},\n\t\tgetTargetRaySpace: function getTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t},\n\t\tgetGripSpace: function getGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tdisconnect: function disconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tupdate: function update(inputSource, frame, referenceSpace) {\n\t\t\tvar inputPose = null;\n\t\t\tvar gripPose = null;\n\t\t\tvar handPose = null;\n\t\t\tvar targetRay = this._targetRay;\n\t\t\tvar grip = this._grip;\n\t\t\tvar hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (var _iterator = _createForOfIteratorHelperLoose(inputSource.hand.values()), _step; !(_step = _iterator()).done;) {\n\t\t\t\t\t\tvar inputjoint = _step.value;\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tvar jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tvar _joint = new Group();\n\n\t\t\t\t\t\t\t_joint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\t_joint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = _joint; // ??\n\n\t\t\t\t\t\t\thand.add(_joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tvar indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tvar thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tvar distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tvar distanceToPinch = 0.02;\n\t\t\t\t\tvar threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction WebXRManager(renderer, gl) {\n\t\tvar scope = this;\n\t\tvar session = null;\n\t\tvar framebufferScaleFactor = 1.0;\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\t\tvar pose = null;\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map(); //\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable(1);\n\t\tcameraL.viewport = new Vector4();\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable(2);\n\t\tcameraR.viewport = new Vector4();\n\t\tvar cameras = [cameraL, cameraR];\n\t\tvar cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable(1);\n\t\tcameraVR.layers.enable(2);\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null; //\n\n\t\tthis.enabled = false;\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\t\t};\n\n\t\tthis.getControllerGrip = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\t\t};\n\n\t\tthis.getHand = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\t\t}; //\n\n\n\t\tfunction onSessionEvent(event) {\n\t\t\tvar controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\tif (controller) {\n\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\ttype: event.type,\n\t\t\t\t\tdata: event.inputSource\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t});\n\t\t\tinputSourcesMap.clear();\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null; //\n\n\t\t\trenderer.setFramebuffer(null);\n\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830\n\n\t\t\tanimation.stop();\n\t\t\tscope.isPresenting = false;\n\t\t\tscope.dispatchEvent({\n\t\t\t\ttype: 'sessionend'\n\t\t\t});\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\t\t\treturn referenceSpace;\n\t\t};\n\n\t\tthis.getSession = function () {\n\t\t\treturn session;\n\t\t};\n\n\t\tthis.setSession = /*#__PURE__*/function () {\n\t\t\tvar _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value) {\n\t\t\t\tvar attributes, layerInit, baseLayer;\n\t\t\t\treturn regeneratorRuntime.wrap(function _callee$(_context) {\n\t\t\t\t\twhile (1) {\n\t\t\t\t\t\tswitch (_context.prev = _context.next) {\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\tsession = value;\n\n\t\t\t\t\t\t\t\tif (!(session !== null)) {\n\t\t\t\t\t\t\t\t\t_context.next = 24;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\t\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\t\t\t\t\tattributes = gl.getContextAttributes();\n\n\t\t\t\t\t\t\t\tif (!(attributes.xrCompatible !== true)) {\n\t\t\t\t\t\t\t\t\t_context.next = 14;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t_context.next = 14;\n\t\t\t\t\t\t\t\treturn gl.makeXRCompatible();\n\n\t\t\t\t\t\t\tcase 14:\n\t\t\t\t\t\t\t\tlayerInit = {\n\t\t\t\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\t\t\t\t\tbaseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t_context.next = 19;\n\t\t\t\t\t\t\t\treturn session.requestReferenceSpace(referenceSpaceType);\n\n\t\t\t\t\t\t\tcase 19:\n\t\t\t\t\t\t\t\treferenceSpace = _context.sent;\n\t\t\t\t\t\t\t\tanimation.setContext(session);\n\t\t\t\t\t\t\t\tanimation.start();\n\t\t\t\t\t\t\t\tscope.isPresenting = true;\n\t\t\t\t\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tcase 24:\n\t\t\t\t\t\t\tcase \"end\":\n\t\t\t\t\t\t\t\treturn _context.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, _callee);\n\t\t\t}));\n\n\t\t\treturn function (_x) {\n\t\t\t\treturn _ref.apply(this, arguments);\n\t\t\t};\n\t\t}();\n\n\t\tfunction onInputSourcesChange(event) {\n\t\t\tvar inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\tfor (var i = 0; i < controllers.length; i++) {\n\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t} // Notify disconnected\n\n\n\t\t\tfor (var _i = 0; _i < event.removed.length; _i++) {\n\t\t\t\tvar inputSource = event.removed[_i];\n\t\t\t\tvar controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t});\n\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t}\n\t\t\t} // Notify connected\n\n\n\t\t\tfor (var _i2 = 0; _i2 < event.added.length; _i2++) {\n\t\t\t\tvar _inputSource = event.added[_i2];\n\n\t\t\t\tvar _controller = inputSourcesMap.get(_inputSource);\n\n\t\t\t\tif (_controller) {\n\t\t\t\t\t_controller.dispatchEvent({\n\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\tdata: _inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} //\n\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\n\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\tvar ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\n\t\t\tvar near = projL[14] / (projL[10] - 1);\n\t\t\tvar far = projL[14] / (projL[10] + 1);\n\t\t\tvar topFov = (projL[9] + 1) / projL[5];\n\t\t\tvar bottomFov = (projL[9] - 1) / projL[5];\n\t\t\tvar leftFov = (projL[8] - 1) / projL[0];\n\t\t\tvar rightFov = (projR[8] + 1) / projR[0];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\tvar zOffset = ipd / (-leftFov + rightFov);\n\t\t\tvar xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.translateX(xOffset);\n\t\t\tcamera.translateZ(zOffset);\n\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + (ipd - xOffset);\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t}\n\n\t\tfunction updateCamera(camera, parent) {\n\t\t\tif (parent === null) {\n\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t} else {\n\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t}\n\n\t\tthis.getCamera = function (camera) {\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\tsession.updateRenderState({\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t});\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\tfor (var i = 0; i < cameras.length; i++) {\n\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t} // update camera and its children\n\n\n\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\tcamera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tvar children = camera.children;\n\n\t\t\tfor (var _i3 = 0, l = children.length; _i3 < l; _i3++) {\n\t\t\t\tchildren[_i3].updateMatrixWorld(true);\n\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\tif (cameras.length === 2) {\n\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t} else {\n\t\t\t\t// assume single camera setup (AR)\n\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\tif (pose !== null) {\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\t\t\t\trenderer.setFramebuffer(baseLayer.framebuffer);\n\t\t\t\tvar cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0; i < views.length; i++) {\n\t\t\t\t\tvar view = views[i];\n\t\t\t\t\tvar viewport = baseLayer.getViewport(view);\n\t\t\t\t\tvar camera = cameras[i];\n\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor (var _i4 = 0; _i4 < controllers.length; _i4++) {\n\t\t\t\tvar controller = controllers[_i4];\n\t\t\t\tvar inputSource = inputSources[_i4];\n\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t}\n\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t};\n\n\t\tthis.dispose = function () {};\n\t}\n\n\tObject.assign(WebXRManager.prototype, EventDispatcher.prototype);\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tvar maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tvar canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its state isolated from the parent render call.\n\n\t\tvar renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4; // internal properties\n\n\t\tvar _this = this;\n\n\t\tvar _isContextLost = false; // internal state cache\n\n\t\tvar _framebuffer = null;\n\t\tvar _currentActiveCubeFace = 0;\n\t\tvar _currentActiveMipmapLevel = 0;\n\t\tvar _currentRenderTarget = null;\n\t\tvar _currentFramebuffer = null;\n\n\t\tvar _currentMaterialId = -1;\n\n\t\tvar _currentCamera = null;\n\n\t\tvar _currentViewport = new Vector4();\n\n\t\tvar _currentScissor = new Vector4();\n\n\t\tvar _currentScissorTest = null; //\n\n\t\tvar _width = _canvas.width;\n\t\tvar _height = _canvas.height;\n\t\tvar _pixelRatio = 1;\n\t\tvar _opaqueSort = null;\n\t\tvar _transparentSort = null;\n\n\t\tvar _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissorTest = false; // frustum\n\n\t\tvar _frustum = new Frustum(); // clipping\n\n\n\t\tvar _clippingEnabled = false;\n\t\tvar _localClippingEnabled = false; // camera matrices cache\n\n\t\tvar _projScreenMatrix = new Matrix4();\n\n\t\tvar _vector3 = new Vector3();\n\n\t\tvar _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tvar _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (var i = 0; i < contextNames.length; i++) {\n\t\t\t\tvar contextName = contextNames[i];\n\n\t\t\t\tvar context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tvar contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, cubemaps, attributes, geometries, objects;\n\t\tvar programCache, materials, renderLists, renderStates, clipping;\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tvar utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tvar xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);\n\t\tthis.shadowMap = shadowMap; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\n\t\t\t\ttarget = new Color();\n\t\t\t}\n\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tvar bits = 0;\n\t\t\tif (color === undefined || color) bits |= 16384;\n\t\t\tif (depth === undefined || depth) bits |= 256;\n\t\t\tif (stencil === undefined || stencil) bits |= 1024;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tinitGLContext();\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tvar material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReference(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReference(material) {\n\t\t\tvar programInfo = properties.get(material).program;\n\n\t\t\tif (programInfo !== undefined) {\n\t\t\t\tprogramCache.releaseProgram(programInfo);\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tvar buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.position);\n\n\t\t\t\t_gl.bufferData(34962, object.positionArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.normal);\n\n\t\t\t\t_gl.bufferData(34962, object.normalArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.uv);\n\n\t\t\t\t_gl.bufferData(34962, object.uvArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.color);\n\n\t\t\t\t_gl.bufferData(34962, object.colorArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(4, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tvar dataCount = index !== null ? index.count : position.count;\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tvar drawStart = Math.max(rangeStart, groupStart);\n\t\t\tvar drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tvar drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(4);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tvar lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(2);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(3);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(0);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(4);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tvar instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tvar compiled = new WeakMap();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tvar material2 = material[i];\n\n\t\t\t\t\t\t\tif (compiled.has(material2) === false) {\n\t\t\t\t\t\t\t\tinitMaterial(material2, scene, object);\n\t\t\t\t\t\t\t\tcompiled.set(material2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (compiled.has(material) === false) {\n\t\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t\t\tcompiled.set(material);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (xr.isPresenting) return;\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t}; // Rendering\n\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif (arguments[2] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n\t\t\t\trenderTarget = arguments[2];\n\t\t\t}\n\n\t\t\tif (arguments[3] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');\n\t\t\t\tforceClear = arguments[3];\n\t\t\t}\n\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // reset caching for this frame\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tcamera = xr.getCamera(camera);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, camera);\n\t\t\tcurrentRenderList.init();\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset();\n\n\t\t\tif (renderTarget !== undefined) {\n\t\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\t} //\n\n\n\t\t\tbackground.render(currentRenderList, scene, camera, forceClear); // render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\tcurrentRenderList = null;\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update(object);\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar _geometry = objects.update(object);\n\n\t\t\t\t\t\tvar _material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(_material)) {\n\t\t\t\t\t\t\tvar groups = _geometry.groups;\n\n\t\t\t\t\t\t\tfor (var i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\t\tvar groupMaterial = _material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (_material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, _material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var _i = 0, _l = children.length; _i < _l; _i++) {\n\t\t\t\tprojectObject(children[_i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tvar overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (var i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tvar renderItem = renderList[i];\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor (var j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tvar camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLightsView(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction initMaterial(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tvar lightsStateVersion = lights.state.version;\n\t\t\tvar parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true; // always update environment and fog - changing these trigger an initMaterial call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);\n\n\t\t\tif (program === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t} else if (program.cacheKey !== programCacheKey) {\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference(material);\n\t\t\t} else if (materialProperties.lightsStateVersion !== lightsStateVersion) {\n\t\t\t\tprogramChange = false;\n\t\t\t} else if (parameters.shaderID !== undefined) {\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\t\t\t}\n\n\t\t\tif (programChange) {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tmaterialProperties.numClippingPlanes = clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t} // store the light setup it was created for\n\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms();\n\t\t\tvar uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tvar useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.environment !== environment) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\t\t\tvar program = materialProperties.program,\n\t\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (material.skinning) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) {\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t\t\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\t\t\t\t\tvar size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo(size);\n\t\t\t\t\t\t\tsize = Math.max(size, 4);\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\t\t\t\t\tboneMatrices.set(skeleton.boneMatrices); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t} //\n\n\n\t\tthis.setFramebuffer = function (value) {\n\t\t\tif (_framebuffer !== value && _currentRenderTarget === null) _gl.bindFramebuffer(36160, value);\n\t\t\t_framebuffer = value;\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderList = function () {\n\t\t\treturn currentRenderList;\n\t\t};\n\n\t\tthis.setRenderList = function (renderList) {\n\t\t\tcurrentRenderList = renderList;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace, activeMipmapLevel) {\n\t\t\tif (activeCubeFace === void 0) {\n\t\t\t\tactiveCubeFace = 0;\n\t\t\t}\n\n\t\t\tif (activeMipmapLevel === void 0) {\n\t\t\t\tactiveMipmapLevel = 0;\n\t\t\t}\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tvar __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tif (_currentFramebuffer !== framebuffer) {\n\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t_currentFramebuffer = framebuffer;\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif (framebuffer !== _currentFramebuffer) {\n\t\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t\trestore = true;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(36160) === 36053) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (restore) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, _currentFramebuffer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tvar levelScale = Math.pow(2, -level);\n\t\t\tvar width = Math.floor(texture.image.width * levelScale);\n\t\t\tvar height = Math.floor(texture.image.height * levelScale);\n\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert(dstTexture.format);\n\t\t\tvar glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(37440, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tfunction WebGL1Renderer(parameters) {\n\t\tWebGLRenderer.call(this, parameters);\n\t}\n\n\tWebGL1Renderer.prototype = Object.assign(Object.create(WebGLRenderer.prototype), {\n\t\tconstructor: WebGL1Renderer,\n\t\tisWebGL1Renderer: true\n\t});\n\n\tvar FogExp2 = /*#__PURE__*/function () {\n\t\tfunction FogExp2(color, density) {\n\t\t\tObject.defineProperty(this, 'isFogExp2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density !== undefined ? density : 0.00025;\n\t\t}\n\n\t\tvar _proto = FogExp2.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t};\n\n\t\treturn FogExp2;\n\t}();\n\n\tvar Fog = /*#__PURE__*/function () {\n\t\tfunction Fog(color, near, far) {\n\t\t\tObject.defineProperty(this, 'isFog', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near !== undefined ? near : 1;\n\t\t\tthis.far = far !== undefined ? far : 1000;\n\t\t}\n\n\t\tvar _proto = Fog.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t};\n\n\t\treturn Fog;\n\t}();\n\n\tvar Scene = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Scene, _Object3D);\n\n\t\tfunction Scene() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'isScene', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\t_this.type = 'Scene';\n\t\t\t_this.background = null;\n\t\t\t_this.environment = null;\n\t\t\t_this.fog = null;\n\t\t\t_this.overrideMaterial = null;\n\t\t\t_this.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: _assertThisInitialized(_this)\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Scene.prototype;\n\n\t\t_proto.copy = function copy(source, recursive) {\n\t\t\t_Object3D.prototype.copy.call(this, source, recursive);\n\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Object3D.prototype.toJSON.call(this, meta);\n\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn Scene;\n\t}(Object3D);\n\n\tfunction InterleavedBuffer(array, stride) {\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t\tthis.uuid = MathUtils.generateUUID();\n\t}\n\n\tObject.defineProperty(InterleavedBuffer.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tisInterleavedBuffer: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (var i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tvar array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tvar ib = new InterleavedBuffer(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\t});\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {\n\t\tthis.name = '';\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\t\tthis.normalized = normalized === true;\n\t}\n\n\tObject.defineProperties(InterleavedBufferAttribute.prototype, {\n\t\tcount: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.count;\n\t\t\t}\n\t\t},\n\t\tarray: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.array;\n\t\t\t}\n\t\t},\n\t\tneedsUpdate: {\n\t\t\tset: function set(value) {\n\t\t\t\tthis.data.needsUpdate = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBufferAttribute.prototype, {\n\t\tisInterleavedBufferAttribute: true,\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'SpriteMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.rotation = 0;\n\t\tthis.sizeAttenuation = true;\n\t\tthis.transparent = true;\n\t\tthis.setValues(parameters);\n\t}\n\n\tSpriteMaterial.prototype = Object.create(Material.prototype);\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.rotation = source.rotation;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\treturn this;\n\t};\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\n\tvar _worldScale = new Vector3();\n\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\n\tvar _rotatedPosition = new Vector2();\n\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\n\tvar _vB$1 = new Vector3();\n\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\n\tvar _uvB$1 = new Vector2();\n\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite(material) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Sprite';\n\n\t\tif (_geometry === undefined) {\n\t\t\t_geometry = new BufferGeometry();\n\t\t\tvar float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\tvar interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\tthis.center = new Vector2(0.5, 0.5);\n\t}\n\n\tSprite.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Sprite,\n\t\tisSprite: true,\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\t\t\ttransformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA$1.set(0, 0);\n\n\t\t\t_uvB$1.set(1, 0);\n\n\t\t\t_uvC$1.set(1, 1); // check first triangle\n\n\n\t\t\tvar intersect = raycaster.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB$1.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tvar _v1$4 = new Vector3();\n\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\t\tObject3D.call(this);\n\t\tthis._currentLevel = 0;\n\t\tthis.type = 'LOD';\n\t\tObject.defineProperties(this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t});\n\t\tthis.autoUpdate = true;\n\t}\n\n\tLOD.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: LOD,\n\t\tisLOD: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source, false);\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t},\n\t\taddLevel: function addLevel(object, distance) {\n\t\t\tif (distance === void 0) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tdistance = Math.abs(distance);\n\t\t\tvar levels = this.levels;\n\t\t\tvar l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t},\n\t\tgetCurrentLevel: function getCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t},\n\t\tgetObjectForDistance: function getObjectForDistance(distance) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$4.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(_v1$4);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t},\n\t\tupdate: function update(camera) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$4.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = _v1$4.distanceTo(_v2$2) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar _basePosition = new Vector3();\n\n\tvar _skinIndex = new Vector4();\n\n\tvar _skinWeight = new Vector4();\n\n\tvar _vector$7 = new Vector3();\n\n\tvar _matrix$1 = new Matrix4();\n\n\tfunction SkinnedMesh(geometry, material) {\n\t\tif (geometry && geometry.isGeometry) {\n\t\t\tconsole.error('THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t}\n\n\t\tMesh.call(this, geometry, material);\n\t\tthis.type = 'SkinnedMesh';\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\t}\n\n\tSkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: SkinnedMesh,\n\t\tisSkinnedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t},\n\t\tbind: function bind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t},\n\t\tpose: function pose() {\n\t\t\tthis.skeleton.pose();\n\t\t},\n\t\tnormalizeSkinWeights: function normalizeSkinWeights() {\n\t\t\tvar vector = new Vector4();\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (var i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tMesh.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t},\n\t\tboneTransform: function boneTransform(index, target) {\n\t\t\tvar skeleton = this.skeleton;\n\t\t\tvar geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\tvar weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tvar boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix$1.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$7.copy(_basePosition).applyMatrix4(_matrix$1), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\t});\n\n\tfunction Bone() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Bone';\n\t}\n\n\tBone.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Bone,\n\t\tisBone: true\n\t});\n\n\tvar _offsetMatrix = new Matrix4();\n\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton(bones, boneInverses) {\n\t\tif (bones === void 0) {\n\t\t\tbones = [];\n\t\t}\n\n\t\tif (boneInverses === void 0) {\n\t\t\tboneInverses = [];\n\t\t}\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.bones = bones.slice(0);\n\t\tthis.boneInverses = boneInverses;\n\t\tthis.boneMatrices = null;\n\t\tthis.boneTexture = null;\n\t\tthis.boneTextureSize = 0;\n\t\tthis.frame = -1;\n\t\tthis.init();\n\t}\n\n\tObject.assign(Skeleton.prototype, {\n\t\tinit: function init() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcalculateInverses: function calculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t},\n\t\tpose: function pose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (var _i = 0, _il = this.bones.length; _i < _il; _i++) {\n\t\t\t\tvar _bone = this.bones[_i];\n\n\t\t\t\tif (_bone) {\n\t\t\t\t\tif (_bone.parent && _bone.parent.isBone) {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.parent.matrixWorld).invert();\n\n\t\t\t\t\t\t_bone.matrix.multiply(_bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\t_bone.matrix.decompose(_bone.position, _bone.quaternion, _bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdate: function update() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (var i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tvar matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t},\n\t\tgetBoneByName: function getBoneByName(name) {\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t},\n\t\tfromJSON: function fromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (var i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tvar uuid = json.bones[i];\n\t\t\t\tvar bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\n\t\t\tfor (var i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tvar bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tvar boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh(geometry, material, count) {\n\t\tMesh.call(this, geometry, material);\n\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\tthis.instanceColor = null;\n\t\tthis.count = count;\n\t\tthis.frustumCulled = false;\n\t}\n\n\tInstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: InstancedMesh,\n\t\tisInstancedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t},\n\t\tgetColorAt: function getColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tgetMatrixAt: function getMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (var instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (var i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tvar intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t},\n\t\tsetColorAt: function setColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tsetMatrixAt: function setMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'LineBasicMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tLineBasicMaterial.prototype = Object.create(Material.prototype);\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _start = new Vector3();\n\n\tvar _end = new Vector3();\n\n\tvar _inverseMatrix$1 = new Matrix4();\n\n\tvar _ray$1 = new Ray();\n\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new LineBasicMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Line';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tLine.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Line,\n\t\tisLine: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [0];\n\n\t\t\t\t\tfor (var i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$2.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$2.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$2) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, l = indices.length - 1; i < l; i += step) {\n\t\t\t\t\t\tvar a = indices[i];\n\t\t\t\t\t\tvar b = indices[i + 1];\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i = 0, _l = positionAttribute.count - 1; _i < _l; _i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, _i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, _i + 1);\n\n\t\t\t\t\t\tvar _distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (_distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar _distance = raycaster.ray.origin.distanceTo(interRay);\n\n\t\t\t\t\t\tif (_distance < raycaster.near || _distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: _distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: _i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _start$1 = new Vector3();\n\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineSegments';\n\t}\n\n\tLineSegments.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineSegments,\n\t\tisLineSegments: true,\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor (var i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction LineLoop(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineLoop';\n\t}\n\n\tLineLoop.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineLoop,\n\t\tisLineLoop: true\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'PointsMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tPointsMaterial.prototype = Object.create(Material.prototype);\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\n\tvar _ray$2 = new Ray();\n\n\tvar _sphere$3 = new Sphere();\n\n\tvar _position$1 = new Vector3();\n\n\tfunction Points(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new PointsMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Points';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tPoints.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Points,\n\t\tisPoints: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$3.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, il = indices.length; i < il; i++) {\n\t\t\t\t\t\tvar a = indices[i];\n\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i = 0, l = positionAttribute.count; _i < l; _i++) {\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, _i);\n\n\t\t\t\t\t\ttestPoint(_position$1, _i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\tTexture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.generateMipmaps = false;\n\t\tvar scope = this;\n\n\t\tfunction updateVideo() {\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t}\n\n\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t}\n\t}\n\n\tVideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {\n\t\tconstructor: VideoTexture,\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t},\n\t\tisVideoTexture: true,\n\t\tupdate: function update() {\n\t\t\tvar video = this.image;\n\t\t\tvar hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.image = {\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\t}\n\n\tCompressedTexture.prototype = Object.create(Texture.prototype);\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tfunction CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\tTexture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.needsUpdate = true;\n\t}\n\n\tCanvasTexture.prototype = Object.create(Texture.prototype);\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tfunction DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t}\n\n\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.image = {\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps = false;\n\t}\n\n\tDepthTexture.prototype = Object.create(Texture.prototype);\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tvar CircleGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CircleGeometry, _BufferGeometry);\n\n\t\tfunction CircleGeometry(radius, segments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (segments === void 0) {\n\t\t\t\tsegments = 8;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CircleGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (var s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tvar segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tindices.push(_i, _i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CircleGeometry;\n\t}(BufferGeometry);\n\n\tvar CylinderGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CylinderGeometry, _BufferGeometry);\n\n\t\tfunction CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radiusTop === void 0) {\n\t\t\t\tradiusTop = 1;\n\t\t\t}\n\n\t\t\tif (radiusBottom === void 0) {\n\t\t\t\tradiusBottom = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (openEnded === void 0) {\n\t\t\t\topenEnded = false;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CylinderGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar index = 0;\n\t\t\tvar indexArray = [];\n\t\t\tvar halfHeight = height / 2;\n\t\t\tvar groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tvar normal = new Vector3();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tvar slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (var y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tvar indexRow = [];\n\t\t\t\t\tvar v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tvar radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (var x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tvar u = x / radialSegments;\n\t\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tvar sinTheta = Math.sin(theta);\n\t\t\t\t\t\tvar cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x = 0; _x < radialSegments; _x++) {\n\t\t\t\t\tfor (var _y = 0; _y < heightSegments; _y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tvar a = indexArray[_y][_x];\n\t\t\t\t\t\tvar b = indexArray[_y + 1][_x];\n\t\t\t\t\t\tvar c = indexArray[_y + 1][_x + 1];\n\t\t\t\t\t\tvar d = indexArray[_y][_x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tvar centerIndexStart = index;\n\t\t\t\tvar uv = new Vector2();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tvar sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (var x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tvar centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (var _x2 = 0; _x2 <= radialSegments; _x2++) {\n\t\t\t\t\tvar u = _x2 / radialSegments;\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\tvar cosTheta = Math.cos(theta);\n\t\t\t\t\tvar sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x3 = 0; _x3 < radialSegments; _x3++) {\n\t\t\t\t\tvar c = centerIndexStart + _x3;\n\t\t\t\t\tvar i = centerIndexEnd + _x3;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CylinderGeometry;\n\t}(BufferGeometry);\n\n\tvar ConeGeometry = /*#__PURE__*/function (_CylinderGeometry) {\n\t\t_inheritsLoose(ConeGeometry, _CylinderGeometry);\n\n\t\tfunction ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (openEnded === void 0) {\n\t\t\t\topenEnded = false;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) || this;\n\t\t\t_this.type = 'ConeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn ConeGeometry;\n\t}(CylinderGeometry);\n\n\tvar PolyhedronGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PolyhedronGeometry, _BufferGeometry);\n\n\t\tfunction PolyhedronGeometry(vertices, indices, radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PolyhedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tvar vertexBuffer = [];\n\t\t\tvar uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\t_this.computeVertexNormals(); // flat normals\n\n\t\t\t} else {\n\t\t\t\t_this.normalizeNormals(); // smooth normals\n\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (var i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tvar cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tvar v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (var i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tvar aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tvar bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tvar rows = cols - i;\n\n\t\t\t\t\tfor (var j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (var _i = 0; _i < cols; _i++) {\n\t\t\t\t\tfor (var _j = 0; _j < 2 * (cols - _i) - 1; _j++) {\n\t\t\t\t\t\tvar k = Math.floor(_j / 2);\n\n\t\t\t\t\t\tif (_j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[_i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tvar vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tvar vertex = new Vector3();\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvar u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tvar v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (var i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tvar x0 = uvBuffer[i + 0];\n\t\t\t\t\tvar x1 = uvBuffer[i + 2];\n\t\t\t\t\tvar x2 = uvBuffer[i + 4];\n\t\t\t\t\tvar max = Math.max(x0, x1, x2);\n\t\t\t\t\tvar min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tvar stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3();\n\t\t\t\tvar centroid = new Vector3();\n\t\t\t\tvar uvA = new Vector2();\n\t\t\t\tvar uvB = new Vector2();\n\t\t\t\tvar uvC = new Vector2();\n\n\t\t\t\tfor (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tvar azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolyhedronGeometry;\n\t}(BufferGeometry);\n\n\tvar DodecahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(DodecahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction DodecahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar r = 1 / t;\n\t\t\tvar vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tvar indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'DodecahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DodecahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar _v0$2 = new Vector3();\n\n\tvar _v1$5 = new Vector3();\n\n\tvar _normal$1 = new Vector3();\n\n\tvar _triangle = new Triangle();\n\n\tvar EdgesGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(EdgesGeometry, _BufferGeometry);\n\n\t\tfunction EdgesGeometry(geometry, thresholdAngle) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'EdgesGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\tvar precisionPoints = 4;\n\t\t\tvar precision = Math.pow(10, precisionPoints);\n\t\t\tvar thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle);\n\t\t\tvar indexAttr = geometry.getIndex();\n\t\t\tvar positionAttr = geometry.getAttribute('position');\n\t\t\tvar indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tvar indexArr = [0, 0, 0];\n\t\t\tvar vertKeys = ['a', 'b', 'c'];\n\t\t\tvar hashes = new Array(3);\n\t\t\tvar edgeData = {};\n\t\t\tvar vertices = [];\n\n\t\t\tfor (var i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tvar a = _triangle.a,\n\t\t\t\t\t\tb = _triangle.b,\n\t\t\t\t\t\tc = _triangle.c;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal$1); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = Math.round(a.x * precision) + \",\" + Math.round(a.y * precision) + \",\" + Math.round(a.z * precision);\n\t\t\t\thashes[1] = Math.round(b.x * precision) + \",\" + Math.round(b.y * precision) + \",\" + Math.round(b.z * precision);\n\t\t\t\thashes[2] = Math.round(c.x * precision) + \",\" + Math.round(c.y * precision) + \",\" + Math.round(c.z * precision); // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tvar jNext = (j + 1) % 3;\n\t\t\t\t\tvar vecHash0 = hashes[j];\n\t\t\t\t\tvar vecHash1 = hashes[jNext];\n\t\t\t\t\tvar v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tvar v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tvar hash = vecHash0 + \"_\" + vecHash1;\n\t\t\t\t\tvar reverseHash = vecHash1 + \"_\" + vecHash0;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal$1.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal$1.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (var key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tvar _edgeData$key = edgeData[key],\n\t\t\t\t\t\t\tindex0 = _edgeData$key.index0,\n\t\t\t\t\t\t\tindex1 = _edgeData$key.index1;\n\n\t\t\t\t\t_v0$2.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$5.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0$2.x, _v0$2.y, _v0$2.z);\n\t\t\t\t\tvertices.push(_v1$5.x, _v1$5.y, _v1$5.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn EdgesGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tvar Earcut = {\n\t\ttriangulate: function triangulate(data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tvar hasHoles = holeIndices && holeIndices.length;\n\t\t\tvar outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tvar outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tvar triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (var i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tvar i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tvar p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tvar stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tvar p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tvar minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tvar minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tvar p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tvar a = p.prev,\n\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\n\t\tdo {\n\t\t\tvar b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tvar queue = [];\n\t\tvar i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tvar b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tvar p = outerNode;\n\t\tvar hx = hole.x;\n\t\tvar hy = hole.y;\n\t\tvar qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tvar x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\t\tmx = m.x,\n\t\t\t\tmy = m.y;\n\t\tvar tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tvar i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tvar p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tvar o1 = sign(area(p1, q1, p2));\n\t\tvar o2 = sign(area(p1, q1, q2));\n\t\tvar o3 = sign(area(p2, q2, p1));\n\t\tvar o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tvar p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tvar p = a,\n\t\t\t\tinside = false;\n\t\tvar px = (a.x + b.x) / 2,\n\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tvar a2 = new Node(a.i, a.x, a.y),\n\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\tan = a.next,\n\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tvar p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tvar sum = 0;\n\n\t\tfor (var i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tvar ShapeUtils = {\n\t\t// calculate area of the contour polygon\n\t\tarea: function area(contour) {\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor (var p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t},\n\t\tisClockWise: function isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t},\n\t\ttriangulateShape: function triangulateShape(contour, holes) {\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tvar holeIndices = []; // array of hole indices\n\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tvar holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (var i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tvar triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (var _i = 0; _i < triangles.length; _i += 3) {\n\t\t\t\tfaces.push(triangles.slice(_i, _i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\t};\n\n\tfunction removeDupEndPts(points) {\n\t\tvar l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (var i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\tvar ExtrudeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ExtrudeGeometry, _BufferGeometry);\n\n\t\tfunction ExtrudeGeometry(shapes, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ExtrudeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tvar verticesArray = [];\n\t\t\tvar uvArray = [];\n\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\n\t\t\t_this.computeVertexNormals(); // functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar placeholder = []; // options\n\n\t\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tvar extrudePath = options.extrudePath;\n\t\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tvar extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tvar shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tvar vertices = shapePoints.shape;\n\t\t\t\tvar holes = shapePoints.holes;\n\t\t\t\tvar reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (var h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tvar ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (var _h = 0, _hl = holes.length; _h < _hl; _h++) {\n\t\t\t\t\tvar _ahole = holes[_h];\n\t\t\t\t\tvertices = vertices.concat(_ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tvar vlen = vertices.length,\n\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tvar v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tvar collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tvar v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tvar v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tvar ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tvar ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tvar ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tvar ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tvar sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tvar v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tvar contourMovements = [];\n\n\t\t\t\tfor (var _i = 0, il = contour.length, j = il - 1, k = _i + 1; _i < il; _i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[_i] = getBevelVec(contour[_i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tvar holesMovements = [];\n\t\t\t\tvar oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (var _h2 = 0, _hl2 = holes.length; _h2 < _hl2; _h2++) {\n\t\t\t\t\tvar _ahole2 = holes[_h2];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (var _i2 = 0, _il = _ahole2.length, _j = _il - 1, _k = _i2 + 1; _i2 < _il; _i2++, _j++, _k++) {\n\t\t\t\t\t\tif (_j === _il) _j = 0;\n\t\t\t\t\t\tif (_k === _il) _k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[_i2] = getBevelVec(_ahole2[_i2], _ahole2[_j], _ahole2[_k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (var b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tvar t = b / bevelSegments;\n\t\t\t\t\tvar z = bevelThickness * Math.cos(t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i3 = 0, _il2 = contour.length; _i3 < _il2; _i3++) {\n\t\t\t\t\t\tvar vert = scalePt2(contour[_i3], contourMovements[_i3], _bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h3 = 0, _hl3 = holes.length; _h3 < _hl3; _h3++) {\n\t\t\t\t\t\tvar _ahole3 = holes[_h3];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h3];\n\n\t\t\t\t\t\tfor (var _i4 = 0, _il3 = _ahole3.length; _i4 < _il3; _i4++) {\n\t\t\t\t\t\t\tvar _vert = scalePt2(_ahole3[_i4], oneHoleMovements[_i4], _bs);\n\n\t\t\t\t\t\t\tv(_vert.x, _vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (var _i5 = 0; _i5 < vlen; _i5++) {\n\t\t\t\t\tvar _vert2 = bevelEnabled ? scalePt2(vertices[_i5], verticesMovements[_i5], bs) : vertices[_i5];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(_vert2.x, _vert2.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (var s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (var _i6 = 0; _i6 < vlen; _i6++) {\n\t\t\t\t\t\tvar _vert3 = bevelEnabled ? scalePt2(vertices[_i6], verticesMovements[_i6], bs) : vertices[_i6];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(_vert3.x, _vert3.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (var _b = bevelSegments - 1; _b >= 0; _b--) {\n\t\t\t\t\tvar _t = _b / bevelSegments;\n\n\t\t\t\t\tvar _z = bevelThickness * Math.cos(_t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs2 = bevelSize * Math.sin(_t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i7 = 0, _il4 = contour.length; _i7 < _il4; _i7++) {\n\t\t\t\t\t\tvar _vert4 = scalePt2(contour[_i7], contourMovements[_i7], _bs2);\n\n\t\t\t\t\t\tv(_vert4.x, _vert4.y, depth + _z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h4 = 0, _hl4 = holes.length; _h4 < _hl4; _h4++) {\n\t\t\t\t\t\tvar _ahole4 = holes[_h4];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h4];\n\n\t\t\t\t\t\tfor (var _i8 = 0, _il5 = _ahole4.length; _i8 < _il5; _i8++) {\n\t\t\t\t\t\t\tvar _vert5 = scalePt2(_ahole4[_i8], oneHoleMovements[_i8], _bs2);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y, depth + _z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + _z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tvar layer = 0; // steps + 1\n\n\t\t\t\t\t\tvar offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (var _i9 = 0; _i9 < flen; _i9++) {\n\t\t\t\t\t\t\tvar face = faces[_i9];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (var _i10 = 0; _i10 < flen; _i10++) {\n\t\t\t\t\t\t\tvar _face = faces[_i10];\n\t\t\t\t\t\t\tf3(_face[0] + offset, _face[1] + offset, _face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (var _i11 = 0; _i11 < flen; _i11++) {\n\t\t\t\t\t\t\tvar _face2 = faces[_i11];\n\t\t\t\t\t\t\tf3(_face2[2], _face2[1], _face2[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (var _i12 = 0; _i12 < flen; _i12++) {\n\t\t\t\t\t\t\tvar _face3 = faces[_i12];\n\t\t\t\t\t\t\tf3(_face3[0] + vlen * steps, _face3[1] + vlen * steps, _face3[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\t\tvar layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (var _h5 = 0, _hl5 = holes.length; _h5 < _hl5; _h5++) {\n\t\t\t\t\t\tvar _ahole5 = holes[_h5];\n\t\t\t\t\t\tsidewalls(_ahole5, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += _ahole5.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tvar i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tvar _j2 = i;\n\n\t\t\t\t\t\tvar _k2 = i - 1;\n\n\t\t\t\t\t\tif (_k2 < 0) _k2 = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (var _s = 0, sl = steps + bevelSegments * 2; _s < sl; _s++) {\n\t\t\t\t\t\t\tvar slen1 = vlen * _s;\n\t\t\t\t\t\t\tvar slen2 = vlen * (_s + 1);\n\n\t\t\t\t\t\t\tvar a = layeroffset + _j2 + slen1,\n\t\t\t\t\t\t\t\t\t_b2 = layeroffset + _k2 + slen1,\n\t\t\t\t\t\t\t\t\tc = layeroffset + _k2 + slen2,\n\t\t\t\t\t\t\t\t\td = layeroffset + _j2 + slen2;\n\n\t\t\t\t\t\t\tf4(a, _b2, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ExtrudeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\tvar options = this.parameters.options;\n\t\t\treturn _toJSON(shapes, options, data);\n\t\t};\n\n\t\treturn ExtrudeGeometry;\n\t}(BufferGeometry);\n\n\tvar WorldUVGenerator = {\n\t\tgenerateTopUV: function generateTopUV(geometry, vertices, indexA, indexB, indexC) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function generateSideWallUV(geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar a_z = vertices[indexA * 3 + 2];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar b_z = vertices[indexB * 3 + 2];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\tvar c_z = vertices[indexC * 3 + 2];\n\t\t\tvar d_x = vertices[indexD * 3];\n\t\t\tvar d_y = vertices[indexD * 3 + 1];\n\t\t\tvar d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < 0.01) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _toJSON(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tvar IcosahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(IcosahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction IcosahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tvar indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'IcosahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn IcosahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar LatheGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(LatheGeometry, _BufferGeometry);\n\n\t\tfunction LatheGeometry(points, segments, phiStart, phiLength) {\n\t\t\tvar _this;\n\n\t\t\tif (segments === void 0) {\n\t\t\t\tsegments = 12;\n\t\t\t}\n\n\t\t\tif (phiStart === void 0) {\n\t\t\t\tphiStart = 0;\n\t\t\t}\n\n\t\t\tif (phiLength === void 0) {\n\t\t\t\tphiLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'LatheGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = MathUtils.clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar inverseSegments = 1.0 / segments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tvar sin = Math.sin(phi);\n\t\t\t\tvar cos = Math.cos(phi);\n\n\t\t\t\tfor (var j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 0; _i < segments; _i++) {\n\t\t\t\tfor (var _j = 0; _j < points.length - 1; _j++) {\n\t\t\t\t\tvar base = _j + _i * points.length;\n\t\t\t\t\tvar a = base;\n\t\t\t\t\tvar b = base + points.length;\n\t\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\t\tvar d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\n\t\t\t_this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tvar normals = _this.attributes.normal.array;\n\t\t\t\tvar n1 = new Vector3();\n\t\t\t\tvar n2 = new Vector3();\n\t\t\t\tvar n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tvar _base = segments * points.length * 3;\n\n\t\t\t\tfor (var _i2 = 0, _j2 = 0; _i2 < points.length; _i2++, _j2 += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[_j2 + 0];\n\t\t\t\t\tn1.y = normals[_j2 + 1];\n\t\t\t\t\tn1.z = normals[_j2 + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[_base + _j2 + 0];\n\t\t\t\t\tn2.y = normals[_base + _j2 + 1];\n\t\t\t\t\tn2.z = normals[_base + _j2 + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[_j2 + 0] = normals[_base + _j2 + 0] = n.x;\n\t\t\t\t\tnormals[_j2 + 1] = normals[_base + _j2 + 1] = n.y;\n\t\t\t\t\tnormals[_j2 + 2] = normals[_base + _j2 + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn LatheGeometry;\n\t}(BufferGeometry);\n\n\tvar OctahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(OctahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction OctahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tvar indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'OctahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn OctahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tfunction ParametricGeometry(func, slices, stacks) {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'ParametricGeometry';\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t}; // buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar EPS = 0.00001;\n\t\tvar normal = new Vector3();\n\t\tvar p0 = new Vector3(),\n\t\t\t\tp1 = new Vector3();\n\t\tvar pu = new Vector3(),\n\t\t\t\tpv = new Vector3();\n\n\t\tif (func.length < 3) {\n\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t} // generate vertices, normals and uvs\n\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor (var i = 0; i <= stacks; i++) {\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor (var j = 0; j <= slices; j++) {\n\t\t\t\tvar u = j / slices; // vertex\n\n\t\t\t\tfunc(u, v, p0);\n\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t}\n\n\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\tuvs.push(u, v);\n\t\t\t}\n\t\t} // generate indices\n\n\n\t\tfor (var _i = 0; _i < stacks; _i++) {\n\t\t\tfor (var _j = 0; _j < slices; _j++) {\n\t\t\t\tvar a = _i * sliceCount + _j;\n\t\t\t\tvar b = _i * sliceCount + _j + 1;\n\t\t\t\tvar c = (_i + 1) * sliceCount + _j + 1;\n\t\t\t\tvar d = (_i + 1) * sliceCount + _j; // faces one and two\n\n\t\t\t\tindices.push(a, b, d);\n\t\t\t\tindices.push(b, c, d);\n\t\t\t}\n\t\t} // build geometry\n\n\n\t\tthis.setIndex(indices);\n\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t}\n\n\tParametricGeometry.prototype = Object.create(BufferGeometry.prototype);\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\tvar RingGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(RingGeometry, _BufferGeometry);\n\n\t\tfunction RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (innerRadius === void 0) {\n\t\t\t\tinnerRadius = 0.5;\n\t\t\t}\n\n\t\t\tif (outerRadius === void 0) {\n\t\t\t\touterRadius = 1;\n\t\t\t}\n\n\t\t\tif (thetaSegments === void 0) {\n\t\t\t\tthetaSegments = 8;\n\t\t\t}\n\n\t\t\tif (phiSegments === void 0) {\n\t\t\t\tphiSegments = 1;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'RingGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // some helper variables\n\n\t\t\tvar radius = innerRadius;\n\t\t\tvar radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tvar segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (var _j = 0; _j < phiSegments; _j++) {\n\t\t\t\tvar thetaSegmentLevel = _j * (thetaSegments + 1);\n\n\t\t\t\tfor (var _i = 0; _i < thetaSegments; _i++) {\n\t\t\t\t\tvar _segment = _i + thetaSegmentLevel;\n\n\t\t\t\t\tvar a = _segment;\n\t\t\t\t\tvar b = _segment + thetaSegments + 1;\n\t\t\t\t\tvar c = _segment + thetaSegments + 2;\n\t\t\t\t\tvar d = _segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn RingGeometry;\n\t}(BufferGeometry);\n\n\tvar ShapeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ShapeGeometry, _BufferGeometry);\n\n\t\tfunction ShapeGeometry(shapes, curveSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (curveSegments === void 0) {\n\t\t\t\tcurveSegments = 12;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ShapeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar groupStart = 0;\n\t\t\tvar groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\n\t\t\t\t\t_this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\t\tvar points = shape.extractPoints(curveSegments);\n\t\t\t\tvar shapeVertices = points.shape;\n\t\t\t\tvar shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (var _i = 0, l = shapeHoles.length; _i < l; _i++) {\n\t\t\t\t\tvar shapeHole = shapeHoles[_i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[_i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (var _i2 = 0, _l = shapeHoles.length; _i2 < _l; _i2++) {\n\t\t\t\t\tvar _shapeHole = shapeHoles[_i2];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(_shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (var _i3 = 0, _l2 = shapeVertices.length; _i3 < _l2; _i3++) {\n\t\t\t\t\tvar vertex = shapeVertices[_i3];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (var _i4 = 0, _l3 = faces.length; _i4 < _l3; _i4++) {\n\t\t\t\t\tvar face = faces[_i4];\n\t\t\t\t\tvar a = face[0] + indexOffset;\n\t\t\t\t\tvar b = face[1] + indexOffset;\n\t\t\t\t\tvar c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ShapeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\treturn _toJSON$1(shapes, data);\n\t\t};\n\n\t\treturn ShapeGeometry;\n\t}(BufferGeometry);\n\n\tfunction _toJSON$1(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tvar SphereGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(SphereGeometry, _BufferGeometry);\n\n\t\tfunction SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 6;\n\t\t\t}\n\n\t\t\tif (phiStart === void 0) {\n\t\t\t\tphiStart = 0;\n\t\t\t}\n\n\t\t\tif (phiLength === void 0) {\n\t\t\t\tphiLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'SphereGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tvar thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tvar index = 0;\n\t\t\tvar grid = [];\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (var iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tvar verticesRow = [];\n\t\t\t\tvar v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tvar uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (var ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tvar u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _iy = 0; _iy < heightSegments; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < widthSegments; _ix++) {\n\t\t\t\t\tvar a = grid[_iy][_ix + 1];\n\t\t\t\t\tvar b = grid[_iy][_ix];\n\t\t\t\t\tvar c = grid[_iy + 1][_ix];\n\t\t\t\t\tvar d = grid[_iy + 1][_ix + 1];\n\t\t\t\t\tif (_iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (_iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn SphereGeometry;\n\t}(BufferGeometry);\n\n\tvar TetrahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(TetrahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction TetrahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tvar indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'TetrahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TetrahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar TextGeometry = /*#__PURE__*/function (_ExtrudeGeometry) {\n\t\t_inheritsLoose(TextGeometry, _ExtrudeGeometry);\n\n\t\tfunction TextGeometry(text, parameters) {\n\t\t\tvar _this;\n\n\t\t\tif (parameters === void 0) {\n\t\t\t\tparameters = {};\n\t\t\t}\n\n\t\t\tvar font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry() || _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\tvar shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\t_this = _ExtrudeGeometry.call(this, shapes, parameters) || this;\n\t\t\t_this.type = 'TextGeometry';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TextGeometry;\n\t}(ExtrudeGeometry);\n\n\tvar TorusGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusGeometry, _BufferGeometry);\n\n\t\tfunction TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (tube === void 0) {\n\t\t\t\ttube = 0.4;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 6;\n\t\t\t}\n\n\t\t\tif (arc === void 0) {\n\t\t\t\tarc = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar center = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= radialSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= tubularSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (tubularSegments + 1) * _j + _i - 1;\n\t\t\t\t\tvar b = (tubularSegments + 1) * (_j - 1) + _i - 1;\n\t\t\t\t\tvar c = (tubularSegments + 1) * (_j - 1) + _i;\n\t\t\t\t\tvar d = (tubularSegments + 1) * _j + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusGeometry;\n\t}(BufferGeometry);\n\n\tvar TorusKnotGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusKnotGeometry, _BufferGeometry);\n\n\t\tfunction TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (tube === void 0) {\n\t\t\t\ttube = 0.4;\n\t\t\t}\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 64;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (p === void 0) {\n\t\t\t\tp = 2;\n\t\t\t}\n\n\t\t\tif (q === void 0) {\n\t\t\t\tq = 3;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusKnotGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar P1 = new Vector3();\n\t\t\tvar P2 = new Vector3();\n\t\t\tvar B = new Vector3();\n\t\t\tvar T = new Vector3();\n\t\t\tvar N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tvar u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar cx = -tube * Math.cos(v);\n\t\t\t\t\tvar cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= tubularSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= radialSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (radialSegments + 1) * (_j - 1) + (_i - 1);\n\t\t\t\t\tvar b = (radialSegments + 1) * _j + (_i - 1);\n\t\t\t\t\tvar c = (radialSegments + 1) * _j + _i;\n\t\t\t\t\tvar d = (radialSegments + 1) * (_j - 1) + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tvar cu = Math.cos(u);\n\t\t\t\tvar su = Math.sin(u);\n\t\t\t\tvar quOverP = q / p * u;\n\t\t\t\tvar cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusKnotGeometry;\n\t}(BufferGeometry);\n\n\tvar TubeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TubeGeometry, _BufferGeometry);\n\n\t\tfunction TubeGeometry(path, tubularSegments, radius, radialSegments, closed) {\n\t\t\tvar _this;\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 64;\n\t\t\t}\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (closed === void 0) {\n\t\t\t\tclosed = false;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TubeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tvar frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\t_this.tangents = frames.tangents;\n\t\t\t_this.normals = frames.normals;\n\t\t\t_this.binormals = frames.binormals; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\t\tvar P = new Vector3(); // buffer\n\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\t\tvar indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (var i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tvar N = frames.normals[i];\n\t\t\t\tvar B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar sin = Math.sin(v);\n\t\t\t\t\tvar cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (var j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (var i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tvar a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tvar b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tvar c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tvar d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = TubeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn TubeGeometry;\n\t}(BufferGeometry);\n\n\tvar WireframeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(WireframeGeometry, _BufferGeometry);\n\n\t\tfunction WireframeGeometry(geometry) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'WireframeGeometry';\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn _assertThisInitialized(_this);\n\t\t\t} // buffer\n\n\n\t\t\tvar vertices = []; // helper variables\n\n\t\t\tvar edge = [0, 0],\n\t\t\t\t\tedges = {};\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\t// indexed BufferGeometry\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar indices = geometry.index;\n\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\tgroups = [{\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t}];\n\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\tfor (var o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\tvar group = groups[o];\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor (var i = start, l = start + count; i < l; i += 3) {\n\t\t\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tvar edge1 = indices.getX(i + j);\n\t\t\t\t\t\t\tvar edge2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\t\tvar key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (var _key in edges) {\n\t\t\t\t\tvar e = edges[_key];\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index1);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index2);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\tvar _position = geometry.attributes.position;\n\n\t\t\t\tfor (var _i = 0, _l = _position.count / 3; _i < _l; _i++) {\n\t\t\t\t\tfor (var _j = 0; _j < 3; _j++) {\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\tvar index1 = 3 * _i + _j;\n\t\t\t\t\t\tvertex.fromBufferAttribute(_position, index1);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t\tvar index2 = 3 * _i + (_j + 1) % 3;\n\t\t\t\t\t\tvertex.fromBufferAttribute(_position, index2);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn WireframeGeometry;\n\t}(BufferGeometry);\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShadowMaterial';\n\t\tthis.color = new Color(0x000000);\n\t\tthis.transparent = true;\n\t\tthis.setValues(parameters);\n\t}\n\n\tShadowMaterial.prototype = Object.create(Material.prototype);\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\treturn this;\n\t};\n\n\tfunction RawShaderMaterial(parameters) {\n\t\tShaderMaterial.call(this, parameters);\n\t\tthis.type = 'RawShaderMaterial';\n\t}\n\n\tRawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.type = 'MeshStandardMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.roughnessMap = null;\n\t\tthis.metalnessMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create(Material.prototype);\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.roughnessMap = source.roughnessMap;\n\t\tthis.metalnessMap = source.metalnessMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.vertexTangents = source.vertexTangents;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial(parameters) {\n\t\tMeshStandardMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.type = 'MeshPhysicalMaterial';\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\tthis.clearcoatNormalMap = null;\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tObject.defineProperty(this, 'ior', {\n\t\t\tget: function get() {\n\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t},\n\t\t\tset: function set(ior) {\n\t\t\t\tthis.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t}\n\t\t});\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transmission = 0.0;\n\t\tthis.transmissionMap = null;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function (source) {\n\t\tMeshStandardMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif (source.sheen) {\n\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t} else {\n\t\t\tthis.sheen = null;\n\t\t}\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshPhongMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.specular = new Color(0x111111);\n\t\tthis.shininess = 30;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create(Material.prototype);\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.specular.copy(source.specular);\n\t\tthis.shininess = source.shininess;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'TOON': ''\n\t\t};\n\t\tthis.type = 'MeshToonMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.alphaMap = null;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshToonMaterial.prototype = Object.create(Material.prototype);\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshNormalMaterial';\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create(Material.prototype);\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshLambertMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create(Material.prototype);\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'MATCAP': ''\n\t\t};\n\t\tthis.type = 'MeshMatcapMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.matcap = null;\n\t\tthis.map = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.alphaMap = null;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create(Material.prototype);\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'MATCAP': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.matcap = source.matcap;\n\t\tthis.map = source.map;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial(parameters) {\n\t\tLineBasicMaterial.call(this);\n\t\tthis.type = 'LineDashedMaterial';\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\t\tthis.setValues(parameters);\n\t}\n\n\tLineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function (source) {\n\t\tLineBasicMaterial.prototype.copy.call(this, source);\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\t\treturn this;\n\t};\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tvar AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function arraySlice(array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function convertArray(array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function isTypedArray(object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function getKeyframeOrder(times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array(n);\n\n\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\tresult[i] = i;\n\t\t\t}\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function sortedArray(values, stride, order) {\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor(nValues);\n\n\t\t\tfor (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tvar srcOffset = order[i] * stride;\n\n\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function flattenJSON(jsonKeys, times, values, valuePropertyName) {\n\t\t\tvar i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tvar value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function subclip(sourceClip, name, startFrame, endFrame, fps) {\n\t\t\tif (fps === void 0) {\n\t\t\t\tfps = 30;\n\t\t\t}\n\n\t\t\tvar clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tvar track = clip.tracks[i];\n\t\t\t\tvar valueSize = track.getValueSize();\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tvar frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (var k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor (var _i = 0; _i < clip.tracks.length; ++_i) {\n\t\t\t\tif (minStartTime > clip.tracks[_i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[_i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (var _i2 = 0; _i2 < clip.tracks.length; ++_i2) {\n\t\t\t\tclip.tracks[_i2].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function makeClipAdditive(targetClip, referenceFrame, referenceClip, fps) {\n\t\t\tif (referenceFrame === void 0) {\n\t\t\t\treferenceFrame = 0;\n\t\t\t}\n\n\t\t\tif (referenceClip === void 0) {\n\t\t\t\treferenceClip = targetClip;\n\t\t\t}\n\n\t\t\tif (fps === void 0) {\n\t\t\t\tfps = 30;\n\t\t\t}\n\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tvar numTracks = referenceClip.tracks.length;\n\t\t\tvar referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tvar _loop = function _loop(i) {\n\t\t\t\tvar referenceTrack = referenceClip.tracks[i];\n\t\t\t\tvar referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') return \"continue\"; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tvar targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) return \"continue\";\n\t\t\t\tvar referenceOffset = 0;\n\t\t\t\tvar referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar targetOffset = 0;\n\t\t\t\tvar targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tvar referenceValue = void 0; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tvar startIndex = referenceOffset;\n\t\t\t\t\tvar endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tvar _startIndex = lastIndex * referenceValueSize + referenceOffset;\n\n\t\t\t\t\tvar _endIndex = _startIndex + referenceValueSize - referenceOffset;\n\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, _startIndex, _endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tvar interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tvar _startIndex2 = referenceOffset;\n\n\t\t\t\t\tvar _endIndex2 = referenceValueSize - referenceOffset;\n\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, _startIndex2, _endIndex2);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tvar referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tvar numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (var j = 0; j < numTimes; ++j) {\n\t\t\t\t\tvar valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (var k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (var i = 0; i < numTracks; ++i) {\n\t\t\t\tvar _ret = _loop(i);\n\n\t\t\t\tif (_ret === \"continue\") continue;\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tfunction Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\t}\n\n\tObject.assign(Interpolant.prototype, {\n\t\tevaluate: function evaluate(t) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (var giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tvar t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (var _giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === _giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tvar mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t},\n\t\tsettings: null,\n\t\t// optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\t\t// --- Protected interface\n\t\tDefaultSettings_: {},\n\t\tgetSettings_: function getSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t},\n\t\tcopySampleValue_: function copySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// Template methods for derived classes:\n\t\tinterpolate_: function interpolate_()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t},\n\t\tintervalChanged_: function intervalChanged_()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(Interpolant.prototype, {\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_\n\t});\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tfunction CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\t}\n\n\tCubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: CubicInterpolant,\n\t\tDefaultSettings_: {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t},\n\t\tintervalChanged_: function intervalChanged_(i1, t0, t1) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t},\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\tpp = p * p,\n\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tvar sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tvar s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\tfunction LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: LinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tfunction DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: DiscreteInterpolant,\n\t\tinterpolate_: function interpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\t});\n\n\tfunction KeyframeTrack(name, times, values, interpolation) {\n\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\tthis.name = name;\n\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t} // Static methods\n\n\n\tObject.assign(KeyframeTrack, {\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\t\ttoJSON: function toJSON(track) {\n\t\t\tvar trackType = track.constructor;\n\t\t\tvar json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== undefined) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\t});\n\tObject.assign(KeyframeTrack.prototype, {\n\t\tconstructor: KeyframeTrack,\n\t\tTimeBufferType: Float32Array,\n\t\tValueBufferType: Float32Array,\n\t\tDefaultInterpolation: InterpolateLinear,\n\t\tInterpolantFactoryMethodDiscrete: function InterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodSmooth: function InterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tsetInterpolation: function setInterpolation(interpolation) {\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tvar message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t},\n\t\tgetInterpolation: function getInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t},\n\t\tgetValueSize: function getValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t},\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function shift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function scale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function trim(startTime, endTime) {\n\t\t\tvar times = this.times,\n\t\t\t\t\tnKeys = times.length;\n\t\t\tvar from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function validate() {\n\t\t\tvar valid = true;\n\t\t\tvar valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\t\tvalues = this.values,\n\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor (var i = 0; i !== nKeys; i++) {\n\t\t\t\tvar currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (var _i = 0, n = values.length; _i !== n; ++_i) {\n\t\t\t\t\t\tvar value = values[_i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, _i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t},\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function optimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tvar writeIndex = 1;\n\n\t\t\tfor (var i = 1; i < lastIndex; ++i) {\n\t\t\t\tvar keep = false;\n\t\t\t\tvar time = times[i];\n\t\t\t\tvar timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvar value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (var _j = 0; _j !== stride; ++_j) {\n\t\t\t\t\t\t\tvalues[writeOffset + _j] = values[readOffset + _j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (var _readOffset = lastIndex * stride, _writeOffset = writeIndex * stride, _j2 = 0; _j2 !== stride; ++_j2) {\n\t\t\t\t\tvalues[_writeOffset + _j2] = values[_readOffset + _j2];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\tvar times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tvar values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tfunction BooleanKeyframeTrack(name, times, values) {\n\t\tKeyframeTrack.call(this, name, times, values);\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: BooleanKeyframeTrack,\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined // Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t});\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tfunction ColorKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: ColorKeyframeTrack,\n\t\tValueTypeName: 'color' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t});\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tfunction NumberKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: NumberKeyframeTrack,\n\t\tValueTypeName: 'number' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\n\t});\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tfunction QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: QuaternionLinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tvar offset = i1 * stride;\n\n\t\t\tfor (var end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tfunction QuaternionKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: QuaternionKeyframeTrack,\n\t\tValueTypeName: 'quaternion',\n\t\t// ValueBufferType is inherited\n\t\tDefaultInterpolation: InterpolateLinear,\n\t\tInterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t});\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tfunction StringKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: StringKeyframeTrack,\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\t});\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tfunction VectorKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: VectorKeyframeTrack,\n\t\tValueTypeName: 'vector' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\n\t});\n\n\tfunction AnimationClip(name, duration, tracks, blendMode) {\n\t\tif (duration === void 0) {\n\t\t\tduration = -1;\n\t\t}\n\n\t\tif (blendMode === void 0) {\n\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\t\tthis.uuid = MathUtils.generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\tif (this.duration < 0) {\n\t\t\tthis.resetDuration();\n\t\t}\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tvar times = [],\n\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tObject.assign(AnimationClip, {\n\t\tparse: function parse(json) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t},\n\t\ttoJSON: function toJSON(clip) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tvar json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (var i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t},\n\t\tCreateFromMorphTargetSequence: function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < numMorphTargets; i++) {\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new AnimationClip(name, -1, tracks);\n\t\t},\n\t\tfindByName: function findByName(objectOrClipArray, name) {\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\tCreateClipsFromMorphTargetSequences: function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tvar animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (var i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tvar morphTarget = morphTargets[i];\n\t\t\t\tvar parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tvar name = parts[1];\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor (var _name in animationToMorphTargets) {\n\t\t\t\tclips.push(AnimationClip.CreateFromMorphTargetSequence(_name, animationToMorphTargets[_name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t},\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\tvar fps = animation.fps || 30;\n\t\t\tvar blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tvar duration = animation.length || -1;\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (var h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tvar animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\t\t\t\t\tvar k = void 0;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (var morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor (var _m = 0; _m !== animationKeys[k].morphTargets.length; ++_m) {\n\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tvar boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\t});\n\tObject.assign(AnimationClip.prototype, {\n\t\tresetDuration: function resetDuration() {\n\t\t\tvar tracks = this.tracks;\n\t\t\tvar duration = 0;\n\n\t\t\tfor (var i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tvar track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t},\n\t\ttrim: function trim() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tvalidate: function validate() {\n\t\t\tvar valid = true;\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t},\n\t\toptimize: function optimize() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new AnimationClip(this.name, this.duration, tracks, this.blendMode);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\treturn AnimationClip.toJSON(this);\n\t\t}\n\t});\n\n\tvar Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function add(key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function get(key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function remove(key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function clear() {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tfunction LoadingManager(onLoad, onProgress, onError) {\n\t\tvar scope = this;\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function (url) {\n\t\t\titemsTotal++;\n\n\t\t\tif (isLoading === false) {\n\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tisLoading = true;\n\t\t};\n\n\t\tthis.itemEnd = function (url) {\n\t\t\titemsLoaded++;\n\n\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t}\n\n\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\tscope.onLoad();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.itemError = function (url) {\n\t\t\tif (scope.onError !== undefined) {\n\t\t\t\tscope.onError(url);\n\t\t\t}\n\t\t};\n\n\t\tthis.resolveURL = function (url) {\n\t\t\tif (urlModifier) {\n\t\t\t\treturn urlModifier(url);\n\t\t\t}\n\n\t\t\treturn url;\n\t\t};\n\n\t\tthis.setURLModifier = function (transform) {\n\t\t\turlModifier = transform;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.addHandler = function (regex, loader) {\n\t\t\thandlers.push(regex, loader);\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.removeHandler = function (regex) {\n\t\t\tvar index = handlers.indexOf(regex);\n\n\t\t\tif (index !== -1) {\n\t\t\t\thandlers.splice(index, 2);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.getHandler = function (file) {\n\t\t\tfor (var i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\tvar regex = handlers[i];\n\t\t\t\tvar loader = handlers[i + 1];\n\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\treturn loader;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\tfunction Loader(manager) {\n\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\t}\n\n\tObject.assign(Loader.prototype, {\n\t\tload: function load()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{},\n\t\tloadAsync: function loadAsync(url, onProgress) {\n\t\t\tvar scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t},\n\t\tparse: function parse()\n\t\t/* data */\n\t\t{},\n\t\tsetCrossOrigin: function setCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t},\n\t\tsetWithCredentials: function setWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetPath: function setPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t},\n\t\tsetResourcePath: function setResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t},\n\t\tsetRequestHeader: function setRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar loading = {};\n\n\tfunction FileLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFileLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FileLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tvar request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tvar mimeType = dataUriRegexResult[1];\n\t\t\t\tvar isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tvar data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tvar view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tvar response = this.response;\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (var _i = 0, il = callbacks.length; _i < il; _i++) {\n\t\t\t\t\t\t\tvar callback = callbacks[_i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (var _i2 = 0, _il = callbacks.length; _i2 < _il; _i2++) {\n\t\t\t\t\t\t\tvar _callback = callbacks[_i2];\n\t\t\t\t\t\t\tif (_callback.onError) _callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\n\t\t\t\t\tfor (var _i3 = 0, il = callbacks.length; _i3 < il; _i3++) {\n\t\t\t\t\t\tvar callback = callbacks[_i3];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i4 = 0, il = callbacks.length; _i4 < il; _i4++) {\n\t\t\t\t\t\tvar callback = callbacks[_i4];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i5 = 0, il = callbacks.length; _i5 < il; _i5++) {\n\t\t\t\t\t\tvar callback = callbacks[_i5];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (var header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t},\n\t\tsetResponseType: function setResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetMimeType: function setMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction AnimationLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tAnimationLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: AnimationLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar animations = [];\n\n\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\tvar clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\t});\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CompressedTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar images = [];\n\t\t\tvar texture = new CompressedTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (var i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (var f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (var _i = 0; _i < texDatas.mipmapCount; _i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + _i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction ImageLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tImageLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\t});\n\n\tfunction CubeTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CubeTextureLoader,\n\t\tload: function load(urls, onLoad, onProgress, onError) {\n\t\t\tvar texture = new CubeTexture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tDataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: DataTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar texture = new DataTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tvar texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction TextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: TextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar texture = new Texture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tvar isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tfunction Curve() {\n\t\tthis.type = 'Curve';\n\t\tthis.arcLengthDivisions = 200;\n\t}\n\n\tObject.assign(Curve.prototype, {\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\t\tgetPoint: function getPoint()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t},\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\t\tgetPointAt: function getPointAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t},\n\t\t// Get sequence of points using getPoint( t )\n\t\tgetPoints: function getPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 5;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get sequence of points using getPointAt( u )\n\t\tgetSpacedPoints: function getSpacedPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 5;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get total curve arc length\n\t\tgetLength: function getLength() {\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t},\n\t\t// Get list of cumulative segment lengths\n\t\tgetLengths: function getLengths(divisions) {\n\t\t\tif (divisions === undefined) divisions = this.arcLengthDivisions;\n\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tvar cache = [];\n\t\t\tvar current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tvar sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (var p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t},\n\t\tupdateArcLengths: function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t},\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\tgetUtoTmapping: function getUtoTmapping(u, distance) {\n\t\t\tvar arcLengths = this.getLengths();\n\t\t\tvar i = 0;\n\t\t\tvar il = arcLengths.length;\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tvar low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tvar lengthBefore = arcLengths[i];\n\t\t\tvar lengthAfter = arcLengths[i + 1];\n\t\t\tvar segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tvar t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t},\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\t\tgetTangent: function getTangent(t, optionalTarget) {\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tvar pt1 = this.getPoint(t1);\n\t\t\tvar pt2 = this.getPoint(t2);\n\t\t\tvar tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t},\n\t\tgetTangentAt: function getTangentAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t},\n\t\tcomputeFrenetFrames: function computeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tvar normal = new Vector3();\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs(tangents[0].x);\n\t\t\tvar ty = Math.abs(tangents[0].y);\n\t\t\tvar tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tnormals[_i] = normals[_i - 1].clone();\n\t\t\t\tbinormals[_i] = binormals[_i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[_i - 1], tangents[_i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tvar theta = Math.acos(MathUtils.clamp(tangents[_i - 1].dot(tangents[_i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[_i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[_i].crossVectors(tangents[_i], normals[_i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tvar _theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));\n\n\t\t\t\t_theta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\t_theta = -_theta;\n\t\t\t\t}\n\n\t\t\t\tfor (var _i2 = 1; _i2 <= segments; _i2++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[_i2].applyMatrix4(mat.makeRotationAxis(tangents[_i2], _theta * _i2));\n\n\t\t\t\t\tbinormals[_i2].crossVectors(tangents[_i2], normals[_i2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\tCurve.call(this);\n\t\tthis.type = 'EllipseCurve';\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\t\tthis.aClockwise = aClockwise || false;\n\t\tthis.aRotation = aRotation || 0;\n\t}\n\n\tEllipseCurve.prototype = Object.create(Curve.prototype);\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector2();\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\twhile (deltaAngle < 0) {\n\t\t\tdeltaAngle += twoPi;\n\t\t}\n\n\t\twhile (deltaAngle > twoPi) {\n\t\t\tdeltaAngle -= twoPi;\n\t\t}\n\n\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\tif (samePoints) {\n\t\t\t\tdeltaAngle = 0;\n\t\t\t} else {\n\t\t\t\tdeltaAngle = twoPi;\n\t\t\t}\n\t\t}\n\n\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t} else {\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t}\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos(angle);\n\t\tvar y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\tif (this.aRotation !== 0) {\n\t\t\tvar cos = Math.cos(this.aRotation);\n\t\t\tvar sin = Math.sin(this.aRotation);\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t}\n\n\t\treturn point.set(x, y);\n\t};\n\n\tEllipseCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\t\tthis.aClockwise = source.aClockwise;\n\t\tthis.aRotation = source.aRotation;\n\t\treturn this;\n\t};\n\n\tEllipseCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\t\tdata.aClockwise = this.aClockwise;\n\t\tdata.aRotation = this.aRotation;\n\t\treturn data;\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\t\tthis.aClockwise = json.aClockwise;\n\t\tthis.aRotation = json.aRotation;\n\t\treturn this;\n\t};\n\n\tfunction ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\tEllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\tthis.type = 'ArcCurve';\n\t}\n\n\tArcCurve.prototype = Object.create(EllipseCurve.prototype);\n\tArcCurve.prototype.constructor = ArcCurve;\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tvar c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function initCatmullRom(x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function initNonuniformCatmullRom(x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tvar t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function calc(t) {\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(),\n\t\t\tpy = new CubicPoly(),\n\t\t\tpz = new CubicPoly();\n\n\tfunction CatmullRomCurve3(points, closed, curveType, tension) {\n\t\tif (points === void 0) {\n\t\t\tpoints = [];\n\t\t}\n\n\t\tif (closed === void 0) {\n\t\t\tclosed = false;\n\t\t}\n\n\t\tif (curveType === void 0) {\n\t\t\tcurveType = 'centripetal';\n\t\t}\n\n\t\tif (tension === void 0) {\n\t\t\ttension = 0.5;\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'CatmullRomCurve3';\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create(Curve.prototype);\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\t\tvar p = (l - (this.closed ? 0 : 1)) * t;\n\t\tvar intPoint = Math.floor(p);\n\t\tvar weight = p - intPoint;\n\n\t\tif (this.closed) {\n\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\t\t}\n\n\t\tvar p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif (this.closed || intPoint > 0) {\n\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t} else {\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\tp0 = tmp;\n\t\t}\n\n\t\tvar p1 = points[intPoint % l];\n\t\tvar p2 = points[(intPoint + 1) % l];\n\n\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t} else {\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\tp3 = tmp;\n\t\t}\n\n\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\tvar dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\tvar dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t}\n\n\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\treturn point;\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\tvar point = source.points[i];\n\t\t\tthis.points.push(point.clone());\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\t\treturn this;\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.points = [];\n\n\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\tvar point = this.points[i];\n\t\t\tdata.points.push(point.toArray());\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\t\treturn data;\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\tvar point = json.points[i];\n\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tvar v0 = (p2 - p0) * 0.5;\n\t\tvar v1 = (p3 - p1) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tfunction CubicBezierCurve(v0, v1, v2, v3) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector2();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector2();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector2();\n\t\t}\n\n\t\tif (v3 === void 0) {\n\t\t\tv3 = new Vector2();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'CubicBezierCurve';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\t}\n\n\tCubicBezierCurve.prototype = Object.create(Curve.prototype);\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2,\n\t\t\t\tv3 = this.v3;\n\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\treturn point;\n\t};\n\n\tCubicBezierCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\tthis.v3.copy(source.v3);\n\t\treturn this;\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\t\treturn data;\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\tthis.v3.fromArray(json.v3);\n\t\treturn this;\n\t};\n\n\tfunction CubicBezierCurve3(v0, v1, v2, v3) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector3();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector3();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector3();\n\t\t}\n\n\t\tif (v3 === void 0) {\n\t\t\tv3 = new Vector3();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'CubicBezierCurve3';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create(Curve.prototype);\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2,\n\t\t\t\tv3 = this.v3;\n\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\treturn point;\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\tthis.v3.copy(source.v3);\n\t\treturn this;\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\t\treturn data;\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\tthis.v3.fromArray(json.v3);\n\t\treturn this;\n\t};\n\n\tfunction LineCurve(v1, v2) {\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector2();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector2();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'LineCurve';\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tLineCurve.prototype = Object.create(Curve.prototype);\n\tLineCurve.prototype.constructor = LineCurve;\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\n\t\tif (t === 1) {\n\t\t\tpoint.copy(this.v2);\n\t\t} else {\n\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t}\n\n\t\treturn point;\n\t}; // Line curve is linear, so we can overwrite default getPointAt\n\n\n\tLineCurve.prototype.getPointAt = function (u, optionalTarget) {\n\t\treturn this.getPoint(u, optionalTarget);\n\t};\n\n\tLineCurve.prototype.getTangent = function (t, optionalTarget) {\n\t\tvar tangent = optionalTarget || new Vector2();\n\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\treturn tangent;\n\t};\n\n\tLineCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tLineCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction LineCurve3(v1, v2) {\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector3();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector3();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'LineCurve3';\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tLineCurve3.prototype = Object.create(Curve.prototype);\n\tLineCurve3.prototype.constructor = LineCurve3;\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\n\t\tif (t === 1) {\n\t\t\tpoint.copy(this.v2);\n\t\t} else {\n\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t}\n\n\t\treturn point;\n\t}; // Line curve is linear, so we can overwrite default getPointAt\n\n\n\tLineCurve3.prototype.getPointAt = function (u, optionalTarget) {\n\t\treturn this.getPoint(u, optionalTarget);\n\t};\n\n\tLineCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tLineCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction QuadraticBezierCurve(v0, v1, v2) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector2();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector2();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector2();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'QuadraticBezierCurve';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create(Curve.prototype);\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2;\n\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\treturn point;\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction QuadraticBezierCurve3(v0, v1, v2) {\n\t\tif (v0 === void 0) {\n\t\t\tv0 = new Vector3();\n\t\t}\n\n\t\tif (v1 === void 0) {\n\t\t\tv1 = new Vector3();\n\t\t}\n\n\t\tif (v2 === void 0) {\n\t\t\tv2 = new Vector3();\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'QuadraticBezierCurve3';\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create(Curve.prototype);\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector3();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2;\n\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\treturn point;\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction SplineCurve(points) {\n\t\tif (points === void 0) {\n\t\t\tpoints = [];\n\t\t}\n\n\t\tCurve.call(this);\n\t\tthis.type = 'SplineCurve';\n\t\tthis.points = points;\n\t}\n\n\tSplineCurve.prototype = Object.create(Curve.prototype);\n\tSplineCurve.prototype.constructor = SplineCurve;\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tif (optionalTarget === void 0) {\n\t\t\toptionalTarget = new Vector2();\n\t\t}\n\n\t\tvar point = optionalTarget;\n\t\tvar points = this.points;\n\t\tvar p = (points.length - 1) * t;\n\t\tvar intPoint = Math.floor(p);\n\t\tvar weight = p - intPoint;\n\t\tvar p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\tvar p1 = points[intPoint];\n\t\tvar p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\tvar p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\treturn point;\n\t};\n\n\tSplineCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\tvar point = source.points[i];\n\t\t\tthis.points.push(point.clone());\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.points = [];\n\n\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\tvar point = this.points[i];\n\t\t\tdata.points.push(point.toArray());\n\t\t}\n\n\t\treturn data;\n\t};\n\n\tSplineCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\tvar point = json.points[i];\n\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\t\tCurve.call(this);\n\t\tthis.type = 'CurvePath';\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\t}\n\n\tCurvePath.prototype = Object.assign(Object.create(Curve.prototype), {\n\t\tconstructor: CurvePath,\n\t\tadd: function add(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t},\n\t\tclosePath: function closePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[0].getPoint(0);\n\t\t\tvar endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t},\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\t\tgetPoint: function getPoint(t) {\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tvar diff = curveLengths[i] - d;\n\t\t\t\t\tvar curve = this.curves[i];\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t},\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\t\tgetLength: function getLength() {\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t},\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t},\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\tgetCurveLengths: function getCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tvar lengths = [];\n\t\t\tvar sums = 0;\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t},\n\t\tgetSpacedPoints: function getSpacedPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 40;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\tgetPoints: function getPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 12;\n\t\t\t}\n\n\t\t\tvar points = [];\n\t\t\tvar last;\n\n\t\t\tfor (var i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tvar curve = curves[i];\n\t\t\t\tvar resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tvar pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (var j = 0; j < pts.length; j++) {\n\t\t\t\t\tvar point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tCurve.prototype.copy.call(this, source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tvar curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tvar curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tCurve.prototype.fromJSON.call(this, json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tvar curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Path(points) {\n\t\tCurvePath.call(this);\n\t\tthis.type = 'Path';\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif (points) {\n\t\t\tthis.setFromPoints(points);\n\t\t}\n\t}\n\n\tPath.prototype = Object.assign(Object.create(CurvePath.prototype), {\n\t\tconstructor: Path,\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (var i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tmoveTo: function moveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t},\n\t\tlineTo: function lineTo(x, y) {\n\t\t\tvar curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tquadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tvar curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tbezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tvar curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tsplineThru: function splineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tvar npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tvar curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t},\n\t\tarc: function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t},\n\t\tabsarc: function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t},\n\t\tellipse: function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t},\n\t\tabsellipse: function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tvar lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tCurvePath.prototype.copy.call(this, source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = CurvePath.prototype.toJSON.call(this);\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tCurvePath.prototype.fromJSON.call(this, json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Shape(points) {\n\t\tPath.call(this, points);\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.type = 'Shape';\n\t\tthis.holes = [];\n\t}\n\n\tShape.prototype = Object.assign(Object.create(Path.prototype), {\n\t\tconstructor: Shape,\n\t\tgetPointsHoles: function getPointsHoles(divisions) {\n\t\t\tvar holesPts = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t},\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\t\textractPoints: function extractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tPath.prototype.copy.call(this, source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tvar hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = Path.prototype.toJSON.call(this);\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tvar hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tPath.prototype.fromJSON.call(this, json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tvar hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Light(color, intensity) {\n\t\tif (intensity === void 0) {\n\t\t\tintensity = 1;\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Light';\n\t\tthis.color = new Color(color);\n\t\tthis.intensity = intensity;\n\t}\n\n\tLight.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Light,\n\t\tisLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction HemisphereLight(skyColor, groundColor, intensity) {\n\t\tLight.call(this, skyColor, intensity);\n\t\tthis.type = 'HemisphereLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.groundColor = new Color(groundColor);\n\t}\n\n\tHemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: HemisphereLight,\n\t\tisHemisphereLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction LightShadow(camera) {\n\t\tthis.camera = camera;\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.mapSize = new Vector2(512, 512);\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2(1, 1);\n\t\tthis._viewportCount = 1;\n\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t}\n\n\tObject.assign(LightShadow.prototype, {\n\t\t_projScreenMatrix: new Matrix4(),\n\t\t_lightPositionWorld: new Vector3(),\n\t\t_lookTarget: new Vector3(),\n\t\tgetViewportCount: function getViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t},\n\t\tgetFrustum: function getFrustum() {\n\t\t\treturn this._frustum;\n\t\t},\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\t\t\tlightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\t\t\tshadowCamera.position.copy(lightPositionWorld);\n\t\t\tlookTarget.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\tshadowCamera.lookAt(lookTarget);\n\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\tprojScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(projScreenMatrix);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t},\n\t\tgetViewport: function getViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t},\n\t\tgetFrameExtents: function getFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\t});\n\n\tfunction SpotLightShadow() {\n\t\tLightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));\n\t\tthis.focus = 1;\n\t}\n\n\tSpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: SpotLightShadow,\n\t\tisSpotLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tvar camera = this.camera;\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call(this, light);\n\t\t}\n\t});\n\n\tfunction SpotLight(color, intensity, distance, angle, penumbra, decay) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'SpotLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.target = new Object3D();\n\t\tObject.defineProperty(this, 'power', {\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t});\n\t\tthis.distance = distance !== undefined ? distance : 0;\n\t\tthis.angle = angle !== undefined ? angle : Math.PI / 3;\n\t\tthis.penumbra = penumbra !== undefined ? penumbra : 0;\n\t\tthis.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\t}\n\n\tSpotLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: SpotLight,\n\t\tisSpotLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction PointLightShadow() {\n\t\tLightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500));\n\t\tthis._frameExtents = new Vector2(4, 2);\n\t\tthis._viewportCount = 6;\n\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t// following orientation:\n\t\t//\n\t\t//\txzXZ\n\t\t//\t y Y\n\t\t//\n\t\t// X - Positive x direction\n\t\t// x - Negative x direction\n\t\t// Y - Positive y direction\n\t\t// y - Negative y direction\n\t\t// Z - Positive z direction\n\t\t// z - Negative z direction\n\t\t// positive X\n\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\tnew Vector4(1, 0, 1, 1)];\n\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t}\n\n\tPointLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: PointLightShadow,\n\t\tisPointLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light, viewportIndex) {\n\t\t\tif (viewportIndex === void 0) {\n\t\t\t\tviewportIndex = 0;\n\t\t\t}\n\n\t\t\tvar camera = this.camera,\n\t\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\t\t\tlightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\t\t\tcamera.position.copy(lightPositionWorld);\n\t\t\tlookTarget.copy(camera.position);\n\t\t\tlookTarget.add(this._cubeDirections[viewportIndex]);\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-lightPositionWorld.x, -lightPositionWorld.y, -lightPositionWorld.z);\n\t\t\tprojScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(projScreenMatrix);\n\t\t}\n\t});\n\n\tfunction PointLight(color, intensity, distance, decay) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'PointLight';\n\t\tObject.defineProperty(this, 'power', {\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t\t}\n\t\t});\n\t\tthis.distance = distance !== undefined ? distance : 0;\n\t\tthis.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\t}\n\n\tPointLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: PointLight,\n\t\tisPointLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction OrthographicCamera(left, right, top, bottom, near, far) {\n\t\tif (left === void 0) {\n\t\t\tleft = -1;\n\t\t}\n\n\t\tif (right === void 0) {\n\t\t\tright = 1;\n\t\t}\n\n\t\tif (top === void 0) {\n\t\t\ttop = 1;\n\t\t}\n\n\t\tif (bottom === void 0) {\n\t\t\tbottom = -1;\n\t\t}\n\n\t\tif (near === void 0) {\n\t\t\tnear = 0.1;\n\t\t}\n\n\t\tif (far === void 0) {\n\t\t\tfar = 2000;\n\t\t}\n\n\t\tCamera.call(this);\n\t\tthis.type = 'OrthographicCamera';\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tOrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: OrthographicCamera,\n\t\tisOrthographicCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t},\n\t\tsetViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function updateProjectionMatrix() {\n\t\t\tvar dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tvar dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tvar cx = (this.right + this.left) / 2;\n\t\t\tvar cy = (this.top + this.bottom) / 2;\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction DirectionalLightShadow() {\n\t\tLightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: DirectionalLightShadow,\n\t\tisDirectionalLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tLightShadow.prototype.updateMatrices.call(this, light);\n\t\t}\n\t});\n\n\tfunction DirectionalLight(color, intensity) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'DirectionalLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.target = new Object3D();\n\t\tthis.shadow = new DirectionalLightShadow();\n\t}\n\n\tDirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: DirectionalLight,\n\t\tisDirectionalLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction AmbientLight(color, intensity) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'AmbientLight';\n\t}\n\n\tAmbientLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: AmbientLight,\n\t\tisAmbientLight: true\n\t});\n\n\tfunction RectAreaLight(color, intensity, width, height) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'RectAreaLight';\n\t\tthis.width = width !== undefined ? width : 10;\n\t\tthis.height = height !== undefined ? height : 10;\n\t}\n\n\tRectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: RectAreaLight,\n\t\tisRectAreaLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Light.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tvar SphericalHarmonics3 = /*#__PURE__*/function () {\n\t\tfunction SphericalHarmonics3() {\n\t\t\tObject.defineProperty(this, 'isSphericalHarmonics3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = SphericalHarmonics3.prototype;\n\n\t\t_proto.set = function set(coefficients) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.zero = function zero() {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\t;\n\n\t\t_proto.getAt = function getAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\t;\n\n\t\t_proto.getIrradianceAt = function getIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.add = function add(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledSH = function addScaledSH(sh, s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(sh, alpha) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.copy = function copy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\t;\n\n\t\tSphericalHarmonics3.getBasisAt = function getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t};\n\n\t\treturn SphericalHarmonics3;\n\t}();\n\n\tfunction LightProbe(sh, intensity) {\n\t\tLight.call(this, undefined, intensity);\n\t\tthis.type = 'LightProbe';\n\t\tthis.sh = sh !== undefined ? sh : new SphericalHarmonics3();\n\t}\n\n\tLightProbe.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: LightProbe,\n\t\tisLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Light.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction MaterialLoader(manager) {\n\t\tLoader.call(this, manager);\n\t\tthis.textures = {};\n\t}\n\n\tMaterialLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: MaterialLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tvar material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.skinning !== undefined) material.skinning = json.skinning;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (var name in json.uniforms) {\n\t\t\t\t\tvar uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (var key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\treturn material;\n\t\t},\n\t\tsetTextures: function setTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar LoaderUtils = {\n\t\tdecodeText: function decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tvar s = '';\n\n\t\t\tfor (var i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t},\n\t\textractUrlBase: function extractUrlBase(url) {\n\t\t\tvar index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\t};\n\n\tfunction InstancedBufferGeometry() {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {\n\t\tconstructor: InstancedBufferGeometry,\n\t\tisInstancedBufferGeometry: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferGeometry.prototype.copy.call(this, source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {\n\t\tif (typeof normalized === 'number') {\n\t\t\tmeshPerAttribute = normalized;\n\t\t\tnormalized = false;\n\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t}\n\n\t\tBufferAttribute.call(this, array, itemSize, normalized);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {\n\t\tconstructor: InstancedBufferAttribute,\n\t\tisInstancedBufferAttribute: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferAttribute.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call(this);\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction BufferGeometryLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: BufferGeometryLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar interleavedBufferMap = {};\n\t\t\tvar arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tvar interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tvar interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tvar buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tvar array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tvar ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tvar arrayBuffers = json.arrayBuffers;\n\t\t\t\tvar arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tvar ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tvar index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar bufferAttribute = void 0;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tvar interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tvar _typedArray = getTypedArray(attribute.type, attribute.array);\n\n\t\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(_typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (var _key in morphAttributes) {\n\t\t\t\t\tvar attributeArray = morphAttributes[_key];\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tvar _attribute = attributeArray[i];\n\n\t\t\t\t\t\tvar _bufferAttribute = void 0;\n\n\t\t\t\t\t\tif (_attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar _interleavedBuffer = getInterleavedBuffer(json.data, _attribute.data);\n\n\t\t\t\t\t\t\t_bufferAttribute = new InterleavedBufferAttribute(_interleavedBuffer, _attribute.itemSize, _attribute.offset, _attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _typedArray2 = getTypedArray(_attribute.type, _attribute.array);\n\n\t\t\t\t\t\t\t_bufferAttribute = new BufferAttribute(_typedArray2, _attribute.itemSize, _attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (_attribute.name !== undefined) _bufferAttribute.name = _attribute.name;\n\t\t\t\t\t\tarray.push(_bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[_key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (var _i = 0, n = groups.length; _i !== n; ++_i) {\n\t\t\t\t\tvar group = groups[_i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\t});\n\n\tvar ObjectLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(ObjectLoader, _Loader);\n\n\t\tfunction ObjectLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = ObjectLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json, onLoad) {\n\t\t\tvar animations = this.parseAnimations(json.animations);\n\t\t\tvar shapes = this.parseShapes(json.shapes);\n\t\t\tvar geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tvar images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tvar textures = this.parseTextures(json.textures, images);\n\t\t\tvar materials = this.parseMaterials(json.materials, textures);\n\t\t\tvar object = this.parseObject(json.object, geometries, materials, animations);\n\t\t\tvar skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tvar hasImages = false;\n\n\t\t\t\tfor (var uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.parseShapes = function parseShapes(json) {\n\t\t\tvar shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\t_proto.parseSkeletons = function parseSkeletons(json, object) {\n\t\t\tvar skeletons = {};\n\t\t\tvar bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t};\n\n\t\t_proto.parseGeometries = function parseGeometries(json, shapes) {\n\t\t\tvar geometries = {};\n\t\t\tvar geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar geometry = void 0;\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tvar shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var _j = 0, _jl = data.shapes.length; _j < _jl; _j++) {\n\t\t\t\t\t\t\t\tvar _shape = shapes[data.shapes[_j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(_shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t};\n\n\t\t_proto.parseMaterials = function parseMaterials(json, textures) {\n\t\t\tvar cache = {}; // MultiMaterial\n\n\t\t\tvar materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tvar material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t};\n\n\t\t_proto.parseAnimations = function parseAnimations(json) {\n\t\t\tvar animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\t\tvar data = json[i];\n\t\t\t\t\tvar clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t};\n\n\t\t_proto.parseImages = function parseImages(json, onLoad) {\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\t\t\tvar loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tvar url = image;\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tvar manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (var i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tvar image = json[i];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (var j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tvar currentUrl = url[j];\n\t\t\t\t\t\t\tvar deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tvar _deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (_deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = _deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t};\n\n\t\t_proto.parseTextures = function parseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = void 0;\n\t\t\t\t\tvar image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t};\n\n\t\t_proto.parseObject = function parseObject(data, geometries, materials, animations) {\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tvar uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tvar geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tvar objectAnimations = data.animations;\n\n\t\t\t\tfor (var _i = 0; _i < objectAnimations.length; _i++) {\n\t\t\t\t\tvar uuid = objectAnimations[_i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor (var l = 0; l < levels.length; l++) {\n\t\t\t\t\tvar level = levels[l];\n\t\t\t\t\tvar child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.bindSkeletons = function bindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tvar skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\t\t;\n\n\t\t_proto.setTexturePath = function setTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t};\n\n\t\treturn ObjectLoader;\n\t}(Loader);\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tfunction ImageBitmapLoader(manager) {\n\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t}\n\n\t\tif (typeof fetch === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t}\n\n\t\tLoader.call(this, manager);\n\t\tthis.options = {\n\t\t\tpremultiplyAlpha: 'none'\n\t\t};\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageBitmapLoader,\n\t\tisImageBitmapLoader: true,\n\t\tsetOptions: function setOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t},\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, scope.options);\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\t});\n\n\tfunction ShapePath() {\n\t\tthis.type = 'ShapePath';\n\t\tthis.color = new Color();\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\t}\n\n\tObject.assign(ShapePath.prototype, {\n\t\tmoveTo: function moveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tlineTo: function lineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tquadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tbezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tsplineThru: function splineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t},\n\t\ttoShapes: function toShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor (var i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tvar _tmpPath = inSubpaths[i];\n\n\t\t\t\t\tvar _tmpShape = new Shape();\n\n\t\t\t\t\t_tmpShape.curves = _tmpPath.curves;\n\t\t\t\t\tshapes.push(_tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tvar polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tvar inside = false;\n\n\t\t\t\tfor (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tvar edgeLowPt = inPolygon[p];\n\t\t\t\t\tvar edgeHighPt = inPolygon[q];\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tvar solid, tmpPath, tmpShape;\n\t\t\tvar shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tvar holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (var i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var _sIdx = 0, _sLen = newShapes.length; _sIdx < _sLen; _sIdx++) {\n\t\t\t\t\tvar sho = newShapeHoles[_sIdx];\n\n\t\t\t\t\tfor (var hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tvar ho = sho[hIdx];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (_sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: _sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[_sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor (var _i = 0, il = newShapes.length; _i < il; _i++) {\n\t\t\t\ttmpShape = newShapes[_i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[_i];\n\n\t\t\t\tfor (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\t});\n\n\tvar Font = /*#__PURE__*/function () {\n\t\tfunction Font(data) {\n\t\t\tObject.defineProperty(this, 'isFont', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.type = 'Font';\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tvar _proto = Font.prototype;\n\n\t\t_proto.generateShapes = function generateShapes(text, size) {\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 100;\n\t\t\t}\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths(text, size, this.data);\n\n\t\t\tfor (var p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\treturn Font;\n\t}();\n\n\tfunction createPaths(text, size, data) {\n\t\tvar chars = Array.from ? Array.from(text) : String(text).split(''); // workaround for IE11, see #13988\n\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tvar paths = [];\n\t\tvar offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (var i = 0; i < chars.length; i++) {\n\t\t\tvar char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tvar ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tvar glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tvar path = new ShapePath();\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tvar outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (var i = 0, l = outline.length; i < l;) {\n\t\t\t\tvar action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tfunction FontLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFontLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FontLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\treturn new Font(json);\n\t\t}\n\t});\n\n\tvar _context;\n\n\tvar AudioContext = {\n\t\tgetContext: function getContext() {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function setContext(value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tfunction AudioLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tAudioLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: AudioLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tvar bufferCopy = buffer.slice(0);\n\t\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\t});\n\n\tfunction HemisphereLightProbe(skyColor, groundColor, intensity) {\n\t\tLightProbe.call(this, undefined, intensity);\n\t\tvar color1 = new Color().set(skyColor);\n\t\tvar color2 = new Color().set(groundColor);\n\t\tvar sky = new Vector3(color1.r, color1.g, color1.b);\n\t\tvar ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\tvar c0 = Math.sqrt(Math.PI);\n\t\tvar c1 = c0 * Math.sqrt(0.75);\n\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {\n\t\tconstructor: HemisphereLightProbe,\n\t\tisHemisphereLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\t// modifying colors not currently supported\n\t\t\tLightProbe.prototype.copy.call(this, source);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = LightProbe.prototype.toJSON.call(this, meta); // data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction AmbientLightProbe(color, intensity) {\n\t\tLightProbe.call(this, undefined, intensity);\n\t\tvar color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {\n\t\tconstructor: AmbientLightProbe,\n\t\tisAmbientLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\t// modifying color not currently supported\n\t\t\tLightProbe.prototype.copy.call(this, source);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = LightProbe.prototype.toJSON.call(this, meta); // data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar _eyeRight = new Matrix4();\n\n\tvar _eyeLeft = new Matrix4();\n\n\tfunction StereoCamera() {\n\t\tthis.type = 'StereoCamera';\n\t\tthis.aspect = 1;\n\t\tthis.eyeSep = 0.064;\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable(1);\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable(2);\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\t}\n\n\tObject.assign(StereoCamera.prototype, {\n\t\tupdate: function update(camera) {\n\t\t\tvar cache = this._cache;\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tvar xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\t});\n\n\tvar Clock = /*#__PURE__*/function () {\n\t\tfunction Clock(autoStart) {\n\t\t\tthis.autoStart = autoStart !== undefined ? autoStart : true;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tvar _proto = Clock.prototype;\n\n\t\t_proto.start = function start() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t};\n\n\t\t_proto.getElapsedTime = function getElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t};\n\n\t\t_proto.getDelta = function getDelta() {\n\t\t\tvar diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tvar newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t};\n\n\t\treturn Clock;\n\t}();\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tvar _position$2 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$1 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation = /*@__PURE__*/new Vector3();\n\n\tvar AudioListener = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(AudioListener, _Object3D);\n\n\t\tfunction AudioListener() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'AudioListener';\n\t\t\t_this.context = AudioContext.getContext();\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(_this.context.destination);\n\n\t\t\t_this.filter = null;\n\t\t\t_this.timeDelta = 0; // private\n\n\t\t\t_this._clock = new Clock();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = AudioListener.prototype;\n\n\t\t_proto.getInput = function getInput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.removeFilter = function removeFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.filter;\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMasterVolume = function getMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setMasterVolume = function setMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Object3D.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$2, _quaternion$3, _scale$1);\n\n\t\t\t_orientation.set(0, 0, -1).applyQuaternion(_quaternion$3);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$2.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$2.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$2.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$2.x, _position$2.y, _position$2.z);\n\t\t\t\tlistener.setOrientation(_orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t};\n\n\t\treturn AudioListener;\n\t}(Object3D);\n\n\tvar Audio = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Audio, _Object3D);\n\n\t\tfunction Audio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Audio';\n\t\t\t_this.listener = listener;\n\t\t\t_this.context = listener.context;\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(listener.getInput());\n\n\t\t\t_this.autoplay = false;\n\t\t\t_this.buffer = null;\n\t\t\t_this.detune = 0;\n\t\t\t_this.loop = false;\n\t\t\t_this.loopStart = 0;\n\t\t\t_this.loopEnd = 0;\n\t\t\t_this.offset = 0;\n\t\t\t_this.duration = undefined;\n\t\t\t_this.playbackRate = 1;\n\t\t\t_this.isPlaying = false;\n\t\t\t_this.hasPlaybackControl = true;\n\t\t\t_this.source = null;\n\t\t\t_this.sourceType = 'empty';\n\t\t\t_this._startedAt = 0;\n\t\t\t_this._progress = 0;\n\t\t\t_this._connected = false;\n\t\t\t_this.filters = [];\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Audio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.setNodeSource = function setNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaElementSource = function setMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaStreamSource = function setMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setBuffer = function setBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.play = function play(delay) {\n\t\t\tif (delay === void 0) {\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t};\n\n\t\t_proto.pause = function pause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.connect = function connect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.disconnect = function disconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilters = function getFilters() {\n\t\t\treturn this.filters;\n\t\t};\n\n\t\t_proto.setFilters = function setFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDetune = function setDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDetune = function getDetune() {\n\t\t\treturn this.detune;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t};\n\n\t\t_proto.setPlaybackRate = function setPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getPlaybackRate = function getPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t};\n\n\t\t_proto.onEnded = function onEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t};\n\n\t\t_proto.getLoop = function getLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopStart = function setLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopEnd = function setLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getVolume = function getVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setVolume = function setVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Audio;\n\t}(Object3D);\n\n\tvar _position$3 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$2 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tvar PositionalAudio = /*#__PURE__*/function (_Audio) {\n\t\t_inheritsLoose(PositionalAudio, _Audio);\n\n\t\tfunction PositionalAudio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Audio.call(this, listener) || this;\n\t\t\t_this.panner = _this.context.createPanner();\n\t\t\t_this.panner.panningModel = 'HRTF';\n\n\t\t\t_this.panner.connect(_this.gain);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PositionalAudio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.panner;\n\t\t};\n\n\t\t_proto.getRefDistance = function getRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t};\n\n\t\t_proto.setRefDistance = function setRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getRolloffFactor = function getRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t};\n\n\t\t_proto.setRolloffFactor = function setRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDistanceModel = function getDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t};\n\n\t\t_proto.setDistanceModel = function setDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxDistance = function getMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t};\n\n\t\t_proto.setMaxDistance = function setMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDirectionalCone = function setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Audio.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$4, _scale$2);\n\n\t\t\t_orientation$1.set(0, 0, 1).applyQuaternion(_quaternion$4);\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position$3.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position$3.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position$3.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position$3.x, _position$3.y, _position$3.z);\n\t\t\t\tpanner.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z);\n\t\t\t}\n\t\t};\n\n\t\treturn PositionalAudio;\n\t}(Audio);\n\n\tvar AudioAnalyser = /*#__PURE__*/function () {\n\t\tfunction AudioAnalyser(audio, fftSize) {\n\t\t\tif (fftSize === void 0) {\n\t\t\t\tfftSize = 2048;\n\t\t\t}\n\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tvar _proto = AudioAnalyser.prototype;\n\n\t\t_proto.getFrequencyData = function getFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t};\n\n\t\t_proto.getAverageFrequency = function getAverageFrequency() {\n\t\t\tvar value = 0;\n\t\t\tvar data = this.getFrequencyData();\n\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t};\n\n\t\treturn AudioAnalyser;\n\t}();\n\n\tfunction PropertyMixer(binding, typeName, valueSize) {\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\t\tvar mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch (typeName) {\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\t}\n\n\tObject.assign(PropertyMixer.prototype, {\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function accumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tvar currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t},\n\t\t// accumulate data in the 'incoming' region into 'add'\n\t\taccumulateAdditive: function accumulateAdditive(weight) {\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t},\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function apply(accuIndex) {\n\t\t\tvar stride = this.valueSize,\n\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tvar originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (var i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function saveOriginalState() {\n\t\t\tvar binding = this.binding;\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (var i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t},\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function restoreOriginalState() {\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t},\n\t\t_setAdditiveIdentityNumeric: function _setAdditiveIdentityNumeric() {\n\t\t\tvar startIndex = this._addIndex * this.valueSize;\n\t\t\tvar endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (var i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t},\n\t\t_setAdditiveIdentityQuaternion: function _setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t},\n\t\t_setAdditiveIdentityOther: function _setAdditiveIdentityOther() {\n\t\t\tvar startIndex = this._origIndex * this.valueSize;\n\t\t\tvar targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (var i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t},\n\t\t// mix functions\n\t\t_select: function _select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t_slerp: function _slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t},\n\t\t_slerpAdditive: function _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t},\n\t\t_lerp: function _lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t},\n\t\t_lerpAdditive: function _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tvar _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tvar _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tvar _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tvar _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tfunction Composite(targetGroup, path, optionalParsedPath) {\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t}\n\n\tObject.assign(Composite.prototype, {\n\t\tgetValue: function getValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t},\n\t\tsetValue: function setValue(array, offset) {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t},\n\t\tbind: function bind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction PropertyBinding(rootNode, path, parsedPath) {\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\tthis.rootNode = rootNode;\n\t}\n\n\tObject.assign(PropertyBinding, {\n\t\tComposite: Composite,\n\t\tcreate: function create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t},\n\t\tparseTrackName: function parseTrackName(trackName) {\n\t\t\tvar matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tvar objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t},\n\t\tfindNode: function findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tvar bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tvar searchNodeSubtree = function searchNodeSubtree(children) {\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tvar childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t});\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// prototype, continued\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function _getValue_unavailable() {},\n\t\t_setValue_unavailable: function _setValue_unavailable() {},\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\t\tGetterByBindingType: [function getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}, function getValue_array(buffer, offset) {\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}, function getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}, function getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t}],\n\t\tSetterByBindingTypeAndVersioning: [[// Direct\n\t\tfunction setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}, function setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// EntireArray\n\t\tfunction setValue_array(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}, function setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// ArrayElement\n\t\tfunction setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// HasToFromArray\n\t\tfunction setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}, function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}]],\n\t\tgetValue: function getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset); // Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\t\t},\n\t\tsetValue: function getValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t},\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function bind() {\n\t\t\tvar targetObject = this.node;\n\t\t\tvar parsedPath = this.parsedPath;\n\t\t\tvar objectName = parsedPath.objectName;\n\t\t\tvar propertyName = parsedPath.propertyName;\n\t\t\tvar propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tvar objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (var i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tvar nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tvar versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue\n\t});\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tfunction AnimationObjectGroup() {\n\t\tthis.uuid = MathUtils.generateUUID(); // cached objects followed by the active ones\n\n\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\tindices[arguments[i].uuid] = i;\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\t\tthis.stats = {\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t},\n\n\t\t\t\tget inUse() {\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tget bindingsPerObject() {\n\t\t\t\treturn scope._bindings.length;\n\t\t\t}\n\n\t\t};\n\t}\n\n\tObject.assign(AnimationObjectGroup.prototype, {\n\t\tisAnimationObjectGroup: true,\n\t\tadd: function add() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tvar index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var _j = 0, _m = nBindings; _j !== _m; ++_j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[_j],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tvar binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[_j], parsedPaths[_j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\tremove: function remove() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\t// remove & forget\n\t\tuncache: function uncache() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tvar _lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t_lastObject = objects[_lastIndex];\n\n\t\t\t\t\t\tif (_lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[_lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = _lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var _j2 = 0, _m2 = nBindings; _j2 !== _m2; ++_j2) {\n\t\t\t\t\t\t\tvar _bindingsForPath = bindings[_j2];\n\t\t\t\t\t\t\t_bindingsForPath[index] = _bindingsForPath[_lastIndex];\n\n\t\t\t\t\t\t\t_bindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\t\tsubscribe_: function subscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath;\n\t\t\tvar index = indicesByPath[path];\n\t\t\tvar bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tvar object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t},\n\t\tunsubscribe_: function unsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\t});\n\n\tvar AnimationAction = /*#__PURE__*/function () {\n\t\tfunction AnimationAction(mixer, clip, localRoot, blendMode) {\n\t\t\tif (localRoot === void 0) {\n\t\t\t\tlocalRoot = null;\n\t\t\t}\n\n\t\t\tif (blendMode === void 0) {\n\t\t\t\tblendMode = clip.blendMode;\n\t\t\t}\n\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tvar tracks = clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tvar _proto = AnimationAction.prototype;\n\n\t\t_proto.play = function play() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t};\n\n\t\t_proto.reset = function reset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t};\n\n\t\t_proto.isRunning = function isRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\t\t;\n\n\t\t_proto.isScheduled = function isScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t};\n\n\t\t_proto.startAt = function startAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveWeight = function setEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\t\t;\n\n\t\t_proto.getEffectiveWeight = function getEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t};\n\n\t\t_proto.fadeIn = function fadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t};\n\n\t\t_proto.fadeOut = function fadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t};\n\n\t\t_proto.crossFadeFrom = function crossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.crossFadeTo = function crossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t};\n\n\t\t_proto.stopFading = function stopFading() {\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveTimeScale = function setEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\t\t;\n\n\t\t_proto.getEffectiveTimeScale = function getEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t};\n\n\t\t_proto.setDuration = function setDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.syncWith = function syncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.halt = function halt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t};\n\n\t\t_proto.warp = function warp(startTimeScale, endTimeScale, duration) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stopWarping = function stopWarping() {\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\t\t;\n\n\t\t_proto.getMixer = function getMixer() {\n\t\t\treturn this._mixer;\n\t\t};\n\n\t\t_proto.getClip = function getClip() {\n\t\t\treturn this._clip;\n\t\t};\n\n\t\t_proto.getRoot = function getRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\t\t;\n\n\t\t_proto._update = function _update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tvar timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tvar clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tvar weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tvar _interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (var j = 0, m = _interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\t_interpolants[j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (var _j = 0, _m = _interpolants.length; _j !== _m; ++_j) {\n\t\t\t\t\t\t\t_interpolants[_j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[_j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._updateWeight = function _updateWeight(time) {\n\t\t\tvar weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t};\n\n\t\t_proto._updateTimeScale = function _updateTimeScale(time) {\n\t\t\tvar timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t};\n\n\t\t_proto._updateTime = function _updateTime(deltaTime) {\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar loopCount = this._loopCount;\n\t\t\tvar pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tvar loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t};\n\n\t\t_proto._setEndings = function _setEndings(atStart, atEnd, pingPong) {\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._scheduleFading = function _scheduleFading(duration, weightNow, weightThen) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn AnimationAction;\n\t}();\n\n\tfunction AnimationMixer(root) {\n\t\tthis._root = root;\n\n\t\tthis._initMemoryManager();\n\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\t}\n\n\tAnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: AnimationMixer,\n\t\t_bindAction: function _bindAction(action, prototypeAction) {\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tvar bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar track = tracks[i],\n\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tvar binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t},\n\t\t_activateAction: function _activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tvar rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t},\n\t\t_deactivateAction: function _deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tvar bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t},\n\t\t// Memory manager\n\t\t_initMemoryManager: function _initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tvar scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t// Memory management for AnimationAction objects\n\t\t_isActiveAction: function _isActiveAction(action) {\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t},\n\t\t_addInactiveAction: function _addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tvar actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t},\n\t\t_removeInactiveAction: function _removeInactiveAction(action) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t},\n\t\t_removeInactiveBindingsForAction: function _removeInactiveBindingsForAction(action) {\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t_lendAction: function _lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t},\n\t\t_takeBackAction: function _takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t},\n\t\t// Memory management for PropertyMixer objects\n\t\t_addInactiveBinding: function _addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindings = this._bindings;\n\t\t\tvar bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t},\n\t\t_removeInactiveBinding: function _removeInactiveBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t},\n\t\t_lendBinding: function _lendBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t},\n\t\t_takeBackBinding: function _takeBackBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t},\n\t\t// Memory management of Interpolants for weight and time scale\n\t\t_lendControlInterpolant: function _lendControlInterpolant() {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tvar interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t},\n\t\t_takeBackControlInterpolant: function _takeBackControlInterpolant(interpolant) {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t},\n\t\t_controlInterpolantsResultBuffer: new Float32Array(1),\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function clipAction(clip, optionalRoot, blendMode) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid;\n\t\t\tvar clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tvar clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tvar actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tvar prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tvar existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tvar newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t},\n\t\t// get an existing action\n\t\texistingAction: function existingAction(clip, optionalRoot) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function stopAllAction() {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (var i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// advance the time and update apply the animation\n\t\tupdate: function update(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (var i = 0; i !== nActions; ++i) {\n\t\t\t\tvar action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (var _i = 0; _i !== nBindings; ++_i) {\n\t\t\t\tbindings[_i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function setTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (var i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t},\n\t\t// return this mixer's root target object\n\t\tgetRoot: function getRoot() {\n\t\t\treturn this._root;\n\t\t},\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function uncacheClip(clip) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tvar action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t},\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function uncacheRoot(root) {\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (var clipUuid in actionsByClip) {\n\t\t\t\tvar actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (var trackName in bindingByName) {\n\t\t\t\t\tvar binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function uncacheAction(clip, optionalRoot) {\n\t\t\tvar action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\t});\n\n\tvar Uniform = /*#__PURE__*/function () {\n\t\tfunction Uniform(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tvar _proto = Uniform.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t};\n\n\t\treturn Uniform;\n\t}();\n\n\tfunction InstancedInterleavedBuffer(array, stride, meshPerAttribute) {\n\t\tInterleavedBuffer.call(this, array, stride);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {\n\t\tconstructor: InstancedInterleavedBuffer,\n\t\tisInstancedInterleavedBuffer: true,\n\t\tcopy: function copy(source) {\n\t\t\tInterleavedBuffer.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tvar ib = InterleavedBuffer.prototype.clone.call(this, data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tvar json = InterleavedBuffer.prototype.toJSON.call(this, data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\t});\n\n\tfunction GLBufferAttribute(buffer, type, itemSize, elementSize, count) {\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(GLBufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(GLBufferAttribute.prototype, {\n\t\tisGLBufferAttribute: true,\n\t\tsetBuffer: function setBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t},\n\t\tsetType: function setType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetItemSize: function setItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetCount: function setCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Raycaster(origin, direction, near, far) {\n\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tLOD: {},\n\t\t\tPoints: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tSprite: {}\n\t\t};\n\t\tObject.defineProperties(this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function get() {\n\t\t\t\t\tconsole.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction _intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t_intersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tObject.assign(Raycaster.prototype, {\n\t\tset: function set(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t},\n\t\tsetFromCamera: function setFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t},\n\t\tintersectObject: function intersectObject(object, recursive, optionalTarget) {\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\t_intersectObject(object, this, intersects, recursive);\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t},\n\t\tintersectObjects: function intersectObjects(objects, recursive, optionalTarget) {\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif (Array.isArray(objects) === false) {\n\t\t\t\tconsole.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');\n\t\t\t\treturn intersects;\n\t\t\t}\n\n\t\t\tfor (var i = 0, l = objects.length; i < l; i++) {\n\t\t\t\t_intersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\t});\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tvar Spherical = /*#__PURE__*/function () {\n\t\tfunction Spherical(radius, phi, theta) {\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (phi === void 0) {\n\t\t\t\tphi = 0;\n\t\t\t}\n\n\t\t\tif (theta === void 0) {\n\t\t\t\ttheta = 0;\n\t\t\t}\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Spherical.prototype;\n\n\t\t_proto.set = function set(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\t\t;\n\n\t\t_proto.makeSafe = function makeSafe() {\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Spherical;\n\t}();\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tvar Cylindrical = /*#__PURE__*/function () {\n\t\tfunction Cylindrical(radius, theta, y) {\n\t\t\tthis.radius = radius !== undefined ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta !== undefined ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y !== undefined ? y : 0; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Cylindrical.prototype;\n\n\t\t_proto.set = function set(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Cylindrical;\n\t}();\n\n\tvar _vector$8 = /*@__PURE__*/new Vector2();\n\n\tvar Box2 = /*#__PURE__*/function () {\n\t\tfunction Box2(min, max) {\n\t\t\tObject.defineProperty(this, 'isBox2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.min = min !== undefined ? min : new Vector2(+Infinity, +Infinity);\n\t\t\tthis.max = max !== undefined ? max : new Vector2(-Infinity, -Infinity);\n\t\t}\n\n\t\tvar _proto = Box2.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$8.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$8.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box2;\n\t}();\n\n\tvar _startP = /*@__PURE__*/new Vector3();\n\n\tvar _startEnd = /*@__PURE__*/new Vector3();\n\n\tvar Line3 = /*#__PURE__*/function () {\n\t\tfunction Line3(start, end) {\n\t\t\tthis.start = start !== undefined ? start : new Vector3();\n\t\t\tthis.end = end !== undefined ? end : new Vector3();\n\t\t}\n\n\t\tvar _proto = Line3.prototype;\n\n\t\t_proto.set = function set(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.delta = function delta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t};\n\n\t\t_proto.distanceSq = function distanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t};\n\n\t\t_proto.distance = function distance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.closestPointToPointParameter = function closestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tvar startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tvar startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = MathUtils.clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, clampToLine, target) {\n\t\t\tvar t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t};\n\n\t\treturn Line3;\n\t}();\n\n\tfunction ImmediateRenderObject(material) {\n\t\tObject3D.call(this);\n\t\tthis.material = material;\n\n\t\tthis.render = function ()\n\t\t/* renderCallback */\n\t\t{};\n\n\t\tthis.hasPositions = false;\n\t\tthis.hasNormals = false;\n\t\tthis.hasColors = false;\n\t\tthis.hasUvs = false;\n\t\tthis.positionArray = null;\n\t\tthis.normalArray = null;\n\t\tthis.colorArray = null;\n\t\tthis.uvArray = null;\n\t\tthis.count = 0;\n\t}\n\n\tImmediateRenderObject.prototype = Object.create(Object3D.prototype);\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tvar _vector$9 = /*@__PURE__*/new Vector3();\n\n\tvar SpotLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(SpotLightHelper, _Object3D);\n\n\t\tfunction SpotLightHelper(light, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tvar p1 = i / l * Math.PI * 2;\n\t\t\t\tvar p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.cone = new LineSegments(geometry, material);\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpotLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$9.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$9);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t};\n\n\t\treturn SpotLightHelper;\n\t}(Object3D);\n\n\tvar _vector$a = /*@__PURE__*/new Vector3();\n\n\tvar _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tvar SkeletonHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(SkeletonHelper, _LineSegments);\n\n\t\tfunction SkeletonHelper(object) {\n\t\t\tvar _this;\n\n\t\t\tvar bones = getBoneList(object);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar color1 = new Color(0, 0, 1);\n\t\t\tvar color2 = new Color(0, 1, 0);\n\n\t\t\tfor (var i = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'SkeletonHelper';\n\t\t\t_this.isSkeletonHelper = true;\n\t\t\t_this.root = object;\n\t\t\t_this.bones = bones;\n\t\t\t_this.matrix = object.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SkeletonHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar bones = this.bones;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (var i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$a.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$a.x, _vector$a.y, _vector$a.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$a.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$a.x, _vector$a.y, _vector$a.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn SkeletonHelper;\n\t}(LineSegments);\n\n\tfunction getBoneList(object) {\n\t\tvar boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (var i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tvar PointLightHelper = /*#__PURE__*/function (_Mesh) {\n\t\t_inheritsLoose(PointLightHelper, _Mesh);\n\n\t\tfunction PointLightHelper(light, sphereSize, color) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tvar material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _Mesh.call(this, geometry, material) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.color = color;\n\t\t\t_this.type = 'PointLightHelper';\n\t\t\t_this.matrix = _this.light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t};\n\n\t\treturn PointLightHelper;\n\t}(Mesh);\n\n\tvar _vector$b = /*@__PURE__*/new Vector3();\n\n\tvar _color1 = /*@__PURE__*/new Color();\n\n\tvar _color2 = /*@__PURE__*/new Color();\n\n\tvar HemisphereLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(HemisphereLightHelper, _Object3D);\n\n\t\tfunction HemisphereLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\t_this.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (_this.color === undefined) _this.material.vertexColors = true;\n\t\t\tvar position = geometry.getAttribute('position');\n\t\t\tvar colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\n\t\t\t_this.add(new Mesh(geometry, _this.material));\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = HemisphereLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tvar mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tvar colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (var i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tvar color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$b.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t};\n\n\t\treturn HemisphereLightHelper;\n\t}(Object3D);\n\n\tvar GridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(GridHelper, _LineSegments);\n\n\t\tfunction GridHelper(size, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 10;\n\t\t\t}\n\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 10;\n\t\t\t}\n\n\t\t\tif (color1 === void 0) {\n\t\t\t\tcolor1 = 0x444444;\n\t\t\t}\n\n\t\t\tif (color2 === void 0) {\n\t\t\t\tcolor2 = 0x888888;\n\t\t\t}\n\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tvar center = divisions / 2;\n\t\t\tvar step = size / divisions;\n\t\t\tvar halfSize = size / 2;\n\t\t\tvar vertices = [],\n\t\t\t\t\tcolors = [];\n\n\t\t\tfor (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tvar color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'GridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn GridHelper;\n\t}(LineSegments);\n\n\tvar PolarGridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(PolarGridHelper, _LineSegments);\n\n\t\tfunction PolarGridHelper(radius, radials, circles, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 10;\n\t\t\t}\n\n\t\t\tif (radials === void 0) {\n\t\t\t\tradials = 16;\n\t\t\t}\n\n\t\t\tif (circles === void 0) {\n\t\t\t\tcircles = 8;\n\t\t\t}\n\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 64;\n\t\t\t}\n\n\t\t\tif (color1 === void 0) {\n\t\t\t\tcolor1 = 0x444444;\n\t\t\t}\n\n\t\t\tif (color2 === void 0) {\n\t\t\t\tcolor2 = 0x888888;\n\t\t\t}\n\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tvar vertices = [];\n\t\t\tvar colors = []; // create the radials\n\n\t\t\tfor (var i = 0; i <= radials; i++) {\n\t\t\t\tvar v = i / radials * (Math.PI * 2);\n\t\t\t\tvar x = Math.sin(v) * radius;\n\t\t\t\tvar z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tvar color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (var _i = 0; _i <= circles; _i++) {\n\t\t\t\tvar _color = _i & 1 ? color1 : color2;\n\n\t\t\t\tvar r = radius - radius / circles * _i;\n\n\t\t\t\tfor (var j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tvar _v = j / divisions * (Math.PI * 2);\n\n\t\t\t\t\tvar _x = Math.sin(_v) * r;\n\n\t\t\t\t\tvar _z = Math.cos(_v) * r;\n\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b); // second vertex\n\n\t\t\t\t\t_v = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\t_x = Math.sin(_v) * r;\n\t\t\t\t\t_z = Math.cos(_v) * r;\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'PolarGridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolarGridHelper;\n\t}(LineSegments);\n\n\tvar _v1$6 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v3$1 = /*@__PURE__*/new Vector3();\n\n\tvar DirectionalLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(DirectionalLightHelper, _Object3D);\n\n\t\tfunction DirectionalLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.lightPlane = new Line(geometry, material);\n\n\t\t\t_this.add(_this.lightPlane);\n\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\t_this.targetLine = new Line(geometry, material);\n\n\t\t\t_this.add(_this.targetLine);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = DirectionalLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\t_v1$6.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3$1.subVectors(_v2$3, _v1$6);\n\n\t\t\tthis.lightPlane.lookAt(_v2$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2$3);\n\t\t\tthis.targetLine.scale.z = _v3$1.length();\n\t\t};\n\n\t\treturn DirectionalLightHelper;\n\t}(Object3D);\n\n\tvar _vector$c = /*@__PURE__*/new Vector3();\n\n\tvar _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tvar CameraHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(CameraHelper, _LineSegments);\n\n\t\tfunction CameraHelper(camera) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar pointMap = {}; // colors\n\n\t\t\tvar colorFrustum = new Color(0xffaa00);\n\t\t\tvar colorCone = new Color(0xff0000);\n\t\t\tvar colorUp = new Color(0x00aaff);\n\t\t\tvar colorTarget = new Color(0xffffff);\n\t\t\tvar colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'CameraHelper';\n\t\t\t_this.camera = camera;\n\t\t\tif (_this.camera.updateProjectionMatrix) _this.camera.updateProjectionMatrix();\n\t\t\t_this.matrix = camera.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.pointMap = pointMap;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CameraHelper.prototype;\n\n\t\t_proto.update = function update() {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar pointMap = this.pointMap;\n\t\t\tvar w = 1,\n\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t};\n\n\t\treturn CameraHelper;\n\t}(LineSegments);\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector$c.set(x, y, z).unproject(camera);\n\n\t\tvar points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector$c.x, _vector$c.y, _vector$c.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar _box$3 = /*@__PURE__*/new Box3();\n\n\tvar BoxHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(BoxHelper, _LineSegments);\n\n\t\tfunction BoxHelper(object, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = new Float32Array(8 * 3);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.object = object;\n\t\t\t_this.type = 'BoxHelper';\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = BoxHelper.prototype;\n\n\t\t_proto.update = function update(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box$3.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box$3.isEmpty()) return;\n\t\t\tvar min = _box$3.min;\n\t\t\tvar max = _box$3.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn BoxHelper;\n\t}(LineSegments);\n\n\tvar Box3Helper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(Box3Helper, _LineSegments);\n\n\t\tfunction Box3Helper(box, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.box = box;\n\t\t\t_this.type = 'Box3Helper';\n\n\t\t\t_this.geometry.computeBoundingSphere();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Box3Helper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn Box3Helper;\n\t}(LineSegments);\n\n\tvar PlaneHelper = /*#__PURE__*/function (_Line) {\n\t\t_inheritsLoose(PlaneHelper, _Line);\n\n\t\tfunction PlaneHelper(plane, size, hex) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tif (hex === void 0) {\n\t\t\t\thex = 0xffff00;\n\t\t\t}\n\n\t\t\tvar color = hex;\n\t\t\tvar positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\t_this = _Line.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.type = 'PlaneHelper';\n\t\t\t_this.plane = plane;\n\t\t\t_this.size = size;\n\t\t\tvar positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\n\t\t\t_this.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PlaneHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\n\t\t\t_Line.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn PlaneHelper;\n\t}(Line);\n\n\tvar _axis = /*@__PURE__*/new Vector3();\n\n\tvar _lineGeometry, _coneGeometry;\n\n\tvar ArrowHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(ArrowHelper, _Object3D);\n\n\t\tfunction ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this; // dir is assumed to be normalized\n\n\t\t\t_this.type = 'ArrowHelper';\n\t\t\tif (dir === undefined) dir = new Vector3(0, 0, 1);\n\t\t\tif (origin === undefined) origin = new Vector3(0, 0, 0);\n\t\t\tif (length === undefined) length = 1;\n\t\t\tif (color === undefined) color = 0xffff00;\n\t\t\tif (headLength === undefined) headLength = 0.2 * length;\n\t\t\tif (headWidth === undefined) headWidth = 0.2 * headLength;\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\t_this.position.copy(origin);\n\n\t\t\t_this.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.line.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.line);\n\n\t\t\t_this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.cone.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.setDirection(dir);\n\n\t\t\t_this.setLength(length, headLength, headWidth);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ArrowHelper.prototype;\n\n\t\t_proto.setDirection = function setDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tvar radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t};\n\n\t\t_proto.setLength = function setLength(length, headLength, headWidth) {\n\t\t\tif (headLength === undefined) headLength = 0.2 * length;\n\t\t\tif (headWidth === undefined) headWidth = 0.2 * headLength;\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t};\n\n\t\t_proto.setColor = function setColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source, false);\n\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn ArrowHelper;\n\t}(Object3D);\n\n\tvar AxesHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(AxesHelper, _LineSegments);\n\n\t\tfunction AxesHelper(size) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tvar vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tvar colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'AxesHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn AxesHelper;\n\t}(LineSegments);\n\n\tvar _floatView = new Float32Array(1);\n\n\tvar _int32View = new Int32Array(_floatView.buffer);\n\n\tvar DataUtils = {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\ttoHalfFloat: function toHalfFloat(val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tvar x = _int32View[0];\n\t\t\tvar bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tvar m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tvar e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\t};\n\n\tvar _ENCODINGS;\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tvar EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = (_ENCODINGS = {}, _ENCODINGS[LinearEncoding] = 0, _ENCODINGS[sRGBEncoding] = 1, _ENCODINGS[RGBEEncoding] = 2, _ENCODINGS[RGBM7Encoding] = 3, _ENCODINGS[RGBM16Encoding] = 4, _ENCODINGS[RGBDEncoding] = 5, _ENCODINGS[GammaEncoding] = 6, _ENCODINGS);\n\tvar backgroundMaterial = new MeshBasicMaterial({\n\t\tside: BackSide,\n\t\tdepthWrite: false,\n\t\tdepthTest: false\n\t});\n\tvar backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\n\tvar _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tvar _createPlanes2 = /*@__PURE__*/_createPlanes(),\n\t\t\t_lodPlanes = _createPlanes2._lodPlanes,\n\t\t\t_sizeLods = _createPlanes2._sizeLods,\n\t\t\t_sigmas = _createPlanes2._sigmas;\n\n\tvar _clearColor = /*@__PURE__*/new Color();\n\n\tvar _oldTarget = null; // Golden Ratio\n\n\tvar PHI = (1 + Math.sqrt(5)) / 2;\n\tvar INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tvar _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tfunction convertLinearToRGBE(color) {\n\t\tvar maxComponent = Math.max(color.r, color.g, color.b);\n\t\tvar fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\tcolor.multiplyScalar(Math.pow(2.0, -fExp));\n\t\tvar alpha = (fExp + 128.0) / 255.0;\n\t\treturn alpha;\n\t}\n\n\tvar PMREMGenerator = /*#__PURE__*/function () {\n\t\tfunction PMREMGenerator(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tvar _proto = PMREMGenerator.prototype;\n\n\t\t_proto.fromScene = function fromScene(scene, sigma, near, far) {\n\t\t\tif (sigma === void 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\tif (near === void 0) {\n\t\t\t\tnear = 0.1;\n\t\t\t}\n\n\t\t\tif (far === void 0) {\n\t\t\t\tfar = 100;\n\t\t\t}\n\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromEquirectangular = function fromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromCubemap = function fromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileCubemapShader = function compileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileEquirectangularShader = function compileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\t;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (var i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\t\t;\n\n\t\t_proto._cleanup = function _cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t};\n\n\t\t_proto._fromTexture = function _fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._allocateTargets = function _allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tvar params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tvar cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._compileMaterial = function _compileMaterial(material) {\n\t\t\tvar tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t};\n\n\t\t_proto._sceneToCubeUV = function _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tvar fov = 90;\n\t\t\tvar aspect = 1;\n\t\t\tvar cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tvar upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tvar forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar originalAutoClear = renderer.autoClear;\n\t\t\tvar outputEncoding = renderer.outputEncoding;\n\t\t\tvar toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tvar useSolidColor = false;\n\t\t\tvar background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background).convertSRGBToLinear();\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tvar alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();\n\n\t\t\t\tvar _alpha = convertLinearToRGBE(backgroundMaterial.color);\n\n\t\t\t\tbackgroundMaterial.opacity = _alpha;\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t};\n\n\t\t_proto._textureToCubeUV = function _textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tvar mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t};\n\n\t\t_proto._applyPMREM = function _applyPMREM(cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (var i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tvar sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tvar poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\t\t;\n\n\t\t_proto._blur = function _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tvar pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t};\n\n\t\t_proto._halfBlur = function _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tvar STANDARD_DEVIATIONS = 3;\n\t\t\tvar blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tvar blurUniforms = blurMaterial.uniforms;\n\t\t\tvar pixels = _sizeLods[lodIn] - 1;\n\t\t\tvar radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tvar samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES);\n\t\t\t}\n\n\t\t\tvar weights = [];\n\t\t\tvar sum = 0;\n\n\t\t\tfor (var i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tvar _x = i / sigmaPixels;\n\n\t\t\t\tvar weight = Math.exp(-_x * _x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _i = 0; _i < weights.length; _i++) {\n\t\t\t\tweights[_i] = weights[_i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tvar outputSize = _sizeLods[lodOut];\n\t\t\tvar x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tvar y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t};\n\n\t\treturn PMREMGenerator;\n\t}();\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\t\tvar lod = LOD_MAX;\n\n\t\tfor (var i = 0; i < TOTAL_LODS; i++) {\n\t\t\tvar sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tvar sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tvar texelSize = 1.0 / (sizeLod - 1);\n\t\t\tvar min = -texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\t\t\tvar position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tvar uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tvar faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (var face = 0; face < cubeFaces; face++) {\n\t\t\t\tvar x = face % 3 * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : -1;\n\t\t\t\tvar coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tvar fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes: _lodPlanes,\n\t\t\t_sizeLods: _sizeLods,\n\t\t\t_sigmas: _sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tvar weights = new Float32Array(maxSamples);\n\t\tvar poleAxis = new Vector3(0, 1, 0);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform int samples;\\n\\t\\t\\tuniform float weights[ n ];\\n\\t\\t\\tuniform bool latitudinal;\\n\\t\\t\\tuniform float dTheta;\\n\\t\\t\\tuniform float mipInt;\\n\\t\\t\\tuniform vec3 poleAxis;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tvec3 getSample( float theta, vec3 axis ) {\\n\\n\\t\\t\\t\\tfloat cosTheta = cos( theta );\\n\\t\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross( axis, vOutputDirection ) * sin( theta )\\n\\t\\t\\t\\t\\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\\n\\n\\t\\t\\t\\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\\n\\n\\t\\t\\t\\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\\n\\n\\t\\t\\t\\t\\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taxis = normalize( axis );\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\\n\\n\\t\\t\\t\\tfor ( int i = 1; i < n; i++ ) {\\n\\n\\t\\t\\t\\t\\tif ( i >= samples ) {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat theta = dTheta * float( i );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tvar texelSize = new Vector2(1, 1);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\t\\t\\t\\tvec3 outputDirection = normalize( vOutputDirection );\\n\\t\\t\\t\\tvec2 uv = equirectUv( outputDirection );\\n\\n\\t\\t\\t\\tvec2 f = fract( uv / texelSize - 0.5 );\\n\\t\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\t\\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x += texelSize.x;\\n\\t\\t\\t\\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.y += texelSize.y;\\n\\t\\t\\t\\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x -= texelSize.x;\\n\\t\\t\\t\\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\n\\t\\t\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\t\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\t\\t\\tgl_FragColor.rgb = mix( tm, bm, f.y );\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform samplerCube envMap;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tfunction Face4(a, b, c, d, normal, color, materialIndex) {\n\t\tconsole.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.');\n\t\treturn new Face3(a, b, c, normal, color, materialIndex);\n\t}\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials) {\n\t\tif (materials === void 0) {\n\t\t\tmaterials = [];\n\t\t}\n\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tObject.assign(Path.prototype, {\n\t\tfromPoints: function fromPoints(points) {\n\t\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\t\treturn this.setFromPoints(points);\n\t\t}\n\t}); //\n\n\tfunction ClosedSplineCurve3(points) {\n\t\tconsole.warn('THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\t}\n\tClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype); //\n\n\tfunction SplineCurve3(points) {\n\t\tconsole.warn('THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t}\n\tSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype); //\n\n\tfunction Spline(points) {\n\t\tconsole.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t}\n\tSpline.prototype = Object.create(CatmullRomCurve3.prototype);\n\tObject.assign(Spline.prototype, {\n\t\tinitFromArray: function initFromArray()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .initFromArray() has been removed.');\n\t\t},\n\t\tgetControlPointsArray: function getControlPointsArray()\n\t\t/* optionalTarget */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .getControlPointsArray() has been removed.');\n\t\t},\n\t\treparametrizeByArcLength: function reparametrizeByArcLength()\n\t\t/* samplingCoef */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');\n\t\t}\n\t}); //\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tObject.assign(Loader.prototype, {\n\t\textractUrlBase: function extractUrlBase(url) {\n\t\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\t\treturn LoaderUtils.extractUrlBase(url);\n\t\t}\n\t});\n\tLoader.Handlers = {\n\t\tadd: function add()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function get()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tObject.assign(Box2.prototype, {\n\t\tcenter: function center(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\t\treturn this.getCenter(optionalTarget);\n\t\t},\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tsize: function size(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\t\treturn this.getSize(optionalTarget);\n\t\t}\n\t});\n\tObject.assign(Box3.prototype, {\n\t\tcenter: function center(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\t\treturn this.getCenter(optionalTarget);\n\t\t},\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tisIntersectionSphere: function isIntersectionSphere(sphere) {\n\t\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\t\treturn this.intersectsSphere(sphere);\n\t\t},\n\t\tsize: function size(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\t\treturn this.getSize(optionalTarget);\n\t\t}\n\t});\n\tObject.assign(Sphere.prototype, {\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t}\n\t});\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t};\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tObject.assign(MathUtils, {\n\t\trandom16: function random16() {\n\t\t\tconsole.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');\n\t\t\treturn Math.random();\n\t\t},\n\t\tnearestPowerOfTwo: function nearestPowerOfTwo(value) {\n\t\t\tconsole.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');\n\t\t\treturn MathUtils.floorPowerOfTwo(value);\n\t\t},\n\t\tnextPowerOfTwo: function nextPowerOfTwo(value) {\n\t\t\tconsole.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');\n\t\t\treturn MathUtils.ceilPowerOfTwo(value);\n\t\t}\n\t});\n\tObject.assign(Matrix3.prototype, {\n\t\tflattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n\t\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\t\treturn this.toArray(array, offset);\n\t\t},\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\t\treturn vector.applyMatrix3(this);\n\t\t},\n\t\tmultiplyVector3Array: function multiplyVector3Array()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t\t},\n\t\tapplyToBufferAttribute: function applyToBufferAttribute(attribute) {\n\t\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\t\treturn attribute.applyMatrix3(this);\n\t\t},\n\t\tapplyToVector3Array: function applyToVector3Array()\n\t\t/* array, offset, length */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t\t},\n\t\tgetInverse: function getInverse(matrix) {\n\t\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\t\treturn this.copy(matrix).invert();\n\t\t}\n\t});\n\tObject.assign(Matrix4.prototype, {\n\t\textractPosition: function extractPosition(m) {\n\t\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\t\treturn this.copyPosition(m);\n\t\t},\n\t\tflattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n\t\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\t\treturn this.toArray(array, offset);\n\t\t},\n\t\tgetPosition: function getPosition() {\n\t\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t\t},\n\t\tsetRotationFromQuaternion: function setRotationFromQuaternion(q) {\n\t\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\t\treturn this.makeRotationFromQuaternion(q);\n\t\t},\n\t\tmultiplyToArray: function multiplyToArray() {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t\t},\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\tmultiplyVector4: function multiplyVector4(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\tmultiplyVector3Array: function multiplyVector3Array()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t\t},\n\t\trotateAxis: function rotateAxis(v) {\n\t\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\t\tv.transformDirection(this);\n\t\t},\n\t\tcrossVector: function crossVector(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\ttranslate: function translate() {\n\t\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t\t},\n\t\trotateX: function rotateX() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t\t},\n\t\trotateY: function rotateY() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t\t},\n\t\trotateZ: function rotateZ() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t\t},\n\t\trotateByAxis: function rotateByAxis() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t\t},\n\t\tapplyToBufferAttribute: function applyToBufferAttribute(attribute) {\n\t\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\t\treturn attribute.applyMatrix4(this);\n\t\t},\n\t\tapplyToVector3Array: function applyToVector3Array()\n\t\t/* array, offset, length */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t\t},\n\t\tmakeFrustum: function makeFrustum(left, right, bottom, top, near, far) {\n\t\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t\t},\n\t\tgetInverse: function getInverse(matrix) {\n\t\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\t\treturn this.copy(matrix).invert();\n\t\t}\n\t});\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t};\n\n\tObject.assign(Quaternion.prototype, {\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\t\treturn vector.applyQuaternion(this);\n\t\t},\n\t\tinverse: function inverse() {\n\t\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\t\treturn this.invert();\n\t\t}\n\t});\n\tObject.assign(Ray.prototype, {\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tisIntersectionPlane: function isIntersectionPlane(plane) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\t\treturn this.intersectsPlane(plane);\n\t\t},\n\t\tisIntersectionSphere: function isIntersectionSphere(sphere) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\t\treturn this.intersectsSphere(sphere);\n\t\t}\n\t});\n\tObject.assign(Triangle.prototype, {\n\t\tarea: function area() {\n\t\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\t\treturn this.getArea();\n\t\t},\n\t\tbarycoordFromPoint: function barycoordFromPoint(point, target) {\n\t\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\t\treturn this.getBarycoord(point, target);\n\t\t},\n\t\tmidpoint: function midpoint(target) {\n\t\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\t\treturn this.getMidpoint(target);\n\t\t},\n\t\tnormal: function normal(target) {\n\t\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\t\treturn this.getNormal(target);\n\t\t},\n\t\tplane: function plane(target) {\n\t\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\t\treturn this.getPlane(target);\n\t\t}\n\t});\n\tObject.assign(Triangle, {\n\t\tbarycoordFromPoint: function barycoordFromPoint(point, a, b, c, target) {\n\t\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t\t},\n\t\tnormal: function normal(a, b, c, target) {\n\t\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\t\treturn Triangle.getNormal(a, b, c, target);\n\t\t}\n\t});\n\tObject.assign(Shape.prototype, {\n\t\textractAllPoints: function extractAllPoints(divisions) {\n\t\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\t\treturn this.extractPoints(divisions);\n\t\t},\n\t\textrude: function extrude(options) {\n\t\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\t\treturn new ExtrudeGeometry(this, options);\n\t\t},\n\t\tmakeGeometry: function makeGeometry(options) {\n\t\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\t\treturn new ShapeGeometry(this, options);\n\t\t}\n\t});\n\tObject.assign(Vector2.prototype, {\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tdistanceToManhattan: function distanceToManhattan(v) {\n\t\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\t\treturn this.manhattanDistanceTo(v);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t});\n\tObject.assign(Vector3.prototype, {\n\t\tsetEulerFromRotationMatrix: function setEulerFromRotationMatrix() {\n\t\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t\t},\n\t\tsetEulerFromQuaternion: function setEulerFromQuaternion() {\n\t\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t\t},\n\t\tgetPositionFromMatrix: function getPositionFromMatrix(m) {\n\t\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\t\treturn this.setFromMatrixPosition(m);\n\t\t},\n\t\tgetScaleFromMatrix: function getScaleFromMatrix(m) {\n\t\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\t\treturn this.setFromMatrixScale(m);\n\t\t},\n\t\tgetColumnFromMatrix: function getColumnFromMatrix(index, matrix) {\n\t\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\t\treturn this.setFromMatrixColumn(matrix, index);\n\t\t},\n\t\tapplyProjection: function applyProjection(m) {\n\t\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\t\treturn this.applyMatrix4(m);\n\t\t},\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tdistanceToManhattan: function distanceToManhattan(v) {\n\t\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\t\treturn this.manhattanDistanceTo(v);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t});\n\tObject.assign(Vector4.prototype, {\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t}); //\n\n\tObject.assign(Object3D.prototype, {\n\t\tgetChildByName: function getChildByName(name) {\n\t\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\t\treturn this.getObjectByName(name);\n\t\t},\n\t\trenderDepth: function renderDepth() {\n\t\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t\t},\n\t\ttranslate: function translate(distance, axis) {\n\t\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\t\treturn this.translateOnAxis(axis, distance);\n\t\t},\n\t\tgetWorldRotation: function getWorldRotation() {\n\t\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t\t},\n\t\tapplyMatrix: function applyMatrix(matrix) {\n\t\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\t\treturn this.applyMatrix4(matrix);\n\t\t}\n\t});\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(Mesh.prototype, {\n\t\tsetDrawMode: function setDrawMode() {\n\t\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t}\n\t});\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(LOD.prototype, {\n\t\tobjects: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.LOD: .objects has been renamed to .levels.');\n\t\t\t\treturn this.levels;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperty(Skeleton.prototype, 'useVertexTexture', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t},\n\t\tset: function set() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t};\n\n\tObject.defineProperty(Curve.prototype, '__arcLengthDivisions', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\treturn this.arcLengthDivisions;\n\t\t},\n\t\tset: function set(value) {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\tthis.arcLengthDivisions = value;\n\t\t}\n\t}); //\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tsetDynamic: function setDynamic(value) {\n\t\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\t\treturn this;\n\t\t},\n\t\tcopyIndicesArray: function copyIndicesArray()\n\t\t/* indices */\n\t\t{\n\t\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t\t},\n\t\tsetArray: function setArray()\n\t\t/* array */\n\t\t{\n\t\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t\t}\n\t});\n\tObject.assign(BufferGeometry.prototype, {\n\t\taddIndex: function addIndex(index) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\t\tthis.setIndex(index);\n\t\t},\n\t\taddAttribute: function addAttribute(name, attribute) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t\t}\n\n\t\t\tif (name === 'index') {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\t\tthis.setIndex(attribute);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\treturn this.setAttribute(name, attribute);\n\t\t},\n\t\taddDrawCall: function addDrawCall(start, count, indexOffset) {\n\t\t\tif (indexOffset !== undefined) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t\t}\n\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\t\tthis.addGroup(start, count);\n\t\t},\n\t\tclearDrawCalls: function clearDrawCalls() {\n\t\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\t\tthis.clearGroups();\n\t\t},\n\t\tcomputeOffsets: function computeOffsets() {\n\t\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t\t},\n\t\tremoveAttribute: function removeAttribute(name) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\t\treturn this.deleteAttribute(name);\n\t\t},\n\t\tapplyMatrix: function applyMatrix(matrix) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\t\treturn this.applyMatrix4(matrix);\n\t\t}\n\t});\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InstancedBufferGeometry.prototype, {\n\t\tmaxInstancedCount: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\treturn this.instanceCount;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\tthis.instanceCount = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(Raycaster.prototype, {\n\t\tlinePrecision: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\treturn this.params.Line.threshold;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\tthis.params.Line.threshold = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InterleavedBuffer.prototype, {\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(value);\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tsetDynamic: function setDynamic(value) {\n\t\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\t\treturn this;\n\t\t},\n\t\tsetArray: function setArray()\n\t\t/* array */\n\t\t{\n\t\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t\t}\n\t}); //\n\n\tObject.assign(ExtrudeGeometry.prototype, {\n\t\tgetArrays: function getArrays() {\n\t\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t\t},\n\t\taddShapeList: function addShapeList() {\n\t\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t\t},\n\t\taddShape: function addShape() {\n\t\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t\t}\n\t}); //\n\n\tObject.assign(Scene.prototype, {\n\t\tdispose: function dispose() {\n\t\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Uniform.prototype, {\n\t\tdynamic: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function value() {\n\t\t\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhongMaterial.prototype, {\n\t\tmetal: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhysicalMaterial.prototype, {\n\t\ttransparency: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\treturn this.transmission;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\tthis.transmission = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.assign(WebGLRenderer.prototype, {\n\t\tclearTarget: function clearTarget(renderTarget, color, depth, stencil) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\tthis.clear(color, depth, stencil);\n\t\t},\n\t\tanimate: function animate(callback) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\t\tthis.setAnimationLoop(callback);\n\t\t},\n\t\tgetCurrentRenderTarget: function getCurrentRenderTarget() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\t\treturn this.getRenderTarget();\n\t\t},\n\t\tgetMaxAnisotropy: function getMaxAnisotropy() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\t\t},\n\t\tgetPrecision: function getPrecision() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\t\treturn this.capabilities.precision;\n\t\t},\n\t\tresetGLState: function resetGLState() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\t\treturn this.state.reset();\n\t\t},\n\t\tsupportsFloatTextures: function supportsFloatTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\t\treturn this.extensions.get('OES_texture_float');\n\t\t},\n\t\tsupportsHalfFloatTextures: function supportsHalfFloatTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\t\treturn this.extensions.get('OES_texture_half_float');\n\t\t},\n\t\tsupportsStandardDerivatives: function supportsStandardDerivatives() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\t\treturn this.extensions.get('OES_standard_derivatives');\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function supportsCompressedTextureS3TC() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function supportsCompressedTexturePVRTC() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t\t},\n\t\tsupportsBlendMinMax: function supportsBlendMinMax() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\t\treturn this.extensions.get('EXT_blend_minmax');\n\t\t},\n\t\tsupportsVertexTextures: function supportsVertexTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\t\treturn this.capabilities.vertexTextures;\n\t\t},\n\t\tsupportsInstancedArrays: function supportsInstancedArrays() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t\t},\n\t\tenableScissorTest: function enableScissorTest(boolean) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\t\tthis.setScissorTest(boolean);\n\t\t},\n\t\tinitMaterial: function initMaterial() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t\t},\n\t\taddPrePlugin: function addPrePlugin() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t\t},\n\t\taddPostPlugin: function addPostPlugin() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t\t},\n\t\tupdateShadowMap: function updateShadowMap() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t\t},\n\t\tsetFaceCulling: function setFaceCulling() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t\t},\n\t\tallocTextureUnit: function allocTextureUnit() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t\t},\n\t\tsetTexture: function setTexture() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t\t},\n\t\tsetTexture2D: function setTexture2D() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t\t},\n\t\tsetTextureCube: function setTextureCube() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t\t},\n\t\tgetActiveMipMapLevel: function getActiveMipMapLevel() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\t\treturn this.getActiveMipmapLevel();\n\t\t}\n\t});\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Audio.prototype, {\n\t\tload: {\n\t\t\tvalue: function value(file) {\n\t\t\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load(file, function (buffer) {\n\t\t\t\t\tscope.setBuffer(buffer);\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Audio: .startTime is now .play( delay ).');\n\t\t\t}\n\t\t}\n\t});\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t}; //\n\n\n\tvar GeometryUtils = {\n\t\tmerge: function merge(geometry1, geometry2, materialIndexOffset) {\n\t\t\tconsole.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.');\n\t\t\tvar matrix;\n\n\t\t\tif (geometry2.isMesh) {\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\t\t\t}\n\n\t\t\tgeometry1.merge(geometry2, matrix, materialIndexOffset);\n\t\t},\n\t\tcenter: function center(geometry) {\n\t\t\tconsole.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.');\n\t\t\treturn geometry.center();\n\t\t}\n\t};\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tvar SceneUtils = {\n\t\tcreateMultiMaterialObject: function createMultiMaterialObject()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function detach()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function attach()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nTHREE.MTLLoader = function ( manager ) {\n\n\tTHREE.Loader.call( this, manager );\n\n};\n\nTHREE.MTLLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\tconstructor: THREE.MTLLoader,\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to load.\n\t */\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar path = ( this.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetMaterialOptions: function ( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {THREE.MTLLoader.MaterialCreator}\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to parse.\n\t */\n\tparse: function ( text, path ) {\n\n\t\tvar lines = text.split( '\\n' );\n\t\tvar info = {};\n\t\tvar delimiter_pattern = /\\s+/;\n\t\tvar materialsInfo = {};\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tvar line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n} );\n\n/**\n * Create a new THREE.MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\n\n\tthis.baseUrl = baseUrl || '';\n\tthis.options = options;\n\tthis.materialsInfo = {};\n\tthis.materials = {};\n\tthis.materialsArray = [];\n\tthis.nameLookup = {};\n\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n\n\tconstructor: THREE.MTLLoader.MaterialCreator,\n\n\tcrossOrigin: 'anonymous',\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetManager: function ( value ) {\n\n\t\tthis.manager = value;\n\n\t},\n\n\tsetMaterials: function ( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t},\n\n\tconvert: function ( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tvar converted = {};\n\n\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\tvar covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar save = true;\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t},\n\n\tpreload: function () {\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t},\n\n\tgetIndex: function ( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t},\n\n\tgetAsArray: function () {\n\n\t\tvar index = 0;\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t},\n\n\tcreate: function ( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tcreateMaterial_: function ( materialName ) {\n\n\t\t// Create material\n\n\t\tvar scope = this;\n\t\tvar mat = this.materialsInfo[ materialName ];\n\t\tvar params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tvar texParams = scope.getTextureParams( value, params );\n\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( var prop in mat ) {\n\n\t\t\tvar value = mat[ prop ];\n\t\t\tvar n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ke':\n\n\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\tparams.emissive = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( 'map', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( 'specularMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t// Emissive map\n\n\t\t\t\t\tsetMapForType( 'emissiveMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( 'normalMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( 'bumpMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t// Alpha map\n\n\t\t\t\t\tsetMapForType( 'alphaMap', value );\n\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tgetTextureParams: function ( value, matParams ) {\n\n\t\tvar texParams = {\n\n\t\t\tscale: new THREE.Vector2( 1, 1 ),\n\t\t\toffset: new THREE.Vector2( 0, 0 )\n\n\t\t };\n\n\t\tvar items = value.split( /\\s+/ );\n\t\tvar pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t},\n\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tvar texture;\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\t\tvar loader = manager.getHandler( url );\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new THREE.TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\t\ttexture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n};\n","THREE.OBJLoader = ( function () {\n\n\t// o object_name | g group_name\n\tvar object_pattern = /^[og]\\s*(.+)?/;\n\t// mtllib file_reference\n\tvar material_library_pattern = /^mtllib /;\n\t// usemtl material_name\n\tvar material_use_pattern = /^usemtl /;\n\t// usemap map_name\n\tvar map_use_pattern = /^usemap /;\n\n\tvar vA = new THREE.Vector3();\n\tvar vB = new THREE.Vector3();\n\tvar vC = new THREE.Vector3();\n\n\tvar ab = new THREE.Vector3();\n\tvar cb = new THREE.Vector3();\n\n\tfunction ParserState() {\n\n\t\tvar state = {\n\t\t\tobjects: [],\n\t\t\tobject: {},\n\n\t\t\tvertices: [],\n\t\t\tnormals: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\n\t\t\tmaterials: {},\n\t\t\tmaterialLibraries: [],\n\n\t\t\tstartObject: function ( name, fromDeclaration ) {\n\n\t\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\n\t\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\n\t\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\n\n\t\t\t\t\tthis.object.name = name;\n\t\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t\tthis.object = {\n\t\t\t\t\tname: name || '',\n\t\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\n\n\t\t\t\t\tgeometry: {\n\t\t\t\t\t\tvertices: [],\n\t\t\t\t\t\tnormals: [],\n\t\t\t\t\t\tcolors: [],\n\t\t\t\t\t\tuvs: [],\n\t\t\t\t\t\thasUVIndices: false\n\t\t\t\t\t},\n\t\t\t\t\tmaterials: [],\n\t\t\t\t\tsmooth: true,\n\n\t\t\t\t\tstartMaterial: function ( name, libraries ) {\n\n\t\t\t\t\t\tvar previous = this._finalize( false );\n\n\t\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\n\t\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\n\t\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\n\n\t\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar material = {\n\t\t\t\t\t\t\tindex: this.materials.length,\n\t\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\n\t\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\n\t\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\n\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\tinherited: false,\n\n\t\t\t\t\t\t\tclone: function ( index ) {\n\n\t\t\t\t\t\t\t\tvar cloned = {\n\t\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\n\t\t\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\t\t\tmtllib: this.mtllib,\n\t\t\t\t\t\t\t\t\tsmooth: this.smooth,\n\t\t\t\t\t\t\t\t\tgroupStart: 0,\n\t\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\t\tinherited: false\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\n\t\t\t\t\t\t\t\treturn cloned;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.materials.push( material );\n\n\t\t\t\t\t\treturn material;\n\n\t\t\t\t\t},\n\n\t\t\t\t\tcurrentMaterial: function () {\n\n\t\t\t\t\t\tif ( this.materials.length > 0 ) {\n\n\t\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn undefined;\n\n\t\t\t\t\t},\n\n\t\t\t\t\t_finalize: function ( end ) {\n\n\t\t\t\t\t\tvar lastMultiMaterial = this.currentMaterial();\n\t\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\n\n\t\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n\t\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n\t\t\t\t\t\t\tlastMultiMaterial.inherited = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\t\t\t\t\t\tif ( end && this.materials.length > 1 ) {\n\n\t\t\t\t\t\t\tfor ( var mi = this.materials.length - 1; mi >= 0; mi -- ) {\n\n\t\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\n\n\t\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\n\t\t\t\t\t\tif ( end && this.materials.length === 0 ) {\n\n\t\t\t\t\t\t\tthis.materials.push( {\n\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\tsmooth: this.smooth\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn lastMultiMaterial;\n\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Inherit previous objects material.\n\t\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\n\t\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\n\t\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\n\t\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n\t\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\n\n\t\t\t\t\tvar declared = previousMaterial.clone( 0 );\n\t\t\t\t\tdeclared.inherited = true;\n\t\t\t\t\tthis.object.materials.push( declared );\n\n\t\t\t\t}\n\n\t\t\t\tthis.objects.push( this.object );\n\n\t\t\t},\n\n\t\t\tfinalize: function () {\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseVertexIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseNormalIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseUVIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\n\n\t\t\t},\n\n\t\t\taddVertex: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexPoint: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexLine: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddNormal: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.normals;\n\t\t\t\tvar dst = this.object.geometry.normals;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddFaceNormal: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.normals;\n\n\t\t\t\tvA.fromArray( src, a );\n\t\t\t\tvB.fromArray( src, b );\n\t\t\t\tvC.fromArray( src, c );\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tdst.push( cb.x, cb.y, cb.z );\n\t\t\t\tdst.push( cb.x, cb.y, cb.z );\n\t\t\t\tdst.push( cb.x, cb.y, cb.z );\n\n\t\t\t},\n\n\t\t\taddColor: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.colors;\n\t\t\t\tvar dst = this.object.geometry.colors;\n\n\t\t\t\tif ( src[ a ] !== undefined ) dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tif ( src[ b ] !== undefined ) dst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tif ( src[ c ] !== undefined ) dst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddUV: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\n\n\t\t\t},\n\n\t\t\taddDefaultUV: function () {\n\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( 0, 0 );\n\t\t\t\tdst.push( 0, 0 );\n\t\t\t\tdst.push( 0, 0 );\n\n\t\t\t},\n\n\t\t\taddUVLine: function ( a ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\n\t\t\t},\n\n\t\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tvar ia = this.parseVertexIndex( a, vLen );\n\t\t\t\tvar ib = this.parseVertexIndex( b, vLen );\n\t\t\t\tvar ic = this.parseVertexIndex( c, vLen );\n\n\t\t\t\tthis.addVertex( ia, ib, ic );\n\t\t\t\tthis.addColor( ia, ib, ic );\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( na !== undefined && na !== '' ) {\n\n\t\t\t\t\tvar nLen = this.normals.length;\n\n\t\t\t\t\tia = this.parseNormalIndex( na, nLen );\n\t\t\t\t\tib = this.parseNormalIndex( nb, nLen );\n\t\t\t\t\tic = this.parseNormalIndex( nc, nLen );\n\n\t\t\t\t\tthis.addNormal( ia, ib, ic );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.addFaceNormal( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\t// uvs\n\n\t\t\t\tif ( ua !== undefined && ua !== '' ) {\n\n\t\t\t\t\tvar uvLen = this.uvs.length;\n\n\t\t\t\t\tia = this.parseUVIndex( ua, uvLen );\n\t\t\t\t\tib = this.parseUVIndex( ub, uvLen );\n\t\t\t\t\tic = this.parseUVIndex( uc, uvLen );\n\n\t\t\t\t\tthis.addUV( ia, ib, ic );\n\n\t\t\t\t\tthis.object.geometry.hasUVIndices = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// add placeholder values (for inconsistent face definitions)\n\n\t\t\t\t\tthis.addDefaultUV();\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddPointGeometry: function ( vertices ) {\n\n\t\t\t\tthis.object.geometry.type = 'Points';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tvar index = this.parseVertexIndex( vertices[ vi ], vLen );\n\n\t\t\t\t\tthis.addVertexPoint( index );\n\t\t\t\t\tthis.addColor( index );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddLineGeometry: function ( vertices, uvs ) {\n\n\t\t\t\tthis.object.geometry.type = 'Line';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\t\t\t\tvar uvLen = this.uvs.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\n\n\t\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tstate.startObject( '', false );\n\n\t\treturn state;\n\n\t}\n\n\t//\n\n\tfunction OBJLoader( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.materials = null;\n\n\t}\n\n\tOBJLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: OBJLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setRequestHeader( this.requestHeader );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetMaterials: function ( materials ) {\n\n\t\t\tthis.materials = materials;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tvar state = new ParserState();\n\n\t\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t\t}\n\n\t\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\n\n\t\t\t\t// join lines separated by a line continuation character (\\)\n\t\t\t\ttext = text.replace( /\\\\\\n/g, '' );\n\n\t\t\t}\n\n\t\t\tvar lines = text.split( '\\n' );\n\t\t\tvar line = '', lineFirstChar = '';\n\t\t\tvar lineLength = 0;\n\t\t\tvar result = [];\n\n\t\t\t// Faster to just trim left side of the line. Use if available.\n\t\t\tvar trimLeft = ( typeof ''.trimLeft === 'function' );\n\n\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\tline = lines[ i ];\n\n\t\t\t\tline = trimLeft ? line.trimLeft() : line.trim();\n\n\t\t\t\tlineLength = line.length;\n\n\t\t\t\tif ( lineLength === 0 ) continue;\n\n\t\t\t\tlineFirstChar = line.charAt( 0 );\n\n\t\t\t\t// @todo invoke passed in handler if any\n\t\t\t\tif ( lineFirstChar === '#' ) continue;\n\n\t\t\t\tif ( lineFirstChar === 'v' ) {\n\n\t\t\t\t\tvar data = line.split( /\\s+/ );\n\n\t\t\t\t\tswitch ( data[ 0 ] ) {\n\n\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\tstate.vertices.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif ( data.length >= 7 ) {\n\n\t\t\t\t\t\t\t\tstate.colors.push(\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] )\n\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// if no colors are defined, add placeholders so color and vertex indices match\n\n\t\t\t\t\t\t\t\tstate.colors.push( undefined, undefined, undefined );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vn':\n\t\t\t\t\t\t\tstate.normals.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vt':\n\t\t\t\t\t\t\tstate.uvs.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'f' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar vertexData = lineData.split( /\\s+/ );\n\t\t\t\t\tvar faceVertices = [];\n\n\t\t\t\t\t// Parse the face vertex data into an easy to work with format\n\n\t\t\t\t\tfor ( var j = 0, jl = vertexData.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertexData[ j ];\n\n\t\t\t\t\t\tif ( vertex.length > 0 ) {\n\n\t\t\t\t\t\t\tvar vertexParts = vertex.split( '/' );\n\t\t\t\t\t\t\tfaceVertices.push( vertexParts );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\t\t\t\t\tvar v1 = faceVertices[ 0 ];\n\n\t\t\t\t\tfor ( var j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar v2 = faceVertices[ j ];\n\t\t\t\t\t\tvar v3 = faceVertices[ j + 1 ];\n\n\t\t\t\t\t\tstate.addFace(\n\t\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\n\t\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\n\t\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'l' ) {\n\n\t\t\t\t\tvar lineParts = line.substring( 1 ).trim().split( ' ' );\n\t\t\t\t\tvar lineVertices = [], lineUVs = [];\n\n\t\t\t\t\tif ( line.indexOf( '/' ) === - 1 ) {\n\n\t\t\t\t\t\tlineVertices = lineParts;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {\n\n\t\t\t\t\t\t\tvar parts = lineParts[ li ].split( '/' );\n\n\t\t\t\t\t\t\tif ( parts[ 0 ] !== '' ) lineVertices.push( parts[ 0 ] );\n\t\t\t\t\t\t\tif ( parts[ 1 ] !== '' ) lineUVs.push( parts[ 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\n\n\t\t\t\t} else if ( lineFirstChar === 'p' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar pointData = lineData.split( ' ' );\n\n\t\t\t\t\tstate.addPointGeometry( pointData );\n\n\t\t\t\t} else if ( ( result = object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// o object_name\n\t\t\t\t\t// or\n\t\t\t\t\t// g group_name\n\n\t\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n\t\t\t\t\t// var name = result[ 0 ].substr( 1 ).trim();\n\t\t\t\t\tvar name = ( ' ' + result[ 0 ].substr( 1 ).trim() ).substr( 1 );\n\n\t\t\t\t\tstate.startObject( name );\n\n\t\t\t\t} else if ( material_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// material\n\n\t\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\n\n\t\t\t\t} else if ( material_library_pattern.test( line ) ) {\n\n\t\t\t\t\t// mtl file\n\n\t\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\n\n\t\t\t\t} else if ( map_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// the line is parsed but ignored since the loader assumes textures are defined MTL files\n\t\t\t\t\t// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.' );\n\n\t\t\t\t} else if ( lineFirstChar === 's' ) {\n\n\t\t\t\t\tresult = line.split( ' ' );\n\n\t\t\t\t\t// smooth shading\n\n\t\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n\t\t\t\t\t// but does not define a usemtl for each face set.\n\t\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n\t\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n\t\t\t\t\t// where explicit usemtl defines geometry groups.\n\t\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n\t\t\t\t\t/*\n\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\n\t\t\t\t\t * or\n\t\t\t\t\t * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n\t\t\t\t\t *\n\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n\t\t\t\t\t * than 0.\"\n\t\t\t\t\t */\n\t\t\t\t\tif ( result.length > 1 ) {\n\n\t\t\t\t\t\tvar value = result[ 1 ].trim().toLowerCase();\n\t\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\n\t\t\t\t\t\tstate.object.smooth = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar material = state.object.currentMaterial();\n\t\t\t\t\tif ( material ) material.smooth = state.object.smooth;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Handle null terminated files without exception\n\t\t\t\t\tif ( line === '\\0' ) continue;\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.finalize();\n\n\t\t\tvar container = new THREE.Group();\n\t\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\n\n\t\t\tvar hasPrimitives = ! ( state.objects.length === 1 && state.objects[ 0 ].geometry.vertices.length === 0 );\n\n\t\t\tif ( hasPrimitives === true ) {\n\n\t\t\t\tfor ( var i = 0, l = state.objects.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar object = state.objects[ i ];\n\t\t\t\t\tvar geometry = object.geometry;\n\t\t\t\t\tvar materials = object.materials;\n\t\t\t\t\tvar isLine = ( geometry.type === 'Line' );\n\t\t\t\t\tvar isPoints = ( geometry.type === 'Points' );\n\t\t\t\t\tvar hasVertexColors = false;\n\n\t\t\t\t\t// Skip o/g line declarations that did not follow with any faces\n\t\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\n\n\t\t\t\t\tvar buffergeometry = new THREE.BufferGeometry();\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( geometry.vertices, 3 ) );\n\n\t\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\t\tbuffergeometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( geometry.normals, 3 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\t\t\thasVertexColors = true;\n\t\t\t\t\t\tbuffergeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( geometry.colors, 3 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.hasUVIndices === true ) {\n\n\t\t\t\t\t\tbuffergeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( geometry.uvs, 2 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create materials\n\n\t\t\t\t\tvar createdMaterials = [];\n\n\t\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\t\tvar materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n\t\t\t\t\t\tvar material = state.materials[ materialHash ];\n\n\t\t\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\n\n\t\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\t\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof THREE.LineBasicMaterial ) ) {\n\n\t\t\t\t\t\t\t\tvar materialLine = new THREE.LineBasicMaterial();\n\t\t\t\t\t\t\t\tTHREE.Material.prototype.copy.call( materialLine, material );\n\t\t\t\t\t\t\t\tmaterialLine.color.copy( material.color );\n\t\t\t\t\t\t\t\tmaterial = materialLine;\n\n\t\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof THREE.PointsMaterial ) ) {\n\n\t\t\t\t\t\t\t\tvar materialPoints = new THREE.PointsMaterial( { size: 10, sizeAttenuation: false } );\n\t\t\t\t\t\t\t\tTHREE.Material.prototype.copy.call( materialPoints, material );\n\t\t\t\t\t\t\t\tmaterialPoints.color.copy( material.color );\n\t\t\t\t\t\t\t\tmaterialPoints.map = material.map;\n\t\t\t\t\t\t\t\tmaterial = materialPoints;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( material === undefined ) {\n\n\t\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\t\tmaterial = new THREE.LineBasicMaterial();\n\n\t\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\t\tmaterial = new THREE.PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\n\t\t\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\n\t\t\t\t\t\t\tmaterial.vertexColors = hasVertexColors;\n\n\t\t\t\t\t\t\tstate.materials[ materialHash ] = material;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcreatedMaterials.push( material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create mesh\n\n\t\t\t\t\tvar mesh;\n\n\t\t\t\t\tif ( createdMaterials.length > 1 ) {\n\n\t\t\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmesh = new THREE.LineSegments( buffergeometry, createdMaterials );\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmesh = new THREE.Points( buffergeometry, createdMaterials );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmesh = new THREE.Mesh( buffergeometry, createdMaterials );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmesh = new THREE.LineSegments( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmesh = new THREE.Points( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmesh = new THREE.Mesh( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.name = object.name;\n\n\t\t\t\t\tcontainer.add( mesh );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// if there is only the default parser state object with no geometry data, interpret data as point cloud\n\n\t\t\t\tif ( state.vertices.length > 0 ) {\n\n\t\t\t\t\tvar material = new THREE.PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\tvar buffergeometry = new THREE.BufferGeometry();\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( state.vertices, 3 ) );\n\n\t\t\t\t\tif ( state.colors.length > 0 && state.colors[ 0 ] !== undefined ) {\n\n\t\t\t\t\t\tbuffergeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( state.colors, 3 ) );\n\t\t\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar points = new THREE.Points( buffergeometry, material );\n\t\t\t\t\tcontainer.add( points );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn container;\n\n\t\t}\n\n\t} );\n\n\treturn OBJLoader;\n\n} )();\n"]}